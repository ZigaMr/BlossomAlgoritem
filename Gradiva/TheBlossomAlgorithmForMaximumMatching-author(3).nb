(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    390220,       8325]
NotebookOptionsPosition[    385416,       8179]
NotebookOutlinePosition[    387040,       8230]
CellTagsIndexPosition[    386704,       8218]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["The Blossom Algorithm for Maximum Matching", "DemoTitle",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503665996244878*^9, 3.503666003873795*^9}}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "gra", ",", "aGraph", ",", "event", ",", "blosBase", ",", "locs", ",", 
       "matching", ",", "blosOrAP", ",", "extraBlossom", ",", "graphToShow", 
       ",", "listOfInterest", ",", "color", ",", "isols", ",", "data"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"g", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"g", ",", " ", 
         RowBox[{"hh", "[", "exampleInd", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gra", "=", 
       RowBox[{"gr", "[", "exampleInd", "]"}]}], ";", 
      RowBox[{"locs", "=", 
       RowBox[{"First", "/@", " ", 
        RowBox[{"gra", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], ";", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"BlossomPlotData", "[", "gra", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"aGraph", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "g"}], "]"}], "]"}]}], ";", " ", 
      RowBox[{"matching", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "g"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"event", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"3", ",", "g"}], "]"}], "]"}]}], ";", 
      RowBox[{"blosOrAP", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"4", ",", "g"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"blosBase", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"5", ",", "g"}], "]"}], "]"}]}], ";", 
      RowBox[{"extraBlossom", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"6", ",", "g"}], "]"}], "]"}]}], ";", 
      RowBox[{"graphToShow", "=", 
       RowBox[{"FromAdjacencyListsSW", "[", 
        RowBox[{"aGraph", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", 
           RowBox[{"-", "2"}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"listOfInterest", ",", " ", "color"}], "}"}], "=", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"event", "\[Equal]", "\"\<Blossom\>\""}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"blosOrAP", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"Lighter", "[", 
            RowBox[{"Lighter", "[", "Blue", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", "                ", 
         RowBox[{"event", "\[Equal]", "\"\<AugmentingPath\>\""}], ",", 
         RowBox[{"{", 
          RowBox[{"blosOrAP", ",", "Yellow"}], "}"}], ",", "  ", 
         RowBox[{"event", "\[Equal]", "\"\<Stuck\>\""}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", "Yellow"}], "}"}], ",", " ", "True", ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"isols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"aGraph", ",", 
            RowBox[{"V", "[", "gra", "]"}]}], "]"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Which", "[", 
          RowBox[{
           RowBox[{"event", " ", "===", "\"\<Stuck\>\""}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Matching augmented by one edge; maximum matching has `` \
edges.\>\"", ",", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{"matching", ",", 
                   RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                 "/", "2"}]}], "]"}], ",", 
             RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"event", " ", "===", "\"\<Blossom\>\""}], ",", " ", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Blossom found; shrink it and look for augmenting \
path.\>\"", ",", " ", "event", ",", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{"matching", ",", 
                   RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                 "/", "2"}]}], "]"}], ",", 
             RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"event", " ", "===", "\"\<AugmentingPath\>\""}], " ", "&&", 
            RowBox[{"g", "<", 
             RowBox[{
              RowBox[{"Length", "[", "listOfGraphs", "]"}], "-", "1"}]}]}], 
           ",", " ", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Augmenting path found; expand it through the blossom.\>\"",
                ",", " ", "event", ",", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{"matching", ",", 
                   RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                 "/", "2"}]}], "]"}], ",", 
             RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"event", " ", "===", "\"\<AugmentingPath\>\""}], " ", ",", 
           " ", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Augmenting path found in original graph; augment the \
matching.\>\"", ",", " ", "event", ",", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{"matching", ",", 
                   RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                 "/", "2"}]}], "]"}], ",", 
             RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"event", "===", "\"\<Start\>\""}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.\>\"", ",", 
               RowBox[{"V", "[", "gra", "]"}], ",", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{"matching", ",", 
                   RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                 "/", "2"}]}], "]"}], ",", 
             RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"event", "===", "\"\<Blossom\>\""}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".01", "]"}], ",", 
                    RowBox[{"Darker", "@", "Blue"}]}], "}"}], "]"}], ",", " ", 
                   RowBox[{"FaceForm", "[", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Lighter", "[", "Blue", "]"}], "]"}], "]"}], ",", 
                   RowBox[{"Polygon", "[", 
                    RowBox[{"locs", "[", 
                    RowBox[{"[", "listOfInterest", "]"}], "]"}], "]"}]}], 
                  "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"event", "===", "\"\<AugmentingPath\>\""}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"EdgeForm", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".01", "]"}], ",", 
                    RowBox[{"Darker", "@", "Blue"}]}], "}"}], "]"}], ",", " ", 
                  RowBox[{"FaceForm", "[", 
                   RowBox[{"Lighter", "@", "Blue"}], "]"}], ",", 
                  RowBox[{"Polygon", "[", 
                   RowBox[{"locs", "[", 
                    RowBox[{"[", "extraBlossom", "]"}], "]"}], "]"}]}], "}"}],
                 ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"GraphPlot", "[", 
            RowBox[{
             RowBox[{"GraphToEdgeRules", "@", "graphToShow"}], ",", 
             RowBox[{"VertexCoordinateRules", "\[Rule]", " ", 
              RowBox[{"Thread", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"V", "[", "gra", "]"}], "]"}], " ", "\[Rule]", " ", 
                "locs"}], "]"}]}], ",", 
             RowBox[{
             "EdgeRenderingFunction", "\[Rule]", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"event", "===", "\"\<AugmentingPath\>\""}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"listOfInterest", ",", "#2"}], "]"}], "||", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"listOfInterest", ",", 
                    RowBox[{"Reverse", "[", "#2", "]"}]}], "]"}]}], ")"}]}], 
                   ",", "\[IndentingNewLine]", "        ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Lighter", "[", "Green", "]"}], ",", 
                    RowBox[{"Thickness", "[", ".02", "]"}], ",", 
                    RowBox[{"Line", "[", "#1", "]"}]}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], "}"}], "&"}], ")"}]}]}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"GraphPlot", "[", 
            RowBox[{
             RowBox[{"GraphToEdgeRules", "[", "graphToShow", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexCoordinateRules", "\[Rule]", " ", 
              RowBox[{"Thread", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"V", "[", "gra", "]"}], "]"}], " ", "\[Rule]", " ", 
                "locs"}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"EdgeRenderingFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"matching", "[", 
                    RowBox[{"[", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "!=", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", ".7", "]"}], ",", 
                    RowBox[{"Thickness", "[", ".004", "]"}], ",", 
                    RowBox[{"Line", "[", "#1", "]"}]}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], "}"}], "&"}], ")"}]}]}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"GraphPlot", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"GraphToEdgeRules", "[", "graphToShow", "]"}], ",", 
               RowBox[{"Thread", "[", 
                RowBox[{"isols", "\[Rule]", "isols"}], "]"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexCoordinateRules", "\[Rule]", " ", 
              RowBox[{"Thread", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"V", "[", "gra", "]"}], "]"}], " ", "\[Rule]", " ", 
                "locs"}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"EdgeRenderingFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"matching", "[", 
                    RowBox[{"[", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "!=", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                   RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"event", "===", "\"\<Stuck\>\""}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", 
                    RowBox[{"Thickness", "[", ".013", "]"}], ",", 
                    RowBox[{"Line", "[", "#1", "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Thickness", "[", ".01", "]"}], ",", 
                    RowBox[{"Line", "[", "#1", "]"}]}], "}"}]}], "]"}]}], 
                  "]"}], "}"}], "&"}], ")"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"SelfLoopStyle", "\[Rule]", "None"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexRenderingFunction", "\[Rule]", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Which", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#2", "\[Equal]", "blosBase"}], "&&", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"event", "===", "\"\<Blossom\>\""}], "||", 
                    RowBox[{"event", "===", "\"\<AugmentingPath\>\""}]}], 
                    ")"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", 
                    RowBox[{"Thickness", "[", "0.002", "]"}]}], "}"}], "]"}], 
                    ",", " ", 
                    RowBox[{"FaceForm", "[", "Yellow", "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{".022", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "2"}], "]"}], "]"}], 
                    "-", 
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "]"}], "]"}]}], 
                    ")"}]}]}], "]"}], ",", " ", 
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<B\>\"", ",", "Bold"}], "]"}], ",", "#1"}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"listOfInterest", ",", "#2"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", 
                    RowBox[{"Thickness", "[", "0.0004", "]"}]}], "}"}], "]"}],
                     ",", " ", 
                    RowBox[{"FaceForm", "[", 
                    RowBox[{"color", ";", "Black"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{".01", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "2"}], "]"}], "]"}], 
                    "-", 
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "]"}], "]"}]}], 
                    ")"}]}]}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<B\>\"", ",", "Bold"}], "]"}], ",", "#1"}], 
                    "]"}], ";", 
                    RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]",
                   "True", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{"Black", ",", 
                    RowBox[{"Thickness", "[", "0.0004", "]"}]}], "}"}], "]"}],
                     ",", " ", 
                    RowBox[{"FaceForm", "[", 
                    RowBox[{"Yellow", ";", "Black"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", " ", 
                    RowBox[{".01", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "2"}], "]"}], "]"}], 
                    "-", 
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "]"}], "]"}]}], 
                    ")"}]}]}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<B\>\"", ",", "Bold"}], "]"}], ",", "#1"}], 
                    "]"}], ";", 
                    RowBox[{"{", "}"}]}]}], "}"}]}], "]"}], "&"}], ")"}]}]}], 
            "]"}], ",", "\[IndentingNewLine]", " ", 
           RowBox[{"PlotLabel", "\[Rule]", "None"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"data", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
           RowBox[{"Frame", "\[Rule]", 
            RowBox[{"!", "True"}]}], ",", 
           RowBox[{"PlotRangePadding", "\[Rule]", "0.15"}], ",", 
           RowBox[{"FrameTicks", "\[Rule]", "True"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"400", ",", "400"}], "}"}]}]}], "]"}]}], "}"}], 
       "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exampleInd", ",", "1", ",", " ", "\"\<example\>\""}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g", ",", "1", ",", " ", "\"\<algorithm step\>\""}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"hh", "[", "exampleInd", "]"}], "]"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"count", ",", "0"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfGraphs", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfMatchings", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfEvents", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfExtraBlossoms", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfBlosAndAPs", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"blossomBases", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"exampleInd", ",", "g"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"gr", "[", "2", "]"}], " ", "is", " ", "from", " ", "my", " ",
         "MapColoring", " ", "package", "   ", 
        RowBox[{"SeedRandom", "[", "499", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"gr2", "=", 
        RowBox[{"ToGraph", "@", 
         RowBox[{"RandomPlanarGraphNicelyDrawn", "[", "37", "]"}]}]}], ";"}], 
      " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"hh", "[", "1", "]"}], "=", "11"}], ";", " ", 
      RowBox[{
       RowBox[{"hh", "[", "2", "]"}], "=", "7"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"gr", "[", "1", "]"}], " ", "is", " ", "the", " ", "Zwick", 
        " ", "example"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gr", "[", "1", "]"}], "=", 
       RowBox[{"graph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "3"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3", ",", "6"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4", ",", "5"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "8"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "10"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "7"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "14"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7", ",", "9"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"8", ",", "9"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "11"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "28"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"11", ",", "12"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"11", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"13", ",", "16"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "15"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"15", ",", "18"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"15", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"16", ",", "17"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"17", ",", "22"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"17", ",", "24"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"18", ",", "19"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"18", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "21"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"20", ",", "21"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"22", ",", "23"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"23", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"24", ",", "25"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"25", ",", "27"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"26", ",", "27"}], "}"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.627", ",", "2.998"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.245", ",", "3.902"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3.383", ",", "3.91"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2.342", ",", "4.225"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1.42", ",", "4.859"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.399", ",", "5."}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3.981", ",", "5.843"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2.077", ",", "6.014"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3.077", ",", "6.586"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.947", ",", "3.545"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.487", ",", "2.605"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.", ",", "1.878"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.773", ",", "1.579"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5.424", ",", "4.141"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6.034", ",", "3.305"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1.623", ",", "1.06"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2.605", ",", "1.021"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5.92", ",", "2.189"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6.858", ",", "1.966"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6.995", ",", "3.514"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7.505", ",", "2.695"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3.244", ",", "1.866"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.131", ",", "1.985"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3.104", ",", "0.151"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.133", ",", "0."}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5.112", ",", "1.575"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4.977", ",", "0.586"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.244", ",", "4.217"}], "}"}], "}"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gr", "[", "2", "]"}], "=", 
       RowBox[{"graph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "3"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "9"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "22"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "30"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", "31"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "8"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "27"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "32"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"2", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3", ",", "11"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3", ",", "31"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"3", ",", "37"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4", ",", "16"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4", ",", "17"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4", ",", "24"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"4", ",", "33"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "11"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "15"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "16"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "18"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"5", ",", "37"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "7"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "19"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "28"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "29"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"6", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7", ",", "10"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7", ",", "21"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"7", ",", "28"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"8", ",", "23"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"8", ",", "32"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"9", ",", "12"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"9", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"9", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"9", ",", "22"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"9", ",", "30"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "13"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "21"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "22"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"10", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"11", ",", "16"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"11", ",", "37"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "15"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "18"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "30"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"12", ",", "31"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"13", ",", "19"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"13", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"13", ",", "22"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "17"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "19"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "25"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "33"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"14", ",", "35"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"15", ",", "18"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"15", ",", "31"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"15", ",", "37"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"16", ",", "17"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"16", ",", "24"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"16", ",", "25"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"16", ",", "34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"17", ",", "25"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"17", ",", "33"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"18", ",", "19"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"18", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"18", ",", "34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "20"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "25"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "29"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"19", ",", "35"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"21", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"21", ",", "27"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"21", ",", "28"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"22", ",", "26"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"23", ",", "24"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"23", ",", "29"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"23", ",", "32"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"23", ",", "35"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"24", ",", "33"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"24", ",", "35"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"25", ",", "34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"26", ",", "27"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"27", ",", "28"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"27", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"28", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"29", ",", "32"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"29", ",", "35"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"29", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"30", ",", "31"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"31", ",", "37"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"32", ",", "36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"33", ",", "35"}], "}"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.174", ",", "0.985"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.94"}], ",", "0.342"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.766", ",", "0.643"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.395", ",", 
              RowBox[{"-", "0.718"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.615", ",", 
              RowBox[{"-", "0.052"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.242"}], ",", "0.123"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.277"}], ",", "0.36"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.94"}], ",", 
              RowBox[{"-", "0.342"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.117", ",", "0.525"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.272"}], ",", "0.541"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1.", ",", "0."}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.298", ",", "0.361"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.075"}], ",", "0.328"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.224", ",", 
              RowBox[{"-", "0.469"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.471", ",", "0.232"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.766", ",", 
              RowBox[{"-", "0.643"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.402", ",", 
              RowBox[{"-", "0.581"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.349", ",", "0.068"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.104", ",", 
              RowBox[{"-", "0.131"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.159", ",", "0.23"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.399"}], ",", "0.5"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.111"}], ",", "0.649"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", 
              RowBox[{"-", "0.866"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.174", ",", 
              RowBox[{"-", "0.985"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.388", ",", 
              RowBox[{"-", "0.412"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", "0.866"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.549"}], ",", "0.428"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.43"}], ",", "0.34"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.299"}], ",", 
              RowBox[{"-", "0.251"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.256", ",", "0.596"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.437", ",", "0.514"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.638"}], ",", 
              RowBox[{"-", "0.198"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.237", ",", 
              RowBox[{"-", "0.663"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.444", ",", 
              RowBox[{"-", "0.234"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.01"}], ",", 
              RowBox[{"-", "0.561"}]}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.511"}], ",", "0.125"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"0.658", ",", "0.267"}], "}"}], "}"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AdjacencyListsToEdges", "[", "al_", "]"}], " ", ":=", " ", 
       RowBox[{"List", "/@", " ", 
        RowBox[{"Union", "[", 
         RowBox[{"Sort", "/@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"MapIndexed", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", " ", "#"}], "}"}], 
                "&"}], ",", " ", "al"}], "]"}], "/.", " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i_Integer", ",", " ", "L_List"}], "}"}], " ", ":>", 
              " ", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "l"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"l", ",", "L"}], "}"}]}], "]"}]}]}], ",", "1"}], 
           "]"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FromAdjacencyListsSW", "[", "al_", "]"}], ":=", 
       RowBox[{"graph", "[", 
        RowBox[{
         RowBox[{"AdjacencyListsToEdges", "[", "al", "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"i", ",", "0"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "al", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"GraphToEdgeRules", "[", "G_", "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"First", "/@", " ", 
          RowBox[{"G", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ")"}], " ", "/.", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x_Integer", ",", " ", "y_"}], "}"}], ":>", " ", 
         RowBox[{"x", "\[Rule]", "y"}]}]}]}], ";", 
      RowBox[{
       RowBox[{"GraphToVertexRules", "[", "G_", "]"}], " ", ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "tt", "}"}], ",", 
         RowBox[{
          RowBox[{"tt", "=", " ", 
           RowBox[{"First", "/@", " ", 
            RowBox[{"G", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], ";", " ", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "tt", "]"}], "]"}], "\[Rule]", " ", 
            "tt"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"EdgesSW", "[", "G_graph", "]"}], " ", ":=", " ", 
       RowBox[{"First", " ", "/@", " ", 
        RowBox[{"G", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"V", "[", "G_graph", "]"}], ":=", 
       RowBox[{"Length", "[", 
        RowBox[{"G", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\n", 
      RowBox[{
       RowBox[{"ToAdjacencyListsSW", "[", "G_graph", "]"}], " ", ":=", "  ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"etemp", ",", "ee", ",", "missing"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"etemp", "=", 
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"ee", "=", 
              RowBox[{"Sort", "/@", " ", 
               RowBox[{"EdgesSW", "[", "G", "]"}]}]}], ",", 
             RowBox[{"Reverse", " ", "/@", " ", "ee"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"missing", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{"G", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "//", "Length"}], "]"}], ",", 
             " ", 
             RowBox[{"First", "/@", " ", "etemp"}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"etemp", "=", 
           RowBox[{"Sort", "@", 
            RowBox[{"Join", "[", 
             RowBox[{"etemp", ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"m", ",", 
                  RowBox[{"{", "}"}]}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"m", ",", "missing"}], "}"}]}], "]"}]}], "]"}]}]}], 
          ";", "\n", "    ", 
          RowBox[{
           RowBox[{
            RowBox[{"Split", "[", 
             RowBox[{"etemp", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "===", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}], "/.", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"_Integer", ",", " ", "n_"}], "}"}], ":>", " ", "n"}]}],
            "/.", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", "}"}], "}"}], "\[Rule]", 
            RowBox[{"{", "}"}]}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MaximalMatchingSW", "[", "g_graph", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"seen", ",", 
           RowBox[{"match", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"ee", "=", 
            RowBox[{"EdgesSW", "[", "g", "]"}]}], ",", "st"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"st", "=", "1"}], ";", 
          RowBox[{"match", "=", 
           RowBox[{"ee", "[", 
            RowBox[{"[", "st", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"seen", "[", "_", "]"}], " ", ":=", " ", "False"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"seen", "[", 
            RowBox[{"match", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "=", " ", "True"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"seen", "[", 
            RowBox[{"match", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], " ", "=", " ", "True"}], 
          ";", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"!", 
                RowBox[{"seen", "[", 
                 RowBox[{"e", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}]}], " ", "&&", " ", 
               RowBox[{"!", 
                RowBox[{"seen", "[", 
                 RowBox[{"e", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
              RowBox[{
               RowBox[{"match", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"match", ",", "e"}], "]"}]}], ";", " ", 
               RowBox[{
                RowBox[{"seen", "[", 
                 RowBox[{"e", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "=", 
                RowBox[{
                 RowBox[{"seen", "[", 
                  RowBox[{"e", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "=", "True"}]}]}]}],
              "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"e", ",", 
              RowBox[{"Delete", "[", 
               RowBox[{"ee", ",", "st"}], "]"}]}], "}"}]}], "]"}], ";", 
          RowBox[{"Sort", "/@", 
           RowBox[{"Partition", "[", 
            RowBox[{"match", ",", "2"}], "]"}]}]}]}], "]"}]}], ";", "\n", 
      "\n", "\n", 
      RowBox[{
       RowBox[{"DoublePathToFlower", "[", "doublePath_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"timesOccurred", "=", 
            RowBox[{"Tally", "[", "doublePath", "]"}]}], ",", "twice", ",", 
           "locations"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"twice", "=", 
           RowBox[{"Select", "[", 
            RowBox[{"timesOccurred", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "2"}], "&"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"twice", "\[Equal]", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"Return", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", "doublePath"}], "}"}], "]"}]}], "]"}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"twice", "=", 
           RowBox[{"twice", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Get", " ", "the", " ", "first", " ", "part", " ", "of", " ", 
            "the", " ", "last", " ", "list"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"locations", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"doublePath", ",", "twice"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"doublePath", ",", 
              RowBox[{
               RowBox[{"locations", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}], ",", 
            RowBox[{"Most", "[", 
             RowBox[{"Take", "[", 
              RowBox[{"doublePath", ",", "locations"}], "]"}], "]"}]}], 
           "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FindAugOrBlossom", "[", 
        RowBox[{"Gadj_", ",", " ", "_"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Stuck\>\"", ",", " ", 
          RowBox[{"{", "}"}]}], "}"}], "/;", 
        RowBox[{
         RowBox[{"Length", "[", "Gadj", "]"}], "\[LessEqual]", "2"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FindAugOrBlossom", "[", 
        RowBox[{"Gadj_", ",", "MV_"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "parents", ",", "n", ",", "vertices", ",", "treeRoots", ",", "head",
            ",", "tail", ",", "Q", ",", "neighbors", ",", "novelNeighbors", 
           ",", 
           RowBox[{"vw", "=", 
            RowBox[{"{", "}"}]}], ",", "evenQ", ",", 
           RowBox[{"uncoveredNode", "=", "0"}], ",", "v", ",", "doublePath"}],
           "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", 
           RowBox[{
            RowBox[{"Length", "[", "Gadj", "]"}], "-", "1"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"vertices", "=", 
           RowBox[{"Range", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"parents", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", 
             RowBox[{"{", "n", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"treeRoots", "=", 
           RowBox[{"Select", "[", 
            RowBox[{"vertices", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"MV", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "\[Equal]", "0"}], "&"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", "\"\<Tree roots\>\"", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Print", "[", "treeRoots", "]"}], ";"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"head", "=", 
           RowBox[{"tail", "=", "0"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Q", "=", 
             RowBox[{"Table", "[", 
              RowBox[{"0", ",", 
               RowBox[{"{", "n", "}"}]}], "]"}]}], ";"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"evenQ", "=", 
             RowBox[{"Table", "[", 
              RowBox[{"False", ",", 
               RowBox[{"{", "n", "}"}]}], "]"}]}], ";"}], "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Workhorse", " ", "right", " ", "here"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"head", "\[Equal]", "tail"}], "&&", 
                RowBox[{"uncoveredNode", "\[Equal]", "0"}], "&&", 
                RowBox[{"vw", "\[Equal]", 
                 RowBox[{"{", "}"}]}], "&&", 
                RowBox[{"treeRoots", "\[NotEqual]", 
                 RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Q", "[", "tail", "]"}], "=", 
                 RowBox[{
                  RowBox[{"parents", "[", 
                   RowBox[{"[", 
                    RowBox[{"treeRoots", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "=", 
                  RowBox[{"treeRoots", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"tail", "++"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"evenQ", "[", 
                  RowBox[{"treeRoots", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "=", "True"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"treeRoots", "=", 
                 RowBox[{"Rest", "[", "treeRoots", "]"}]}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"head", "<", "tail"}], "&&", 
              RowBox[{"treeRoots", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], "&&", 
              RowBox[{"vw", "\[Equal]", 
               RowBox[{"{", "}"}]}]}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"v", "=", 
              RowBox[{"Q", "[", "head", "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"head", "++"}], ";", "\[IndentingNewLine]", 
             RowBox[{"neighbors", " ", "=", " ", 
              RowBox[{"Gadj", "[", 
               RowBox[{"[", "v", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"evenQ", "[", "v", "]"}], "\[Equal]", "True"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"check", " ", "for", " ", "possibility", " ", 
                 RowBox[{"of", ":", "\[IndentingNewLine]", 
                  RowBox[{
                  "1.", " ", "augmenting", " ", "path", "\[IndentingNewLine]",
                    "2.", " ", "extending", " ", "tree", 
                   "\[IndentingNewLine]", "3.", " ", "blossom"}]}]}], 
                "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"NOTE", ":", " ", 
                  RowBox[{
                  "This", " ", "goes", " ", "through", " ", "all", " ", 
                   "neighbors"}]}], ",", " ", 
                 RowBox[{"pretty", " ", "sweet"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Do", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Which", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[Equal]", "0"}], " ", "&&",
                     " ", 
                    RowBox[{
                    RowBox[{"MV", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[Equal]", "0"}]}], " ", 
                   RowBox[{"(*", " ", 
                    RowBox[{"found", " ", "augmenting", " ", "path"}], " ", 
                    "*)"}], ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "=", "v"}], ";", 
                    RowBox[{"uncoveredNode", "=", "w"}], ";", 
                    RowBox[{"Break", "[", "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[Equal]", "0"}], "&&", 
                    RowBox[{
                    RowBox[{"MV", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[NotEqual]", "0"}]}], 
                   " ", 
                   RowBox[{"(*", " ", 
                    RowBox[{"extend", " ", "tree"}], " ", "*)"}], ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "=", "v"}], ";", 
                    RowBox[{
                    RowBox[{"Q", "[", "tail", "]"}], "=", "w"}], ";", 
                    RowBox[{"tail", "++"}], ";", 
                    RowBox[{
                    RowBox[{"evenQ", "[", "w", "]"}], "=", "False"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[NotEqual]", "0"}], "&&", 
                    RowBox[{"evenQ", "[", "w", "]"}]}], ",", 
                   RowBox[{
                    RowBox[{"vw", "=", 
                    RowBox[{"{", 
                    RowBox[{"v", ",", "w"}], "}"}]}], ";", 
                    RowBox[{"Break", "[", "]"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"w", ",", " ", "neighbors"}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "check", " ", "for", " ", "the", " ", "matching", " ", 
                 "edge"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"NOTE", ":", " ", 
                  RowBox[{
                  "This", " ", "goes", " ", "through", " ", "all", " ", 
                   "neighbors"}]}], ",", " ", 
                 RowBox[{"pretty", " ", "sweet"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Do", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"MV", "[", 
                    RowBox[{"[", "v", "]"}], "]"}], "\[Equal]", "w"}], "&&", 
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[Equal]", "0"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "=", "v"}], ";", 
                    RowBox[{
                    RowBox[{"Q", "[", "tail", "]"}], "=", "w"}], ";", 
                    RowBox[{"tail", "++"}], ";", 
                    RowBox[{
                    RowBox[{"evenQ", "[", "w", "]"}], "=", "True"}], ";", 
                    RowBox[{"Break", "[", "]"}]}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"Found", " ", "odd"}], "-", 
                    RowBox[{"odd", " ", "blossom"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"MV", "[", 
                    RowBox[{"[", "v", "]"}], "]"}], "\[Equal]", "w"}], "&&", 
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], "\[NotEqual]", "0"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"evenQ", "[", "w", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"vw", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MV", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], ",", "w"}], "}"}]}], ";", 
                    RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}]}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{"w", ",", "neighbors"}], "}"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Which", "[", 
           RowBox[{
            RowBox[{"uncoveredNode", "\[NotEqual]", "0"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<AugmentingPath\>\"", ",", " ", 
              RowBox[{"Reverse", "[", 
               RowBox[{"Most", "[", 
                RowBox[{"FixedPointList", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"parents", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", 
                  "uncoveredNode"}], "]"}], "]"}], "]"}]}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"FixedPointList", ":", "\[IndentingNewLine]", "\t", 
                RowBox[{
                 RowBox[{"-", " ", "Goes"}], " ", "through", " ", "parents", 
                 " ", "until", " ", "finding", " ", "a", " ", "fixed", " ", 
                 "point"}]}], ",", " ", 
               RowBox[{"the", " ", "root", "\[IndentingNewLine]", 
                RowBox[{"Most", ":", "\[IndentingNewLine]", "\t", 
                 RowBox[{
                  RowBox[{"-", " ", "Gets"}], " ", "all", " ", "but", " ", 
                  "the", " ", "last"}]}]}], ",", " ", 
               RowBox[{
               "because", " ", "FixedPointList", " ", "displays", 
                "\[IndentingNewLine]", "\t\t", "the", " ", "fixed", " ", 
                "point", " ", "twice", "\[IndentingNewLine]", 
                RowBox[{"Reverse", ":", "\[IndentingNewLine]", "\t", 
                 RowBox[{
                  RowBox[{"-", " ", "Starts"}], " ", "the", " ", "list", " ", 
                  "at", " ", "the", " ", 
                  RowBox[{"blossom", "/", "stem"}]}]}]}], ",", " ", 
               RowBox[{
               "going", " ", "to", " ", "the", " ", "uncovered", " ", 
                "node"}]}], "\[IndentingNewLine]", "*)"}], 
             "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"vw", "\[NotEqual]", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Blossom\>\"", ",", 
              RowBox[{
               RowBox[{"doublePath", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Reverse", "[", 
                   RowBox[{"Most", "[", 
                    RowBox[{"FixedPointList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", 
                    RowBox[{"vw", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                  ",", 
                  RowBox[{"Most", "[", 
                   RowBox[{"Most", "[", 
                    RowBox[{"FixedPointList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"parents", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", 
                    RowBox[{"vw", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"DoublePathToFlower", "[", "doublePath", "]"}]}]}], 
             "}"}], ",", "\[IndentingNewLine]", "True", " ", 
            RowBox[{"(*", " ", "Default", " ", "*)"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Stuck\>\"", ",", 
              RowBox[{"{", "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]",
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ShrinkFlower", "[", 
        RowBox[{"Gadj_", ",", "MV_", ",", 
         RowBox[{"{", 
          RowBox[{"stem_", ",", "blossom_"}], "}"}]}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "Gadj1", ",", "mate", ",", "ns", ",", "stemBase", ",", 
           "blossomNeighbors", ",", "blossomNeighborConnections"}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Gadj1", "=", "Gadj"}], ";", "\[IndentingNewLine]", 
          RowBox[{"mate", "=", "MV"}], ";", "\[IndentingNewLine]", 
          RowBox[{"stemBase", "=", 
           RowBox[{"blossom", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "This", " ", "gets", " ", "all", " ", "of", " ", "the", " ", 
            "neighbors", " ", "of", " ", "the", " ", "blossom", " ", "not", 
            " ", "in", " ", "the", " ", 
            RowBox[{"blossom", "!"}], " ", "The", " ", "novel", " ", 
            "neighbors"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"blossomNeighbors", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{
             RowBox[{"Union", "@@", 
              RowBox[{"Gadj1", "[", 
               RowBox[{"[", "blossom", "]"}], "]"}]}], ",", "blossom"}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "This", " ", "sets", " ", "all", " ", "of", " ", "the", " ", 
             "blossom", " ", "vertices", " ", "adjacencies", " ", "to", " ", 
             RowBox[{"{", "}"}]}], ",", " ", 
            RowBox[{"except", " ", "the", " ", 
             RowBox[{"base", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Gadj1", "[", 
            RowBox[{"[", 
             RowBox[{"Rest", "[", "blossom", "]"}], "]"}], "]"}], "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "This", " ", "sets", " ", "the", " ", "adjacency", " ", "of", " ", 
            "the", " ", "stem", " ", "to", " ", "be", " ", "the", " ", 
            "novel", " ", "neighbors", " ", "of", " ", "the", " ", 
            RowBox[{"blossom", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Gadj1", "[", 
            RowBox[{"[", "stemBase", "]"}], "]"}], "=", "blossomNeighbors"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"**", "**", "**", "**", "**", "**", " ", "Added"}], " ", 
            "by", " ", "MK"}], " ", "************)"}], "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"Gadj1", "[", 
                  RowBox[{"[", "bN", "]"}], "]"}], ",", "stemBase"}], "]"}]}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"PrependTo", "[", 
               RowBox[{
                RowBox[{"Gadj1", "[", 
                 RowBox[{"[", "bN", "]"}], "]"}], ",", "stemBase"}], "]"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"bN", ",", "blossomNeighbors"}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "This", " ", "does", " ", "exactly", " ", "what", " ", "we", " ", 
             "want"}], ",", " ", 
            RowBox[{"avoiding", " ", "a", " ", "while", " ", 
             RowBox[{"loop", ".", " ", "Here"}], " ", "we", " ", "remove", 
             " ", "the", " ", "vertices", " ", "in", " ", "the", " ", 
             "adjacency", " ", "list", " ", "which", " ", "have", " ", "been",
              " ", "shrunk", " ", "and", " ", "removed", " ", "in", " ", 
             "the", " ", "blossom"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Gadj1", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{"Gadj1", ",", 
             RowBox[{"Alternatives", "@@", 
              RowBox[{"Rest", "[", "blossom", "]"}]}], ",", "\[Infinity]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Attaches", " ", "things", " ", "not", " ", "in", " ", "the", " ", 
            "blossom"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"blossomNeighborConnections", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"b", ",", " ", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"Gadj", "[", 
                  RowBox[{"[", "b", "]"}], "]"}], ",", "blossom"}], "]"}]}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"b", ",", "blossom"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"This", " ", "is", " ", 
            RowBox[{"key", ".", " ", "This"}], " ", "attaches", " ", "the", 
            " ", "stem", " ", "and", " ", "blossom", " ", "at", " ", "the", 
            " ", "end", " ", "of", " ", "the", " ", "adjacency", " ", 
            RowBox[{"list", ".", " ", "But"}], " ", 
            RowBox[{"don", "'"}], "t", " ", "we", " ", "want", " ", "to", " ",
             "append", " ", "or", " ", "join", " ", 
            RowBox[{"it", "?"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Gadj1", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], "=", 
           RowBox[{"{", 
            RowBox[{"stem", ",", "blossomNeighborConnections"}], "}"}]}], ";",
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "This", " ", "takes", " ", "the", " ", "matching", " ", "function",
             " ", "and", " ", "removes", " ", "the", " ", "matching", " ", 
            "in", " ", "the", " ", "blossom"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{"mate", "[", 
              RowBox[{"[", "blossom", "]"}], "]"}], "=", "0"}], ";"}], "*)"}],
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"ns", "=", 
           RowBox[{"Length", "[", "stem", "]"}]}], ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "This", " ", "flips", " ", "the", " ", "matching", " ", "on", " ", 
            "the", " ", 
            RowBox[{
             RowBox[{"stem", "!"}], " ", "**", "**", "Look"}], " ", "at", " ",
             "this", " ", 
            RowBox[{"more", "**", "**"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Killed", " ", "by", " ", "Zwick"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"mate", "[", 
                 RowBox[{"stem", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
                RowBox[{"stem", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ";", 
               RowBox[{
                RowBox[{"mate", "[", 
                 RowBox[{"stem", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", "-", "1"}], "]"}], "]"}], "]"}], "=", 
                RowBox[{"stem", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "ns", ",", "2", ",", 
                RowBox[{"-", "1"}]}], "}"}]}], "]"}], ";"}], "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"Gadj1", ",", " ", "mate"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ExpandBlossomsAndChangeMatching", "[", 
        RowBox[{"Gadj1_", ",", "MV_", ",", "augPath_"}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "Gadj", ",", "mate", ",", "stem", ",", "blossomConnectData", ",", 
           "stemBase", ",", "place", ",", "blossom", ",", "blossomNeighbors", 
           ",", "b", ",", "v", ",", "c", ",", "pathToAdd", ",", " ", 
           "matchingFlag", ",", " ", "currVert", ",", "augmentingPath", ",", 
           "position", ",", "nextInBlossom", ",", "pB", ",", "pC", ",", " ", 
           "basePositions"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Gadj", "=", "Gadj1"}], ";", "\[IndentingNewLine]", 
          RowBox[{"mate", "=", "MV"}], ";", "\[IndentingNewLine]", 
          RowBox[{"augmentingPath", "=", "augPath"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"augmentingPath", "\[Equal]", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Gadj", "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "\[Equal]", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "augmentingPath", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"stem", ",", "blossomConnectData"}], "}"}], "=", 
           RowBox[{"Gadj", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"b", "=", 
           RowBox[{"blossomConnectData", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"OUTER", " ", "IF", " ", "START"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Aug", " ", "path", " ", "goes", " ", "through", " ", "blossom"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"augmentingPath", ",", " ", "b"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"OUTER", " ", "IF", " ", "CASE", " ", "1"}], " ", "*)"}],
             "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Restore", " ", "the", " ", "blossom"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"blossom", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"First", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "blossomConnectData"}], "}"}]}], "]"}]}], 
             ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"Do", "[", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "Get", " ", "position", " ", "in", " ", "blossom", " ", "of", 
                " ", "vertex"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"place", "=", 
                 RowBox[{
                  RowBox[{"Position", "[", 
                   RowBox[{"blossom", ",", 
                    RowBox[{"First", "[", "i", "]"}], ",", "1", ",", "1"}], 
                   "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "Connect", " ", "blossom", " ", "vertices", " ", "with", " ",
                   "each", " ", "other"}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Which", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"place", "\[Equal]", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Gadj", "[", 
                    RowBox[{"[", 
                    RowBox[{"First", "[", "i", "]"}], "]"}], "]"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"place", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"place", "\[Equal]", 
                   RowBox[{"Length", "[", "blossom", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Gadj", "[", 
                    RowBox[{"[", 
                    RowBox[{"First", "[", "i", "]"}], "]"}], "]"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"place", "-", "1"}], "]"}], "]"}]}], "}"}]}], ",",
                   "\[IndentingNewLine]", "True", ",", 
                  RowBox[{
                   RowBox[{"Gadj", "[", 
                    RowBox[{"[", 
                    RowBox[{"First", "[", "i", "]"}], "]"}], "]"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"place", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"place", "-", "1"}], "]"}], "]"}]}], "}"}]}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"Add", " ", "non"}], "-", 
                  RowBox[{
                  "blossom", " ", "vertices", " ", "to", " ", "blossom", " ", 
                   "adj", " ", "positions"}]}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Gadj", "[", 
                  RowBox[{"[", 
                   RowBox[{"First", "[", "i", "]"}], "]"}], "]"}], "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"Gadj", "[", 
                    RowBox[{"[", 
                    RowBox[{"First", "[", "i", "]"}], "]"}], "]"}], ",", 
                   RowBox[{"Last", "[", "i", "]"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{
                  "Add", " ", "blossom", " ", "vertices", " ", "to", " ", 
                   "non"}], "-", 
                  RowBox[{"blossom", " ", "adj", " ", "positions"}]}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Last", "[", "i", "]"}], "\[NotEqual]", 
                   RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Do", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", 
                    RowBox[{"First", "[", "i", "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"basePositions", "=", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "b", ",", "1", ",", 
                    "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "=", 
                    RowBox[{"Delete", "[", 
                    RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "basePositions"}], 
                    "]"}]}]}], " ", ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Last", "[", "i", "]"}]}], "}"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "blossomConnectData"}], "}"}]}], "]"}], ";",
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"Restore", " ", "matching", " ", "of", " ", "blossom"}],
               " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"Do", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"mate", "[", 
                    RowBox[{"[", 
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
                   RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "1"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"mate", "[", 
                    RowBox[{"[", 
                    RowBox[{"blossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], "]"}], "=", 
                   RowBox[{"blossom", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], "\[IndentingNewLine]",
                  ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "2", ",", 
                   RowBox[{"Length", "[", "blossom", "]"}], ",", "2"}], 
                  "}"}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "If", " ", "structure", " ", "below", " ", "can", " ", 
                "perhaps", " ", "be", " ", "simplified", " ", "further", " ", 
                "by", " ", "just", " ", "checking", " ", "where", " ", 
                "matching", " ", "enters", " ", "blossom"}], ",", " ", 
               RowBox[{"if", " ", "it", " ", "does"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"INNER", " ", "IF", " ", "START"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "Aug", " ", "path", " ", "ends", " ", "at", " ", "blossom"}], 
              " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"augmentingPath", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "b"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"INNER", " ", "IF", " ", "CASE", " ", "1"}], " ", 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "From", " ", "part", " ", "right", " ", "before", " ", 
                  "blossom"}], ",", " ", 
                 RowBox[{
                 "get", " ", "where", " ", "it", " ", "connects", " ", "to", 
                  " ", "blossom"}]}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"c", "=", 
                 RowBox[{"augmentingPath", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], ";"}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Need", " ", "to", " ", "insert", " ", "blossom", " ", "path",
                  " ", "after", " ", "vertex", " ", "connected", " ", "to", 
                 " ", "blossom"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Aug", " ", "path", " ", "goes", " ", "through", " ", 
                 "blossom"}], " ", "*)"}], "\[IndentingNewLine]", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"INNER", " ", "IF", " ", "CASE", " ", "2"}], " ", 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mate", "[", 
                   RowBox[{"[", "b", "]"}], "]"}], "=", 
                  RowBox[{"stem", "[", 
                   RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ";"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"position", "=", 
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{"Position", "[", 
                    RowBox[{"augmentingPath", ",", "b"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"augmentingPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"position", "+", "1"}], "]"}], "]"}], "\[Equal]", 
                   RowBox[{"stem", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"c", "=", 
                   RowBox[{"augmentingPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"position", "-", "1"}], "]"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"c", "=", 
                   RowBox[{"augmentingPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"position", "+", "1"}], "]"}], "]"}]}]}], 
                 "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"INNER", " ", "IF", " ", "END"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "What", " ", "if", " ", "c", " ", "connected", " ", "to", " ", 
               "multiple", " ", "parts", " ", "of", " ", "blossom", 
               RowBox[{"??", 
                RowBox[{"?", 
                 RowBox[{",", "\[IndentingNewLine]", 
                  RowBox[{
                  "Right", " ", "now", " ", "I", " ", "just", " ", "pick", 
                   " ", "one"}]}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"v", "=", 
              RowBox[{
               RowBox[{"Select", "[", 
                RowBox[{"blossom", ",", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "c", "]"}], "]"}], ",", "#"}], "]"}], 
                  "&"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"pathToAdd", "=", 
              RowBox[{"{", "v", "}"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"matchingFlag", "=", "True"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"currVert", "=", "v"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "Follow", " ", "blossom", " ", "to", " ", "b", " ", 
               "alternating", " ", "the", " ", "matching"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{"currVert", "\[NotEqual]", "b"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{"matchingFlag", ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"pathToAdd", ",", 
                    RowBox[{"mate", "[", 
                    RowBox[{"[", "currVert", "]"}], "]"}]}], "]"}], ";", " ", 
                   RowBox[{"matchingFlag", "=", "False"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", "Else", " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"nextInBlossom", "=", 
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"blossom", ",", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Gadj", "[", 
                    RowBox[{"[", "currVert", "]"}], "]"}], ",", "pathToAdd"}],
                     "]"}], ",", "#"}], "]"}], "&"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"pathToAdd", ",", "nextInBlossom"}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"matchingFlag", "=", "True"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"currVert", "=", 
                 RowBox[{"pathToAdd", "[", 
                  RowBox[{"[", 
                   RowBox[{"-", "1"}], "]"}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"pathToAdd", "=", 
              RowBox[{"Most", "[", "pathToAdd", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "Reverse", " ", "path", " ", "if", " ", "b", " ", "before", " ",
                "c", " ", "in", " ", "augPath"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"Definitely", " ", "redundant"}], ",", " ", 
               RowBox[{
               "recheck", " ", "this", " ", "to", " ", "be", " ", "sure"}]}], 
              " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"pB", "=", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Position", "[", 
                 RowBox[{"augmentingPath", ",", "b"}], "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"pC", "=", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Position", "[", 
                 RowBox[{"augmentingPath", ",", "c"}], "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"pB", "<", "pC"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"pathToAdd", "=", 
                 RowBox[{"Reverse", "[", "pathToAdd", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"augmentingPath", "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"augmentingPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "pB"}], "]"}], "]"}], ",", "pathToAdd",
                    ",", 
                   RowBox[{"augmentingPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"pC", ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"augmentingPath", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"augmentingPath", "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ";;", "pC"}], "]"}], "]"}], ",", "pathToAdd",
                   ",", 
                  RowBox[{"augmentingPath", "[", 
                   RowBox[{"[", 
                    RowBox[{"pB", ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "augmentingPath", "]"}]}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"OUTER", " ", "IF", " ", "CASE", " ", "2"}], " ", "*)"}],
             "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Aug", " ", "path", " ", 
               RowBox[{"doesn", "'"}], "t", " ", "go", " ", "through", " ", 
               "blossom"}], ",", " ", 
              RowBox[{"just", " ", "return", " ", "aug", " ", "path"}]}], " ",
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "augmentingPath", "]"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"OUTER", " ", "IF", " ", "END"}], " ", "*)"}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "This", " ", "function", " ", "takes", " ", "a", " ", "graph", " ", 
         "object"}], ",", " ", 
        RowBox[{
        "a", " ", "matching", " ", "as", " ", "an", " ", "edge", " ", "list", 
         " ", "and", " ", "forms", " ", "an", " ", "adjacency", " ", "list", 
         " ", "and", " ", "a", " ", "mate", " ", "list"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AugmentingPath", "[", 
        RowBox[{"G_", ",", "mateList_"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"result", "=", 
           RowBox[{"AugmentingPathRecursive", "[", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"ToAdjacencyListsSW", "[", "G", "]"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", "mateList"}], "]"}]}], ";", 
          "result"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{
        RowBox[{"AugmentingPathRecursive", "[", 
         RowBox[{"GadjAug_", ",", " ", "mate_"}], "]"}], " ", ":=", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "shrunken", ",", " ", "augOrBlossom", ",", " ", "Hadj", ",", "MM", 
            ",", 
            RowBox[{"n", "=", 
             RowBox[{"Length", "[", "GadjAug", "]"}]}], ",", "newPath", ",", 
            "newMate", ",", "trQ", ",", "maxrec"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"maxrec", "=", "\[Infinity]"}], ";", 
           RowBox[{"trQ", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"augOrBlossom", "=", 
            RowBox[{"FindAugOrBlossom", "[", 
             RowBox[{"GadjAug", ",", " ", "mate"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"count", "++"}], ";", 
           RowBox[{"mPrint", "[", "count", "]"}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"count", ">", "maxrec"}], ",", 
             RowBox[{"Return", "[", "\"\<Exceeded MaxRecursion\>\"", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"trQ", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<Found ``,  ``; entering recursive call number ``\>\"", 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"augOrBlossom", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"augOrBlossom", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", " ", "count"}], "]"}],
                 "]"}]}], "]"}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"trQ", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"listOfGraphs", ",", "GadjAug"}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"listOfMatchings", ",", " ", "mate"}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"listOfEvents", ",", " ", 
                RowBox[{"augOrBlossom", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"listOfExtraBlossoms", ",", 
                RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"augOrBlossom", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "===", 
                 "\"\<AugmentingPath\>\""}], ",", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"listOfBlosAndAPs", ",", 
                  RowBox[{"Partition", "[", 
                   RowBox[{
                    RowBox[{"augOrBlossom", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "2", ",", "1"}], 
                   "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"listOfBlosAndAPs", ",", 
                   RowBox[{"augOrBlossom", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ";"}]}], 
               "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Which", "[", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "This", " ", "is", " ", "the", " ", "base", " ", "case"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"augOrBlossom", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "===", 
              "\"\<AugmentingPath\>\""}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{"trQ", ",", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"blossomBases", ",", "0"}], "]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newPath", "=", 
               RowBox[{"ExpandBlossomsAndChangeMatching", "[", 
                RowBox[{"GadjAug", ",", "mate", ",", 
                 RowBox[{"augOrBlossom", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"augOrBlossom", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<Stuck\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"newPath", "=", 
               RowBox[{"{", "}"}]}], ";", 
              RowBox[{"If", "[", 
               RowBox[{"trQ", ",", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"blossomBases", ",", "0"}], "]"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"augOrBlossom", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<Blossom\>\""}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{"trQ", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"blossomBases", ",", 
                   RowBox[{"augOrBlossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2", ",", "1"}], "]"}], "]"}]}], "]"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"shrunken", "=", 
               RowBox[{"ShrinkFlower", "[", 
                RowBox[{"GadjAug", ",", " ", "mate", ",", " ", 
                 RowBox[{"augOrBlossom", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newPath", "=", 
               RowBox[{"AugmentingPathRecursive", "[", 
                RowBox[{
                 RowBox[{"shrunken", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"shrunken", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newPath", "=", 
               RowBox[{"ExpandBlossomsAndChangeMatching", "[", 
                RowBox[{
                 RowBox[{"shrunken", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"shrunken", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "newPath"}], "]"}]}], 
              ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"trQ", ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"newPath", "\[NotEqual]", 
                   RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"listOfGraphs", ",", "GadjAug"}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "listOfEvents", ",", " ", "\"\<AugmentingPath\>\""}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"listOfBlosAndAPs", ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{"newPath", ",", "2", ",", "1"}], "]"}]}], "]"}], 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"blossomBases", ",", 
                    RowBox[{"augOrBlossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2", ",", "1"}], "]"}], "]"}]}], "]"}], 
                   ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"listOfExtraBlossoms", ",", 
                    RowBox[{"augOrBlossom", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}]}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"listOfMatchings", ",", " ", "mate"}], "]"}]}]}], 
                 "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           "newPath"}]}], "]"}]}],
       FontColor->GrayLevel[0]], 
      StyleBox[";",
       FontColor->GrayLevel[0]], "\[IndentingNewLine]", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"Primary", " ", "Function"}], " ", "*)"}],
       FontColor->GrayLevel[0]], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MaximumMatchingMK", "[", "G_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"graph", ",", 
           RowBox[{"matching", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"{", 
               RowBox[{"V", "[", "G", "]"}], "}"}]}], "]"}]}], ",", 
           RowBox[{"augPath", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"oldMatching", "=", 
            RowBox[{"{", "}"}]}], ",", "matchingList", ",", "trQ", ",", 
           "maxrec", ",", "numAugPaths"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"graph", "=", "G"}], ";", "\[IndentingNewLine]", 
          RowBox[{"count", "=", "0"}], ";", 
          RowBox[{"maxrec", "=", "\[Infinity]"}], ";", 
          RowBox[{"trQ", "=", "True"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"$RecursionLimit", "=", "\[Infinity]"}], ";"}], "  ", 
           "*)"}], " ", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Use", " ", "this", " ", "for", " ", "visualization"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"trQ", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Clear", "[", 
               RowBox[{
               "listOfGraphs", ",", "listOfMatchings", ",", "listOfEvents", 
                ",", "listOfBlosAndAPs", ",", "blossomBases", ",", 
                "numAugPaths", ",", "listOfExtraBlossoms"}], "]"}], ";"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"listOfGraphs", "=", 
              RowBox[{"listOfMatchings", "=", 
               RowBox[{"listOfEvents", "=", 
                RowBox[{"listOfBlosAndAPs", "=", 
                 RowBox[{"listOfExtraBlossoms", "=", 
                  RowBox[{"blossomBases", "=", 
                   RowBox[{"{", "}"}]}]}]}]}]}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"numAugPaths", "=", "0"}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
             "Comment", " ", "the", " ", "lines", " ", "from", " ", 
              "matchingList"}], "=", 
             RowBox[{"MaximalMatchingSW", "[", "graph", "]"}]}], ";", " ", 
            RowBox[{"to", " ", 
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"matching", "[", 
                 RowBox[{"[", "e", "]"}], "]"}], "=", 
                RowBox[{"Reverse", "[", "e", "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"e", ",", "matchingList"}], "}"}]}], "]"}]}], ";", 
            " ", 
            RowBox[{
            "below", " ", "to", " ", "remove", " ", "the", " ", "initial", 
             " ", "maximal", " ", "matching"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"matchingList", "=", 
           RowBox[{"MaximalMatchingSW", "[", "graph", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"2", " ", 
               RowBox[{"Length", "[", "matchingList", "]"}]}], "+", "1"}], 
             " ", ">=", " ", 
             RowBox[{"V", "[", "G", "]"}]}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"trQ", ",", 
               RowBox[{"mPrint", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<Total number of recursion calls: ``\>\"", ",", 
                  "count"}], "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "matchingList", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mPrint", "[", 
           RowBox[{"Length", "[", "matchingList", "]"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"matching", "[", 
              RowBox[{"[", "e", "]"}], "]"}], "=", 
             RowBox[{"Reverse", "[", "e", "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"e", ",", "matchingList"}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mPrint", "[", "\"\<startingAugmentation\>\"", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"augPath", "=", 
           RowBox[{"AugmentingPath", "[", 
            RowBox[{"graph", ",", "matching"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mPrint", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<first augmentation done\>\"", ",", " ", 
             RowBox[{
              RowBox[{"1", "/", "2"}], " ", 
              RowBox[{"Count", "[", 
               RowBox[{"matching", ",", 
                RowBox[{"x_", "/;", " ", 
                 RowBox[{"x", ">", "0"}]}]}], "]"}]}]}], "}"}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"augPath", "\[Equal]", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[NotEqual]", "0"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"oldMatching", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"matching", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"oldMatching", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"matching", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                   ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "matching"}], "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"trQ", ",", 
               RowBox[{"mPrint", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<Total number of recursion calls: ``\>\"", ",", 
                  "count"}], "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "oldMatching", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"matching", "[", 
                   RowBox[{"[", 
                    RowBox[{"augPath", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
                  RowBox[{"augPath", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"matching", "[", 
                   RowBox[{"[", 
                    RowBox[{"augPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "]"}], "]"}], "=", 
                  RowBox[{"augPath", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}]}]}], "]"}], " ", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "augPath", "]"}]}], "}"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{"True", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"mPrint", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<startingAugmentation\>\"", ",", " ", "matching"}],
                "}"}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"augPath", "=", 
              RowBox[{"AugmentingPath", "[", 
               RowBox[{"graph", ",", "matching"}], "]"}]}], ";", "\n", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"If", " ", "we", " ", "get", " ", "stuck"}], ",", " ", 
               "end"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"augPath", "\[Equal]", 
                RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"Break", "[", "]"}]}], "\[IndentingNewLine]", "]"}], 
             ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"Change", " ", "matching"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"matching", "[", 
                    RowBox[{"[", 
                    RowBox[{"augPath", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
                   RowBox[{"augPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"matching", "[", 
                    RowBox[{"[", 
                    RowBox[{"augPath", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "]"}], "]"}], "=", 
                   RowBox[{"augPath", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}]}], "]"}], " ", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "augPath", "]"}]}], "}"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Check", " ", "if", " ", "matching", " ", "is", " ", "maximum"}], 
            ",", " ", 
            RowBox[{"if", " ", "it", " ", "is"}], ",", " ", 
            RowBox[{"return", " ", "it"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{"matching", ",", " ", 
                RowBox[{"r_", "/;", " ", 
                 RowBox[{"r", ">", "0"}]}]}], "]"}], "+", "1"}], " ", ">=", 
             " ", 
             RowBox[{"V", "[", "G", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"trQ", ",", 
               RowBox[{"mPrint", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<Total number of recursion calls: ``\>\"", ",", 
                  "count"}], "]"}], "]"}]}], "]"}], ";", 
             RowBox[{"Return", "[", 
              RowBox[{"DeleteDuplicates", "[", 
               RowBox[{"Sort", "/@", " ", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"matching", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"V", "[", "G", "]"}]}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"_", ",", " ", "0"}], "}"}]}], "]"}]}], "]"}], 
              "]"}]}]}], "]"}], ";", "\n", 
          RowBox[{"mPrint", "[", 
           RowBox[{"{", 
            RowBox[{
            "\"\<augmentation done\>\"", ",", "augPath", ",", " ", "matching",
              ",", " ", 
             RowBox[{
              RowBox[{"1", "/", "2"}], " ", 
              RowBox[{"Count", "[", 
               RowBox[{"matching", ",", 
                RowBox[{"x_", "/;", " ", 
                 RowBox[{"x", ">", "0"}]}]}], "]"}]}]}], "}"}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"i", "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"oldMatching", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"matching", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "}"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"oldMatching", ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"matching", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
                ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "matching"}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"trQ", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Total number of recursion calls: ``\>\"", ",", "count"}], 
              "]"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"$RecursionLimit", "=", "256"}], ";", "\[IndentingNewLine]",
           "oldMatching"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"BlossomPlotData", "[", "G_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "aGraph", ",", "graphToShow", ",", "matching", ",", "event", ",", 
           "listOfInterest", ",", "color", ",", "blosOrAP", ",", "im", ",", 
           "locs", ",", "blosBase", ",", "gAdjTotal", ",", "extraBlossom", 
           ",", "verts"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MaximumMatchingMK", "[", "G", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"count", "==", "0"}], ",", 
            RowBox[{
            "Return", "[", "\"\<Cannot show graph, no recursive calls\>\"", 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"im", "=", 
             RowBox[{"GraphPlot", "[", 
              RowBox[{"G", ",", " ", 
               RowBox[{"Method", "\[Rule]", "\"\<SpringEmbedding\>\""}], ",", 
               " ", 
               RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"locs", "=", 
             RowBox[{"VertexCoordinateRules", "/.", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"InputForm", "[", " ", "im", "]"}], ",", " ", 
                RowBox[{"HoldPattern", "[", 
                 RowBox[{"VertexCoordinateRules", "\[Rule]", " ", "_"}], 
                 "]"}], ",", "\[Infinity]"}], "]"}]}]}], ";"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"locs", "=", 
           RowBox[{"First", "/@", " ", 
            RowBox[{"G", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"im", "=", 
             RowBox[{"GraphPlot", "[", 
              RowBox[{
               RowBox[{"GraphToEdgeRules", "@", "G"}], ",", " ", 
               RowBox[{"VertexCoordinateRules", "\[Rule]", "locs"}], ",", " ", 
               RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}]}], 
            ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"listOfGraphs", ",", 
            RowBox[{"listOfGraphs", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"listOfMatchings", ",", 
            RowBox[{"listOfMatchings", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"listOfEvents", ",", "\"\<Start\>\""}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"listOfBlosAndAPs", ",", 
            RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"blossomBases", ",", "0"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"listOfExtraBlossoms", ",", 
            RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "listOfGraphs", ",", " ", "listOfMatchings", ",", " ", 
            "listOfEvents", ",", " ", "listOfBlosAndAPs", ",", " ", 
            "blossomBases", ",", " ", "listOfExtraBlossoms", ",", 
            RowBox[{"verts", " ", "=", " ", 
             RowBox[{"First", "/@", " ", 
              RowBox[{"G", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Min", "[", 
                 RowBox[{"First", "/@", " ", "verts"}], "]"}], ",", 
                RowBox[{"Max", "[", 
                 RowBox[{"First", "/@", " ", "verts"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Min", "[", 
                 RowBox[{"Last", "/@", " ", "verts"}], "]"}], ",", 
                RowBox[{"Max", "[", 
                 RowBox[{"Last", "/@", " ", "verts"}], "]"}]}], "}"}]}], 
             "}"}]}], "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
     ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, 3.503666678210417*^9, 3.503668026867079*^9, 
   3.50374759002098*^9, {3.5037835843290787`*^9, 3.503783608703787*^9}, {
   3.503783660846946*^9, 3.503783661545755*^9}, {3.5038456198749905`*^9, 
   3.5038456495809603`*^9}, {3.503845761269128*^9, 3.5038458646964703`*^9}, {
   3.5038461556115584`*^9, 3.5038461656865664`*^9}, {3.503846199442941*^9, 
   3.5038462868396797`*^9}, {3.503846366863682*^9, 3.5038464683538294`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blossomBases$$ = {0, 9, 11, 15, 9, 0, 9, 15,
     11, 9, 0}, $CellContext`count$$ = 6, $CellContext`exampleInd$$ = 
    1, $CellContext`g$$ = 
    1, $CellContext`listOfBlosAndAPs$$ = {{}, {{}, {9, 7, 6, 3, 4, 5, 8}}, {{
      9, 10}, {11, 12, 13}}, {{9, 14}, {15, 18, 19, 21, 20}}, {{}, {9, 10, 11,
       16, 17, 24, 25, 27, 26, 15, 14}}, {{9, 28}}, {{9, 14}, {14, 15}, {15, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 11}, {11, 
     10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 
     18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 
     11}, {11, 10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 
     19}, {19, 18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 
     16}, {16, 13}, {13, 12}, {12, 11}, {11, 10}, {10, 28}}, {{9, 7}, {7, 
     6}, {6, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 18}, {18, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 13}, {13, 
     12}, {12, 11}, {11, 10}, {10, 28}}, {}}, $CellContext`listOfEvents$$ = {
    "Start", "Blossom", "Blossom", "Blossom", "Blossom", "AugmentingPath", 
     "AugmentingPath", "AugmentingPath", "AugmentingPath", "AugmentingPath", 
     "Stuck"}, $CellContext`listOfExtraBlossoms$$ = {{}, {}, {}, {}, {}, {}, {
     9, 10, 11, 16, 17, 24, 25, 27, 26, 15, 14}, {15, 18, 19, 21, 20}, {11, 
     12, 13}, {9, 7, 6, 3, 4, 5, 
     8}, {}}, $CellContext`listOfGraphs$$ = {{{2}, {1, 3}, {2, 4, 6}, {3, 
      5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 
      12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 
      22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 
      26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 
      3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {
      5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 
      20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 
      20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 
      17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 
      23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {
      15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 
      25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 22, 23, 
      28}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {9, 23}, {9, 
      22}, {}, {}, {}, {}, {
      9}, {{}, {{9, {2}}, {10, {28}}, {11, {}}, {16, {}}, {17, {22}}, {
        24, {}}, {25, {}}, {27, {}}, {26, {23}}, {15, {}}, {14, {}}}}}, {{
      2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {15, 19, 
      26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 
      27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {
      6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 
      16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 
      21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 
      23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 
      10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}}, $CellContext`listOfMatchings$$ = CompressedData["
1:eJxTTMoPSmJiYGDgBmIZIGZiZGHmYGdjZeDm4uXh5xMUEBYSFREXk5SQlhqV
4+NkZZfh4RZgE+GVkBLlFxYXE5QWkuQCAJ04EdA=
    "], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`exampleInd$$], 1, "example"}, {1, 2}}, {{
       Hold[$CellContext`g$$], 1, "algorithm step"}, 
      Dynamic[
       Range[
        $CellContext`hh[$CellContext`exampleInd$$]]]}, {{
       Hold[$CellContext`count$$], 0}}, {{
       Hold[$CellContext`listOfGraphs$$], {}}}, {{
       Hold[$CellContext`listOfMatchings$$], {}}}, {{
       Hold[$CellContext`listOfEvents$$], {}}}, {{
       Hold[$CellContext`listOfExtraBlossoms$$], {}}}, {{
       Hold[$CellContext`listOfBlosAndAPs$$], {}}}, {{
       Hold[$CellContext`blossomBases$$], {}}}}, Typeset`size$$ = {
    400., {205.84375, 211.15625}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`exampleInd$2913$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`blossomBases$$ = {}, $CellContext`count$$ = 
        0, $CellContext`exampleInd$$ = 1, $CellContext`g$$ = 
        1, $CellContext`listOfBlosAndAPs$$ = {}, $CellContext`listOfEvents$$ = \
{}, $CellContext`listOfExtraBlossoms$$ = {}, $CellContext`listOfGraphs$$ = \
{}, $CellContext`listOfMatchings$$ = {}}, "ControllerVariables" :> {
        Hold[$CellContext`exampleInd$$, $CellContext`exampleInd$2913$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`gra$, $CellContext`aGraph$, $CellContext`event$, \
$CellContext`blosBase$, $CellContext`locs$, $CellContext`matching$, \
$CellContext`blosOrAP$, $CellContext`extraBlossom$, \
$CellContext`graphToShow$, $CellContext`listOfInterest$, $CellContext`color$, \
$CellContext`isols$, $CellContext`data$}, $CellContext`g$$ = 
         Min[$CellContext`g$$, 
           $CellContext`hh[$CellContext`exampleInd$$]]; $CellContext`gra$ = \
$CellContext`gr[$CellContext`exampleInd$$]; $CellContext`locs$ = Map[First, 
           
           Part[$CellContext`gra$, 
            2]]; $CellContext`data$ = \
$CellContext`BlossomPlotData[$CellContext`gra$]; $CellContext`aGraph$ = 
         Part[$CellContext`data$, 
           1, $CellContext`g$$]; $CellContext`matching$ = 
         Part[$CellContext`data$, 2, $CellContext`g$$]; $CellContext`event$ = 
         Part[$CellContext`data$, 
           3, $CellContext`g$$]; $CellContext`blosOrAP$ = 
         Part[$CellContext`data$, 
           4, $CellContext`g$$]; $CellContext`blosBase$ = 
         Part[$CellContext`data$, 
           5, $CellContext`g$$]; $CellContext`extraBlossom$ = 
         Part[$CellContext`data$, 
           6, $CellContext`g$$]; $CellContext`graphToShow$ = \
$CellContext`FromAdjacencyListsSW[
           Part[$CellContext`aGraph$, 
            Span[
            1, -2]]]; {$CellContext`listOfInterest$, $CellContext`color$} = 
         Which[$CellContext`event$ == "Blossom", {
            Part[$CellContext`blosOrAP$, 2], 
            Lighter[
             Lighter[Blue]]}, $CellContext`event$ == 
           "AugmentingPath", {$CellContext`blosOrAP$, 
            Yellow}, $CellContext`event$ == "Stuck", {{}, Yellow}, 
           True, {{}, {}}]; $CellContext`isols$ = Flatten[
           Position[
            Take[$CellContext`aGraph$, 
             $CellContext`V[$CellContext`gra$]], {}]]; Column[{
           Which[$CellContext`event$ === "Stuck", 
            Style[
             StringForm[
             "Matching augmented by one edge; maximum matching has `` edges.",
               Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Blossom", 
            Style[
             StringForm[
             "Blossom found; shrink it and look for augmenting path.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], 
            
            And[$CellContext`event$ === "AugmentingPath", $CellContext`g$$ < 
             Length[$CellContext`listOfGraphs$$] - 1], 
            Style[
             StringForm[
             "Augmenting path found; expand it through the blossom.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "AugmentingPath", 
            Style[
             StringForm[
             "Augmenting path found in original graph; augment the \
matching.", $CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Start", 
            Style[
             StringForm[
             "A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.", 
              $CellContext`V[$CellContext`gra$], Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"]], 
           Show[
            Graphics[{{
               If[$CellContext`event$ === "Blossom", {
                 EdgeForm[{
                   Thickness[0.01], 
                   Darker[Blue]}], 
                 FaceForm[
                  Lighter[
                   Lighter[Blue]]], 
                 Polygon[
                  
                  Part[$CellContext`locs$, $CellContext`listOfInterest$]]}, \
{}]}, 
              If[$CellContext`event$ === "AugmentingPath", {
                EdgeForm[{
                  Thickness[0.01], 
                  Darker[Blue]}], 
                FaceForm[
                 Lighter[Blue]], 
                Polygon[
                 
                 Part[$CellContext`locs$, $CellContext`extraBlossom$]]}, \
{}]}], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[
                And[$CellContext`event$ === "AugmentingPath", 
                 Or[
                  MemberQ[$CellContext`listOfInterest$, #2], 
                  MemberQ[$CellContext`listOfInterest$, 
                   Reverse[#2]]]], {
                 Lighter[Green], 
                 Thickness[0.02], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {
                 GrayLevel[0.7], 
                 Thickness[0.004], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             Join[
              $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
              Thread[$CellContext`isols$ -> $CellContext`isols$]], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {}, 
                If[$CellContext`event$ === "Stuck", {Blue, 
                  Thickness[0.013], 
                  Line[#]}, {Red, 
                  Thickness[0.01], 
                  Line[#]}]]}& ), SelfLoopStyle -> None, 
             VertexRenderingFunction -> (Which[
               And[#2 == $CellContext`blosBase$, 
                
                Or[$CellContext`event$ === "Blossom", $CellContext`event$ === 
                 "AugmentingPath"]], {
                EdgeForm[{Black, 
                  Thickness[0.002]}], 
                FaceForm[Yellow], 
                
                Disk[#, 
                 0.022 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], 
                Text[
                 Style["B", Bold], #]}, 
               MemberQ[$CellContext`listOfInterest$, #2], {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[$CellContext`color$; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}, True, {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[Yellow; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}]& )], PlotLabel -> None, 
            PlotRange -> Part[$CellContext`data$, -1], Frame -> Not[True], 
            PlotRangePadding -> 0.15, FrameTicks -> True, 
            ImageSize -> {400, 400}]}]], 
      "Specifications" :> {{{$CellContext`exampleInd$$, 1, "example"}, {1, 
         2}}, {{$CellContext`g$$, 1, "algorithm step"}, 
         Dynamic[
          Range[
           $CellContext`hh[$CellContext`exampleInd$$]]], ControlType -> 
         SetterBar}, {{$CellContext`count$$, 0}, ControlType -> 
         None}, {{$CellContext`listOfGraphs$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfMatchings$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfEvents$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfExtraBlossoms$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfBlosAndAPs$$, {}}, ControlType -> 
         None}, {{$CellContext`blossomBases$$, {}}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`exampleInd$$, $CellContext`g$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{443., {262.34375, 267.65625}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`hh[1] = 11; $CellContext`hh[2] = 
       7; $CellContext`gr[
        1] = $CellContext`graph[{{{1, 2}}, {{2, 3}}, {{3, 4}}, {{3, 6}}, {{4, 
         5}}, {{5, 8}}, {{5, 10}}, {{6, 7}}, {{6, 14}}, {{7, 9}}, {{8, 9}}, {{
         10, 11}}, {{10, 28}}, {{11, 12}}, {{11, 13}}, {{12, 13}}, {{13, 
         16}}, {{14, 15}}, {{15, 18}}, {{15, 20}}, {{16, 17}}, {{17, 22}}, {{
         17, 24}}, {{18, 19}}, {{18, 26}}, {{19, 21}}, {{20, 21}}, {{22, 
         23}}, {{23, 26}}, {{24, 25}}, {{25, 27}}, {{26, 
         27}}}, CompressedData["
1:eJxTTMoPSmVmYGCQAWJGIGYCYtO4XZ48TUIO05y7c57/ZneoFlnn/vCXgMO8
98uPeZvzO6z6eMk3SYDbweNhFVCG30H59s+6rD1MDmkg8EzAYYdc6+vAHd/s
w/h0N83NF3aoz9pTMnmGoAMDGIg48DBpt4vd5HdYIxOVYh0v7sACVsjgUDpZ
AsiUgPI5HD6BrImQcnj+eyXQxnf2Mf2HvmrE8DiAnMekfd/++uICW67rLFBz
GRjswQ7/Zw9xzwv7uypsjVOdf9pLgg0Uhbh7goBDp2PC0wtKEg6FQN2LC7gc
QK459/2n/TcNkA0f4OYCXQ100Ad7oO+BHhV3COidnifUzOhgfd8fyJJ2AFtT
8t8eEj7SDi/VDDnWyPA4gHwvxyrnAHZuP6vDwVMLXbd95nRwAll7+6/9Ain9
uyptAg6HQdKH/tsvAsr+vcLhAHZG8GH7qxVAkzoE4P5aNvuIwoYiEQdjMPhp
PwfEfSHsAHbOgUf2HOCAPG8/8W2Nvek9AQcAR+a50g==
         "]]; $CellContext`gr[
        2] = $CellContext`graph[{{{1, 3}}, {{1, 9}}, {{1, 22}}, {{1, 26}}, {{
         1, 30}}, {{1, 31}}, {{2, 8}}, {{2, 26}}, {{2, 27}}, {{2, 32}}, {{2, 
         36}}, {{3, 11}}, {{3, 31}}, {{3, 37}}, {{4, 16}}, {{4, 17}}, {{4, 
         24}}, {{4, 33}}, {{5, 11}}, {{5, 15}}, {{5, 16}}, {{5, 18}}, {{5, 
         34}}, {{5, 37}}, {{6, 7}}, {{6, 13}}, {{6, 19}}, {{6, 28}}, {{6, 
         29}}, {{6, 36}}, {{7, 10}}, {{7, 13}}, {{7, 21}}, {{7, 28}}, {{8, 
         23}}, {{8, 32}}, {{9, 12}}, {{9, 13}}, {{9, 20}}, {{9, 22}}, {{9, 
         30}}, {{10, 13}}, {{10, 21}}, {{10, 22}}, {{10, 26}}, {{11, 16}}, {{
         11, 37}}, {{12, 15}}, {{12, 18}}, {{12, 20}}, {{12, 30}}, {{12, 
         31}}, {{13, 19}}, {{13, 20}}, {{13, 22}}, {{14, 17}}, {{14, 19}}, {{
         14, 25}}, {{14, 33}}, {{14, 35}}, {{15, 18}}, {{15, 31}}, {{15, 
         37}}, {{16, 17}}, {{16, 24}}, {{16, 25}}, {{16, 34}}, {{17, 25}}, {{
         17, 33}}, {{18, 19}}, {{18, 20}}, {{18, 34}}, {{19, 20}}, {{19, 
         25}}, {{19, 29}}, {{19, 34}}, {{19, 35}}, {{21, 26}}, {{21, 27}}, {{
         21, 28}}, {{22, 26}}, {{23, 24}}, {{23, 29}}, {{23, 32}}, {{23, 
         35}}, {{24, 33}}, {{24, 35}}, {{25, 34}}, {{26, 27}}, {{27, 28}}, {{
         27, 36}}, {{28, 36}}, {{29, 32}}, {{29, 35}}, {{29, 36}}, {{30, 
         31}}, {{31, 37}}, {{32, 36}}, {{33, 35}}}, CompressedData["
1:eJxTTMoPSmVmYGBQBWJGIGYCYqHmA6cWuh6zb30duEOu9b29yDr3h1Ui7/aL
3zz3PfjxVfuA3ul5Qs0v7H/VZe0pmfzE3gMou879pn3C0wtKt38+2w9Wvu6x
veWWE2X75q/aDxE/t39DUcbEtzX77d/V2JvG7bq4n+v64gJbruvo5u8/CLR9
2+e99mfPgMAD+zlHFIBaL+6XjUqxvu//0J4BDD5AaQaG+/4gB122B1sndd3e
GAw27z8NMubvFfvKl2qGHGvO2INcK8Fybz9Qkf5dlXv2kixhfLqbzqL7Zz/E
fTftQbb1Tn+0H6wt7BrUHRuh/tpl/yP48dLZRw7sVweaLhN1xL7QFuSjs/Yf
lh/zNu+8uR/iugf2F4G+Bxq9H6L+CdTdD/aDg3nb6/1o4b1/EdjZN+yBgQV0
yK39aOrtj4KcMfHhfrC1Kbeh+m7vP/xVI6b/0FX7TkdQiF/ev+rjJd8kgQv7
/6wEMS7YQ8Lpsb12uxgwpG/bL5sN8hDMfU/2fwIpjzgJ9e85+3nvQR55uh8i
f8ceEi9n91eDI6wFGk8Pof5/AHXnAftSkHa+p/ZePExAqy7aAwDlIDF5
         "]]; $CellContext`AdjacencyListsToEdges[
         Pattern[$CellContext`al, 
          Blank[]]] := Map[List, 
         Union[
          Map[Sort, 
           Flatten[
            ReplaceAll[
             MapIndexed[{
               Part[#2, 1], #}& , $CellContext`al], {
               Pattern[$CellContext`i, 
                Blank[Integer]], 
               Pattern[$CellContext`L, 
                Blank[List]]} :> 
             Table[{$CellContext`i, $CellContext`l}, {$CellContext`l, \
$CellContext`L}]], 1]]]]; $CellContext`FromAdjacencyListsSW[
         Pattern[$CellContext`al, 
          Blank[]]] := $CellContext`graph[
         $CellContext`AdjacencyListsToEdges[$CellContext`al], 
         Table[{{$CellContext`i, 0}}, {$CellContext`i, 
           Length[$CellContext`al]}]]; $CellContext`GraphToEdgeRules[
         Pattern[$CellContext`G, 
          Blank[]]] := ReplaceAll[
         Map[First, 
          Part[$CellContext`G, 1]], {
           Pattern[$CellContext`x, 
            Blank[Integer]], 
           Pattern[$CellContext`y, 
            
            Blank[]]} :> ($CellContext`x -> $CellContext`y)]; \
$CellContext`GraphToVertexRules[
         Pattern[$CellContext`G, 
          Blank[]]] := Module[{$CellContext`tt}, $CellContext`tt = Map[First, 
            Part[$CellContext`G, 2]]; Thread[Range[
             
             Length[$CellContext`tt]] -> $CellContext`tt]]; \
$CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Map[First, 
         Part[$CellContext`G, 1]]; $CellContext`V[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Length[
         Part[$CellContext`G, 2]]; $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`etemp, $CellContext`ee, $CellContext`missing}, \
$CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
              $CellContext`EdgesSW[$CellContext`G]], 
            Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
            Range[
             Length[
              Part[$CellContext`G, 2]]], 
            Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
            Join[$CellContext`etemp, 
             
             Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
           ReplaceAll[
            Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
              Blank[Integer], 
              Pattern[$CellContext`n, 
               
               Blank[]]} :> $CellContext`n], {{}} -> {}]]; \
$CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`seen, $CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g], $CellContext`st}, $CellContext`st = 
          1; $CellContext`match = 
          Part[$CellContext`ee, $CellContext`st]; $CellContext`seen[
            Blank[]] := False; $CellContext`seen[
            Part[$CellContext`match, 1]] = True; $CellContext`seen[
            Part[$CellContext`match, 2]] = True; Do[
           If[
            And[
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 1]]], 
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 2]]]], $CellContext`match = 
             Join[$CellContext`match, $CellContext`e]; $CellContext`seen[
               Part[$CellContext`e, 1]] = ($CellContext`seen[
                Part[$CellContext`e, 2]] = True)], {$CellContext`e, 
            Delete[$CellContext`ee, $CellContext`st]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]]; $CellContext`DoublePathToFlower[
         Pattern[$CellContext`doublePath, 
          Blank[]]] := 
       Module[{$CellContext`timesOccurred = 
          Tally[$CellContext`doublePath], $CellContext`twice, \
$CellContext`locations}, $CellContext`twice = 
          Select[$CellContext`timesOccurred, Part[#, 2] == 2& ]; 
         If[$CellContext`twice == {}, 
           Return[{{}, $CellContext`doublePath}]]; $CellContext`twice = 
          Part[$CellContext`twice, -1, 1]; $CellContext`locations = Flatten[
            Position[$CellContext`doublePath, $CellContext`twice]]; {
           Take[$CellContext`doublePath, Part[$CellContext`locations, 1] - 1], 
           Most[
            
            Take[$CellContext`doublePath, $CellContext`locations]]}]; \
$CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Blank[]] := 
       Condition[{"Stuck", {}}, Length[$CellContext`Gadj] <= 
         2]; $CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]]] := 
       Module[{$CellContext`parents, $CellContext`n, $CellContext`vertices, \
$CellContext`treeRoots, $CellContext`head, $CellContext`tail, $CellContext`Q, \
$CellContext`neighbors, $CellContext`novelNeighbors, $CellContext`vw = {}, \
$CellContext`evenQ, $CellContext`uncoveredNode = 
          0, $CellContext`v, $CellContext`doublePath}, $CellContext`n = 
          Length[$CellContext`Gadj] - 1; $CellContext`vertices = 
          Range[$CellContext`n]; $CellContext`parents = 
          Table[0, {$CellContext`n}]; $CellContext`treeRoots = 
          Select[$CellContext`vertices, Part[$CellContext`MV, #] == 
            0& ]; $CellContext`head = ($CellContext`tail = 0); While[If[
             
             And[$CellContext`head == $CellContext`tail, \
$CellContext`uncoveredNode == 
              0, $CellContext`vw == {}, $CellContext`treeRoots != {}], \
$CellContext`Q[$CellContext`tail] = (Part[$CellContext`parents, 
                 Part[$CellContext`treeRoots, 1]] = 
               Part[$CellContext`treeRoots, 1]); 
             Increment[$CellContext`tail]; $CellContext`evenQ[
                Part[$CellContext`treeRoots, 1]] = 
              True; $CellContext`treeRoots = Rest[$CellContext`treeRoots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`treeRoots != \
{}, $CellContext`vw == {}], $CellContext`v = \
$CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`neighbors = 
            Part[$CellContext`Gadj, $CellContext`v]; 
           If[$CellContext`evenQ[$CellContext`v] == True, 
             Do[
              Which[
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] == 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`uncoveredNode = $CellContext`w; Break[], 
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] != 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
               Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = False, 
               And[Part[$CellContext`parents, $CellContext`w] != 0, 
                $CellContext`evenQ[$CellContext`w]], $CellContext`vw = \
{$CellContext`v, $CellContext`w}; 
               Break[]], {$CellContext`w, $CellContext`neighbors}], 
             Do[If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] == 0], 
                Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
                Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = True; Break[]]; If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] != 0], 
                If[
                 Not[
                  $CellContext`evenQ[$CellContext`w]], $CellContext`vw = {
                    Part[$CellContext`MV, $CellContext`w], $CellContext`w}; 
                 Break[]]], {$CellContext`w, $CellContext`neighbors}]]]; 
         Which[$CellContext`uncoveredNode != 0, {"AugmentingPath", 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parents, #]& , \
$CellContext`uncoveredNode]]]}, $CellContext`vw != {}, {
           "Blossom", $CellContext`doublePath = Join[
               Reverse[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  Part[$CellContext`vw, 1]]]], 
               Most[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  
                  Part[$CellContext`vw, 
                   2]]]]]; \
$CellContext`DoublePathToFlower[$CellContext`doublePath]}, True, {
           "Stuck", {}}]]; $CellContext`ShrinkFlower[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], {
          Pattern[$CellContext`stem, 
           Blank[]], 
          Pattern[$CellContext`blossom, 
           Blank[]]}] := 
       Module[{$CellContext`Gadj1, $CellContext`mate, $CellContext`ns, \
$CellContext`stemBase, $CellContext`blossomNeighbors, \
$CellContext`blossomNeighborConnections}, $CellContext`Gadj1 = \
$CellContext`Gadj; $CellContext`mate = $CellContext`MV; $CellContext`stemBase = 
          Part[$CellContext`blossom, 1]; $CellContext`blossomNeighbors = 
          Complement[
            Apply[Union, 
             
             Part[$CellContext`Gadj1, $CellContext`blossom]], \
$CellContext`blossom]; Part[$CellContext`Gadj1, 
            Rest[$CellContext`blossom]] = {}; 
         Part[$CellContext`Gadj1, $CellContext`stemBase] = \
$CellContext`blossomNeighbors; Do[
           If[
            Not[
             MemberQ[
              
              Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], 
            PrependTo[
             
             Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], {$CellContext`bN, $CellContext`blossomNeighbors}]; \
$CellContext`Gadj1 = DeleteCases[$CellContext`Gadj1, 
            Apply[Alternatives, 
             Rest[$CellContext`blossom]], 
            Infinity]; $CellContext`blossomNeighborConnections = 
          Table[{$CellContext`b, 
             Complement[
              
              Part[$CellContext`Gadj, $CellContext`b], \
$CellContext`blossom]}, {$CellContext`b, $CellContext`blossom}]; 
         Part[$CellContext`Gadj1, -1] = {$CellContext`stem, \
$CellContext`blossomNeighborConnections}; $CellContext`ns = 
          Length[$CellContext`stem]; {$CellContext`Gadj1, $CellContext`mate}]; \
$CellContext`ExpandBlossomsAndChangeMatching[
         Pattern[$CellContext`Gadj1, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], 
         Pattern[$CellContext`augPath, 
          Blank[]]] := 
       Module[{$CellContext`Gadj, $CellContext`mate, $CellContext`stem, \
$CellContext`blossomConnectData, $CellContext`stemBase, $CellContext`place, \
$CellContext`blossom, $CellContext`blossomNeighbors, $CellContext`b, \
$CellContext`v, $CellContext`c, $CellContext`pathToAdd, \
$CellContext`matchingFlag, $CellContext`currVert, \
$CellContext`augmentingPath, $CellContext`position, \
$CellContext`nextInBlossom, $CellContext`pB, $CellContext`pC, \
$CellContext`basePositions}, $CellContext`Gadj = $CellContext`Gadj1; \
$CellContext`mate = $CellContext`MV; $CellContext`augmentingPath = \
$CellContext`augPath; If[$CellContext`augmentingPath == {}, 
           Return[{}]]; If[Part[$CellContext`Gadj, -1] == {}, 
           
           Return[$CellContext`augmentingPath]]; {$CellContext`stem, \
$CellContext`blossomConnectData} = 
          Part[$CellContext`Gadj, -1]; $CellContext`b = 
          Part[$CellContext`blossomConnectData, 1, 1]; If[
           
           MemberQ[$CellContext`augmentingPath, $CellContext`b], \
$CellContext`blossom = Table[
              
              First[$CellContext`i], {$CellContext`i, \
$CellContext`blossomConnectData}]; Do[$CellContext`place = Part[
                Position[$CellContext`blossom, 
                 First[$CellContext`i], 1, 1], 1, 1]; 
             Which[$CellContext`place == 1, Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, -1]}, $CellContext`place == 
               Length[$CellContext`blossom], Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}, True, 
               Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}]; 
             Part[$CellContext`Gadj, 
                First[$CellContext`i]] = Join[
                Part[$CellContext`Gadj, 
                 First[$CellContext`i]], 
                Last[$CellContext`i]]; If[Last[$CellContext`i] != {}, 
               Do[AppendTo[
                  Part[$CellContext`Gadj, $CellContext`j], 
                  First[$CellContext`i]]; $CellContext`basePositions = 
                 Position[
                   Part[$CellContext`Gadj, $CellContext`j], $CellContext`b, 1,
                    1]; Part[$CellContext`Gadj, $CellContext`j] = Delete[
                   
                   Part[$CellContext`Gadj, $CellContext`j], \
$CellContext`basePositions], {$CellContext`j, 
                 
                 Last[$CellContext`i]}]], {$CellContext`i, \
$CellContext`blossomConnectData}]; 
           If[Part[$CellContext`augmentingPath, 
               1] == $CellContext`b, $CellContext`c = 
              Part[$CellContext`augmentingPath, 2]; 
             Null, $CellContext`position = Part[
                Flatten[
                 Position[$CellContext`augmentingPath, $CellContext`b]], 1]; 
             If[Part[$CellContext`augmentingPath, $CellContext`position + 1] == 
               Part[$CellContext`stem, -1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position - 
                 1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position + 
                 1]]]; $CellContext`v = Part[
              Select[$CellContext`blossom, MemberQ[
                Part[$CellContext`Gadj, $CellContext`c], #]& ], 
              1]; $CellContext`pathToAdd = {$CellContext`v}; \
$CellContext`matchingFlag = True; $CellContext`currVert = $CellContext`v; 
           While[$CellContext`currVert != $CellContext`b, 
             If[$CellContext`matchingFlag, AppendTo[$CellContext`pathToAdd, 
                 
                 Part[$CellContext`mate, $CellContext`currVert]]; \
$CellContext`matchingFlag = False, $CellContext`nextInBlossom = Part[
                  Select[$CellContext`blossom, MemberQ[
                    Complement[
                    
                    Part[$CellContext`Gadj, $CellContext`currVert], \
$CellContext`pathToAdd], #]& ], 1]; 
               AppendTo[$CellContext`pathToAdd, $CellContext`nextInBlossom]; \
$CellContext`matchingFlag = True; Null]; $CellContext`currVert = 
              Part[$CellContext`pathToAdd, -1]; Null]; $CellContext`pathToAdd = 
            Most[$CellContext`pathToAdd]; $CellContext`pB = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`b]], 
              1]; $CellContext`pC = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`c]], 1]; 
           If[$CellContext`pB < $CellContext`pC, $CellContext`pathToAdd = 
              Reverse[$CellContext`pathToAdd]; $CellContext`augmentingPath = 
              Join[
                Part[$CellContext`augmentingPath, 
                 Span[1, $CellContext`pB]], $CellContext`pathToAdd, 
                Part[$CellContext`augmentingPath, 
                 Span[$CellContext`pC, -1]]], $CellContext`augmentingPath = 
             Join[
               Part[$CellContext`augmentingPath, 
                Span[1, $CellContext`pC]], $CellContext`pathToAdd, 
               Part[$CellContext`augmentingPath, 
                Span[$CellContext`pB, -1]]]]; 
           Return[$CellContext`augmentingPath], 
           Return[$CellContext`augmentingPath]]]; $CellContext`AugmentingPath[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`mateList, 
          Blank[]]] := 
       Module[{$CellContext`result}, $CellContext`result = \
$CellContext`AugmentingPathRecursive[
            Append[
             $CellContext`ToAdjacencyListsSW[$CellContext`G], {}], \
$CellContext`mateList]; $CellContext`result]; \
$CellContext`AugmentingPathRecursive[
         Pattern[$CellContext`GadjAug$, 
          Blank[]], 
         Pattern[$CellContext`mate$, 
          Blank[]]] := 
       Module[{$CellContext`shrunken$, $CellContext`augOrBlossom$, \
$CellContext`Hadj$, $CellContext`MM$, $CellContext`n$ = 
          Length[$CellContext`GadjAug$], $CellContext`newPath$, \
$CellContext`newMate$, $CellContext`trQ$, $CellContext`maxrec$}, \
$CellContext`maxrec$ = Infinity; $CellContext`trQ$ = 
          True; $CellContext`augOrBlossom$ = \
$CellContext`FindAugOrBlossom[$CellContext`GadjAug$, $CellContext`mate$]; 
         Increment[$CellContext`count$$]; \
$CellContext`mPrint[$CellContext`count$$]; 
         If[$CellContext`count$$ > $CellContext`maxrec$, 
           Return["Exceeded MaxRecursion"]]; 
         If[$CellContext`trQ$, 
           AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
           AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]; 
           AppendTo[$CellContext`listOfEvents$$, 
             Part[$CellContext`augOrBlossom$, 1]]; 
           AppendTo[$CellContext`listOfExtraBlossoms$$, {}]; 
           If[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
              Partition[
               Part[$CellContext`augOrBlossom$, 2], 2, 1]], 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
               Part[$CellContext`augOrBlossom$, 2]]; Null]]; 
         Which[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
           If[$CellContext`trQ$, 
             
             AppendTo[$CellContext`blossomBases$$, 
              0]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[$CellContext`GadjAug$, \
$CellContext`mate$, 
              Part[$CellContext`augOrBlossom$, 2]], 
           Part[$CellContext`augOrBlossom$, 1] === 
           "Stuck", $CellContext`newPath$ = {}; If[$CellContext`trQ$, 
             AppendTo[$CellContext`blossomBases$$, 0]], 
           Part[$CellContext`augOrBlossom$, 1] === "Blossom", 
           If[$CellContext`trQ$, AppendTo[$CellContext`blossomBases$$, 
               Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
             Null]; $CellContext`shrunken$ = \
$CellContext`ShrinkFlower[$CellContext`GadjAug$, $CellContext`mate$, 
              
              Part[$CellContext`augOrBlossom$, 
               2]]; $CellContext`newPath$ = \
$CellContext`AugmentingPathRecursive[
              Part[$CellContext`shrunken$, 1], 
              
              Part[$CellContext`shrunken$, 
               2]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[
              Part[$CellContext`shrunken$, 1], 
              Part[$CellContext`shrunken$, 2], $CellContext`newPath$]; 
           If[$CellContext`trQ$, 
             
             If[$CellContext`newPath$ != {}, 
              AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
              AppendTo[$CellContext`listOfEvents$$, "AugmentingPath"]; 
              AppendTo[$CellContext`listOfBlosAndAPs$$, 
                Partition[$CellContext`newPath$, 2, 1]]; 
              AppendTo[$CellContext`blossomBases$$, 
                Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
              AppendTo[$CellContext`listOfExtraBlossoms$$, 
                Part[$CellContext`augOrBlossom$, 2, 2]]; 
              AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]]]]; \
$CellContext`newPath$]; $CellContext`MaximumMatchingMK[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`graph$, $CellContext`matching$ = Table[0, {
             $CellContext`V[$CellContext`G$]}], $CellContext`augPath$ = {}, \
$CellContext`oldMatching$ = {}, $CellContext`matchingList$, \
$CellContext`trQ$, $CellContext`maxrec$, $CellContext`numAugPaths$}, \
$CellContext`graph$ = $CellContext`G$; $CellContext`count$$ = 
          0; $CellContext`maxrec$ = Infinity; $CellContext`trQ$ = True; 
         If[$CellContext`trQ$, $CellContext`listOfGraphs$$ = \
($CellContext`listOfMatchings$$ = ($CellContext`listOfEvents$$ = \
($CellContext`listOfBlosAndAPs$$ = ($CellContext`listOfExtraBlossoms$$ = \
($CellContext`blossomBases$$ = {}))))); $CellContext`numAugPaths$ = 
            0]; $CellContext`matchingList$ = \
$CellContext`MaximalMatchingSW[$CellContext`graph$]; 
         If[2 Length[$CellContext`matchingList$] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`matchingList$]]; $CellContext`mPrint[
           Length[$CellContext`matchingList$]]; 
         Do[Part[$CellContext`matching$, $CellContext`e] = 
           Reverse[$CellContext`e], {$CellContext`e, \
$CellContext`matchingList$}]; $CellContext`mPrint[
          "startingAugmentation"]; $CellContext`augPath$ = \
$CellContext`AugmentingPath[$CellContext`graph$, $CellContext`matching$]; \
$CellContext`mPrint[{
           "first augmentation done", (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; 
         If[$CellContext`augPath$ == {}, Do[
             If[$CellContext`i != 0, If[
                Not[
                 MemberQ[$CellContext`oldMatching$, {
                   
                   Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
                AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                  Part[$CellContext`matching$, $CellContext`i]}]]; 
              Null], {$CellContext`i, $CellContext`matching$}]; 
           If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`oldMatching$], 
           Do[
            If[
             EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i]] = 
              Part[$CellContext`augPath$, $CellContext`i - 1]; 
             Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i - 1]] = 
              Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
             1, 
             Length[$CellContext`augPath$]}]]; 
         While[True, $CellContext`mPrint[{
             "startingAugmentation", $CellContext`matching$}]; \
$CellContext`augPath$ = $CellContext`AugmentingPath[$CellContext`graph$, \
$CellContext`matching$]; If[$CellContext`augPath$ == {}, 
             Break[]]; Do[
             If[
              EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i]] = 
               Part[$CellContext`augPath$, $CellContext`i - 1]; 
              Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i - 1]] = 
               Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
              1, 
              Length[$CellContext`augPath$]}]]; 
         If[Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`r, 
                Blank[]], $CellContext`r > 0]] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[
             DeleteDuplicates[
              Map[Sort, 
               DeleteCases[
                Table[{$CellContext`i, 
                  
                  Part[$CellContext`matching$, $CellContext`i]}, \
{$CellContext`i, 
                  $CellContext`V[$CellContext`G$]}], {
                 Blank[], 0}]]]]]; $CellContext`mPrint[{
           "augmentation done", $CellContext`augPath$, \
$CellContext`matching$, (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; Do[
           If[$CellContext`i != 0, If[
              Not[
               MemberQ[$CellContext`oldMatching$, {
                 
                 Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
              AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                Part[$CellContext`matching$, $CellContext`i]}]]; 
            Null], {$CellContext`i, $CellContext`matching$}]; 
         If[$CellContext`trQ$, 
           Print[
            StringForm[
            "Total number of recursion calls: ``", $CellContext`count$$]]]; \
$RecursionLimit = 
          256; $CellContext`oldMatching$]; $CellContext`BlossomPlotData[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`aGraph$, $CellContext`graphToShow$, \
$CellContext`matching$, $CellContext`event$, $CellContext`listOfInterest$, \
$CellContext`color$, $CellContext`blosOrAP$, $CellContext`im$, \
$CellContext`locs$, $CellContext`blosBase$, $CellContext`gAdjTotal$, \
$CellContext`extraBlossom$, $CellContext`verts$}, \
$CellContext`MaximumMatchingMK[$CellContext`G$]; If[$CellContext`count$$ == 0, 
           Return[
           "Cannot show graph, no recursive calls"]]; $CellContext`locs$ = 
          Map[First, 
            Part[$CellContext`G$, 2]]; PrependTo[$CellContext`listOfGraphs$$, 
           Part[$CellContext`listOfGraphs$$, 1]]; 
         PrependTo[$CellContext`listOfMatchings$$, 
           Part[$CellContext`listOfMatchings$$, 1]]; 
         PrependTo[$CellContext`listOfEvents$$, "Start"]; 
         PrependTo[$CellContext`listOfBlosAndAPs$$, {}]; 
         PrependTo[$CellContext`blossomBases$$, 0]; 
         PrependTo[$CellContext`listOfExtraBlossoms$$, {}]; \
{$CellContext`listOfGraphs$$, $CellContext`listOfMatchings$$, \
$CellContext`listOfEvents$$, $CellContext`listOfBlosAndAPs$$, \
$CellContext`blossomBases$$, $CellContext`listOfExtraBlossoms$$, \
$CellContext`verts$ = Map[First, 
             Part[$CellContext`G$, 2]], {{
             Min[
              Map[First, $CellContext`verts$]], 
             Max[
              Map[First, $CellContext`verts$]]}, {
             Min[
              Map[Last, $CellContext`verts$]], 
             Max[
              Map[Last, $CellContext`verts$]]}}}]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.35696210375764*^9, 3.503846523843378*^9, 
  3.5044680512523947`*^9},
 CellID->1355054090]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell[TextData[{
 "The famous blossom algorithm due to Jack Edmonds (1965) finds a maximum \
matching in a graph. The problem is relatively easy in bipartite graphs \
through the use of augmenting paths, but the general case is more difficult. \
The algorithm starts with a maximal matching, which it tries to extend to a \
maximum matching. The key theorem is that a matching is maximum iff the \
matching does not admit an augmenting path. The blossom algorithm checks for \
the existence of an augmenting path by a tree search as in the bipartite \
case, but with special handling for the odd-length cycles that can arise in \
the general case. Such a cycle is called a ",
 StyleBox["blossom",
  FontSlant->"Italic"],
 ". The blossom can be shrunk and the search restarted recursively. If an \
augmenting path in a shrunken graph is ever found, it can be expanded up \
through the blossoms to yield an augmenting path in the original; that \
alternating path can be used to augment the matching by one edge. And if the \
recursive process runs into a state where there is no augmenting path, then \
there is none in the original graph. This Demonstration shows two cases of \
how blossom-shrinking leads to an augmentation of a maximal matching (red) to \
a maximum matching (blue)."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666114906616*^9, 3.5036662103250513`*^9}, {
   3.503667170098477*^9, 3.50366721169816*^9}, {3.503668329503056*^9, 
   3.503668411627619*^9}, {3.5037565178119183`*^9, 3.503756519529949*^9}, {
   3.50375689519657*^9, 3.5037568985555277`*^9}, {3.5037837261208467`*^9, 
   3.5037837272946787`*^9}, 3.5044680602980757`*^9, {3.504468097700501*^9, 
   3.504468098318869*^9}, 3.504468131496478*^9, 3.504526814715612*^9, {
   3.504526932158177*^9, 3.50452693238019*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blossomBases$$ = {0, 9, 11, 15, 9, 0, 9, 15,
     11, 9, 0}, $CellContext`count$$ = 6, $CellContext`exampleInd$$ = 
    1, $CellContext`g$$ = 
    2, $CellContext`listOfBlosAndAPs$$ = {{}, {{}, {9, 7, 6, 3, 4, 5, 8}}, {{
      9, 10}, {11, 12, 13}}, {{9, 14}, {15, 18, 19, 21, 20}}, {{}, {9, 10, 11,
       16, 17, 24, 25, 27, 26, 15, 14}}, {{9, 28}}, {{9, 14}, {14, 15}, {15, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 11}, {11, 
     10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 
     18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 
     11}, {11, 10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 
     19}, {19, 18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 
     16}, {16, 13}, {13, 12}, {12, 11}, {11, 10}, {10, 28}}, {{9, 7}, {7, 
     6}, {6, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 18}, {18, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 13}, {13, 
     12}, {12, 11}, {11, 10}, {10, 28}}, {}}, $CellContext`listOfEvents$$ = {
    "Start", "Blossom", "Blossom", "Blossom", "Blossom", "AugmentingPath", 
     "AugmentingPath", "AugmentingPath", "AugmentingPath", "AugmentingPath", 
     "Stuck"}, $CellContext`listOfExtraBlossoms$$ = {{}, {}, {}, {}, {}, {}, {
     9, 10, 11, 16, 17, 24, 25, 27, 26, 15, 14}, {15, 18, 19, 21, 20}, {11, 
     12, 13}, {9, 7, 6, 3, 4, 5, 
     8}, {}}, $CellContext`listOfGraphs$$ = {{{2}, {1, 3}, {2, 4, 6}, {3, 
      5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 
      12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 
      22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 
      26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 
      3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {
      5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 
      20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 
      20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 
      17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 
      23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {
      15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 
      25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 22, 23, 
      28}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {9, 23}, {9, 
      22}, {}, {}, {}, {}, {
      9}, {{}, {{9, {2}}, {10, {28}}, {11, {}}, {16, {}}, {17, {22}}, {
        24, {}}, {25, {}}, {27, {}}, {26, {23}}, {15, {}}, {14, {}}}}}, {{
      2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {15, 19, 
      26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 
      27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {
      6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 
      16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 
      21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 
      23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 
      10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}}, $CellContext`listOfMatchings$$ = CompressedData["
1:eJxTTMoPSmJiYGDgBmIZIGZiZGHmYGdjZeDm4uXh5xMUEBYSFREXk5SQlhqV
4+NkZZfh4RZgE+GVkBLlFxYXE5QWkuQCAJ04EdA=
    "], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`exampleInd$$], 1, "example"}, {1, 2}}, {{
       Hold[$CellContext`g$$], 2, "algorithm step"}, 
      Dynamic[
       Range[
        $CellContext`hh[$CellContext`exampleInd$$]]]}, {{
       Hold[$CellContext`count$$], 6}}, {{
       Hold[$CellContext`listOfGraphs$$], {}}}, {{
       Hold[$CellContext`listOfMatchings$$], {}}}, {{
       Hold[$CellContext`listOfEvents$$], {}}}, {{
       Hold[$CellContext`listOfExtraBlossoms$$], {}}}, {{
       Hold[$CellContext`listOfBlosAndAPs$$], {}}}, {{
       Hold[$CellContext`blossomBases$$], {}}}}, Typeset`size$$ = {
    400., {205.84375, 211.15625}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`exampleInd$7833$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`blossomBases$$ = {}, $CellContext`count$$ = 
        6, $CellContext`exampleInd$$ = 1, $CellContext`g$$ = 
        2, $CellContext`listOfBlosAndAPs$$ = {}, $CellContext`listOfEvents$$ = \
{}, $CellContext`listOfExtraBlossoms$$ = {}, $CellContext`listOfGraphs$$ = \
{}, $CellContext`listOfMatchings$$ = {}}, "ControllerVariables" :> {
        Hold[$CellContext`exampleInd$$, $CellContext`exampleInd$7833$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`gra$, $CellContext`aGraph$, $CellContext`event$, \
$CellContext`blosBase$, $CellContext`locs$, $CellContext`matching$, \
$CellContext`blosOrAP$, $CellContext`extraBlossom$, \
$CellContext`graphToShow$, $CellContext`listOfInterest$, $CellContext`color$, \
$CellContext`isols$, $CellContext`data$}, $CellContext`g$$ = 
         Min[$CellContext`g$$, 
           $CellContext`hh[$CellContext`exampleInd$$]]; $CellContext`gra$ = \
$CellContext`gr[$CellContext`exampleInd$$]; $CellContext`locs$ = Map[First, 
           
           Part[$CellContext`gra$, 
            2]]; $CellContext`data$ = \
$CellContext`BlossomPlotData[$CellContext`gra$]; $CellContext`aGraph$ = 
         Part[$CellContext`data$, 
           1, $CellContext`g$$]; $CellContext`matching$ = 
         Part[$CellContext`data$, 2, $CellContext`g$$]; $CellContext`event$ = 
         Part[$CellContext`data$, 
           3, $CellContext`g$$]; $CellContext`blosOrAP$ = 
         Part[$CellContext`data$, 
           4, $CellContext`g$$]; $CellContext`blosBase$ = 
         Part[$CellContext`data$, 
           5, $CellContext`g$$]; $CellContext`extraBlossom$ = 
         Part[$CellContext`data$, 
           6, $CellContext`g$$]; $CellContext`graphToShow$ = \
$CellContext`FromAdjacencyListsSW[
           Part[$CellContext`aGraph$, 
            Span[
            1, -2]]]; {$CellContext`listOfInterest$, $CellContext`color$} = 
         Which[$CellContext`event$ == "Blossom", {
            Part[$CellContext`blosOrAP$, 2], 
            Lighter[
             Lighter[Blue]]}, $CellContext`event$ == 
           "AugmentingPath", {$CellContext`blosOrAP$, 
            Yellow}, $CellContext`event$ == "Stuck", {{}, Yellow}, 
           True, {{}, {}}]; $CellContext`isols$ = Flatten[
           Position[
            Take[$CellContext`aGraph$, 
             $CellContext`V[$CellContext`gra$]], {}]]; Column[{
           Which[$CellContext`event$ === "Stuck", 
            Style[
             StringForm[
             "Matching augmented by one edge; maximum matching has `` edges.",
               Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Blossom", 
            Style[
             StringForm[
             "Blossom found; shrink it and look for augmenting path.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], 
            
            And[$CellContext`event$ === "AugmentingPath", $CellContext`g$$ < 
             Length[$CellContext`listOfGraphs$$] - 1], 
            Style[
             StringForm[
             "Augmenting path found; expand it through the blossom.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "AugmentingPath", 
            Style[
             StringForm[
             "Augmenting path found in original graph; augment the \
matching.", $CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Start", 
            Style[
             StringForm[
             "A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.", 
              $CellContext`V[$CellContext`gra$], Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"]], 
           Show[
            Graphics[{{
               If[$CellContext`event$ === "Blossom", {
                 EdgeForm[{
                   Thickness[0.01], 
                   Darker[Blue]}], 
                 FaceForm[
                  Lighter[
                   Lighter[Blue]]], 
                 Polygon[
                  
                  Part[$CellContext`locs$, $CellContext`listOfInterest$]]}, \
{}]}, 
              If[$CellContext`event$ === "AugmentingPath", {
                EdgeForm[{
                  Thickness[0.01], 
                  Darker[Blue]}], 
                FaceForm[
                 Lighter[Blue]], 
                Polygon[
                 
                 Part[$CellContext`locs$, $CellContext`extraBlossom$]]}, \
{}]}], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[
                And[$CellContext`event$ === "AugmentingPath", 
                 Or[
                  MemberQ[$CellContext`listOfInterest$, #2], 
                  MemberQ[$CellContext`listOfInterest$, 
                   Reverse[#2]]]], {
                 Lighter[Green], 
                 Thickness[0.02], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {
                 GrayLevel[0.7], 
                 Thickness[0.004], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             Join[
              $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
              Thread[$CellContext`isols$ -> $CellContext`isols$]], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {}, 
                If[$CellContext`event$ === "Stuck", {Blue, 
                  Thickness[0.013], 
                  Line[#]}, {Red, 
                  Thickness[0.01], 
                  Line[#]}]]}& ), SelfLoopStyle -> None, 
             VertexRenderingFunction -> (Which[
               And[#2 == $CellContext`blosBase$, 
                
                Or[$CellContext`event$ === "Blossom", $CellContext`event$ === 
                 "AugmentingPath"]], {
                EdgeForm[{Black, 
                  Thickness[0.002]}], 
                FaceForm[Yellow], 
                
                Disk[#, 
                 0.022 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], 
                Text[
                 Style["B", Bold], #]}, 
               MemberQ[$CellContext`listOfInterest$, #2], {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[$CellContext`color$; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}, True, {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[Yellow; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}]& )], PlotLabel -> None, 
            PlotRange -> Part[$CellContext`data$, -1], Frame -> Not[True], 
            PlotRangePadding -> 0.15, FrameTicks -> True, 
            ImageSize -> {400, 400}]}]], 
      "Specifications" :> {{{$CellContext`exampleInd$$, 1, "example"}, {1, 
         2}}, {{$CellContext`g$$, 2, "algorithm step"}, 
         Dynamic[
          Range[
           $CellContext`hh[$CellContext`exampleInd$$]]], ControlType -> 
         SetterBar}, {{$CellContext`count$$, 6}, ControlType -> 
         None}, {{$CellContext`listOfGraphs$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfMatchings$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfEvents$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfExtraBlossoms$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfBlosAndAPs$$, {}}, ControlType -> 
         None}, {{$CellContext`blossomBases$$, {}}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`exampleInd$$, $CellContext`g$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{443., {262.34375, 267.65625}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`hh[1] = 11; $CellContext`hh[2] = 
       7; $CellContext`gr[
        1] = $CellContext`graph[{{{1, 2}}, {{2, 3}}, {{3, 4}}, {{3, 6}}, {{4, 
         5}}, {{5, 8}}, {{5, 10}}, {{6, 7}}, {{6, 14}}, {{7, 9}}, {{8, 9}}, {{
         10, 11}}, {{10, 28}}, {{11, 12}}, {{11, 13}}, {{12, 13}}, {{13, 
         16}}, {{14, 15}}, {{15, 18}}, {{15, 20}}, {{16, 17}}, {{17, 22}}, {{
         17, 24}}, {{18, 19}}, {{18, 26}}, {{19, 21}}, {{20, 21}}, {{22, 
         23}}, {{23, 26}}, {{24, 25}}, {{25, 27}}, {{26, 
         27}}}, CompressedData["
1:eJxTTMoPSmVmYGCQAWJGIGYCYtO4XZ48TUIO05y7c57/ZneoFlnn/vCXgMO8
98uPeZvzO6z6eMk3SYDbweNhFVCG30H59s+6rD1MDmkg8EzAYYdc6+vAHd/s
w/h0N83NF3aoz9pTMnmGoAMDGIg48DBpt4vd5HdYIxOVYh0v7sACVsjgUDpZ
AsiUgPI5HD6BrImQcnj+eyXQxnf2Mf2HvmrE8DiAnMekfd/++uICW67rLFBz
GRjswQ7/Zw9xzwv7uypsjVOdf9pLgg0Uhbh7goBDp2PC0wtKEg6FQN2LC7gc
QK459/2n/TcNkA0f4OYCXQ100Ad7oO+BHhV3COidnifUzOhgfd8fyJJ2AFtT
8t8eEj7SDi/VDDnWyPA4gHwvxyrnAHZuP6vDwVMLXbd95nRwAll7+6/9Ain9
uyptAg6HQdKH/tsvAsr+vcLhAHZG8GH7qxVAkzoE4P5aNvuIwoYiEQdjMPhp
PwfEfSHsAHbOgUf2HOCAPG8/8W2Nvek9AQcAR+a50g==
         "]]; $CellContext`gr[
        2] = $CellContext`graph[{{{1, 3}}, {{1, 9}}, {{1, 22}}, {{1, 26}}, {{
         1, 30}}, {{1, 31}}, {{2, 8}}, {{2, 26}}, {{2, 27}}, {{2, 32}}, {{2, 
         36}}, {{3, 11}}, {{3, 31}}, {{3, 37}}, {{4, 16}}, {{4, 17}}, {{4, 
         24}}, {{4, 33}}, {{5, 11}}, {{5, 15}}, {{5, 16}}, {{5, 18}}, {{5, 
         34}}, {{5, 37}}, {{6, 7}}, {{6, 13}}, {{6, 19}}, {{6, 28}}, {{6, 
         29}}, {{6, 36}}, {{7, 10}}, {{7, 13}}, {{7, 21}}, {{7, 28}}, {{8, 
         23}}, {{8, 32}}, {{9, 12}}, {{9, 13}}, {{9, 20}}, {{9, 22}}, {{9, 
         30}}, {{10, 13}}, {{10, 21}}, {{10, 22}}, {{10, 26}}, {{11, 16}}, {{
         11, 37}}, {{12, 15}}, {{12, 18}}, {{12, 20}}, {{12, 30}}, {{12, 
         31}}, {{13, 19}}, {{13, 20}}, {{13, 22}}, {{14, 17}}, {{14, 19}}, {{
         14, 25}}, {{14, 33}}, {{14, 35}}, {{15, 18}}, {{15, 31}}, {{15, 
         37}}, {{16, 17}}, {{16, 24}}, {{16, 25}}, {{16, 34}}, {{17, 25}}, {{
         17, 33}}, {{18, 19}}, {{18, 20}}, {{18, 34}}, {{19, 20}}, {{19, 
         25}}, {{19, 29}}, {{19, 34}}, {{19, 35}}, {{21, 26}}, {{21, 27}}, {{
         21, 28}}, {{22, 26}}, {{23, 24}}, {{23, 29}}, {{23, 32}}, {{23, 
         35}}, {{24, 33}}, {{24, 35}}, {{25, 34}}, {{26, 27}}, {{27, 28}}, {{
         27, 36}}, {{28, 36}}, {{29, 32}}, {{29, 35}}, {{29, 36}}, {{30, 
         31}}, {{31, 37}}, {{32, 36}}, {{33, 35}}}, CompressedData["
1:eJxTTMoPSmVmYGBQBWJGIGYCYqHmA6cWuh6zb30duEOu9b29yDr3h1Ui7/aL
3zz3PfjxVfuA3ul5Qs0v7H/VZe0pmfzE3gMou879pn3C0wtKt38+2w9Wvu6x
veWWE2X75q/aDxE/t39DUcbEtzX77d/V2JvG7bq4n+v64gJbruvo5u8/CLR9
2+e99mfPgMAD+zlHFIBaL+6XjUqxvu//0J4BDD5AaQaG+/4gB122B1sndd3e
GAw27z8NMubvFfvKl2qGHGvO2INcK8Fybz9Qkf5dlXv2kixhfLqbzqL7Zz/E
fTftQbb1Tn+0H6wt7BrUHRuh/tpl/yP48dLZRw7sVweaLhN1xL7QFuSjs/Yf
lh/zNu+8uR/iugf2F4G+Bxq9H6L+CdTdD/aDg3nb6/1o4b1/EdjZN+yBgQV0
yK39aOrtj4KcMfHhfrC1Kbeh+m7vP/xVI6b/0FX7TkdQiF/ev+rjJd8kgQv7
/6wEMS7YQ8Lpsb12uxgwpG/bL5sN8hDMfU/2fwIpjzgJ9e85+3nvQR55uh8i
f8ceEi9n91eDI6wFGk8Pof5/AHXnAftSkHa+p/ZePExAqy7aAwDlIDF5
         "]]; $CellContext`AdjacencyListsToEdges[
         Pattern[$CellContext`al, 
          Blank[]]] := Map[List, 
         Union[
          Map[Sort, 
           Flatten[
            ReplaceAll[
             MapIndexed[{
               Part[#2, 1], #}& , $CellContext`al], {
               Pattern[$CellContext`i, 
                Blank[Integer]], 
               Pattern[$CellContext`L, 
                Blank[List]]} :> 
             Table[{$CellContext`i, $CellContext`l}, {$CellContext`l, \
$CellContext`L}]], 1]]]]; $CellContext`FromAdjacencyListsSW[
         Pattern[$CellContext`al, 
          Blank[]]] := $CellContext`graph[
         $CellContext`AdjacencyListsToEdges[$CellContext`al], 
         Table[{{$CellContext`i, 0}}, {$CellContext`i, 
           Length[$CellContext`al]}]]; $CellContext`GraphToEdgeRules[
         Pattern[$CellContext`G, 
          Blank[]]] := ReplaceAll[
         Map[First, 
          Part[$CellContext`G, 1]], {
           Pattern[$CellContext`x, 
            Blank[Integer]], 
           Pattern[$CellContext`y, 
            
            Blank[]]} :> ($CellContext`x -> $CellContext`y)]; \
$CellContext`GraphToVertexRules[
         Pattern[$CellContext`G, 
          Blank[]]] := Module[{$CellContext`tt}, $CellContext`tt = Map[First, 
            Part[$CellContext`G, 2]]; Thread[Range[
             
             Length[$CellContext`tt]] -> $CellContext`tt]]; \
$CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Map[First, 
         Part[$CellContext`G, 1]]; $CellContext`V[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Length[
         Part[$CellContext`G, 2]]; $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`etemp, $CellContext`ee, $CellContext`missing}, \
$CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
              $CellContext`EdgesSW[$CellContext`G]], 
            Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
            Range[
             Length[
              Part[$CellContext`G, 2]]], 
            Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
            Join[$CellContext`etemp, 
             
             Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
           ReplaceAll[
            Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
              Blank[Integer], 
              Pattern[$CellContext`n, 
               
               Blank[]]} :> $CellContext`n], {{}} -> {}]]; \
$CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`seen, $CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g], $CellContext`st}, $CellContext`st = 
          1; $CellContext`match = 
          Part[$CellContext`ee, $CellContext`st]; $CellContext`seen[
            Blank[]] := False; $CellContext`seen[
            Part[$CellContext`match, 1]] = True; $CellContext`seen[
            Part[$CellContext`match, 2]] = True; Do[
           If[
            And[
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 1]]], 
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 2]]]], $CellContext`match = 
             Join[$CellContext`match, $CellContext`e]; $CellContext`seen[
               Part[$CellContext`e, 1]] = ($CellContext`seen[
                Part[$CellContext`e, 2]] = True)], {$CellContext`e, 
            Delete[$CellContext`ee, $CellContext`st]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]]; $CellContext`DoublePathToFlower[
         Pattern[$CellContext`doublePath, 
          Blank[]]] := 
       Module[{$CellContext`timesOccurred = 
          Tally[$CellContext`doublePath], $CellContext`twice, \
$CellContext`locations}, $CellContext`twice = 
          Select[$CellContext`timesOccurred, Part[#, 2] == 2& ]; 
         If[$CellContext`twice == {}, 
           Return[{{}, $CellContext`doublePath}]]; $CellContext`twice = 
          Part[$CellContext`twice, -1, 1]; $CellContext`locations = Flatten[
            Position[$CellContext`doublePath, $CellContext`twice]]; {
           Take[$CellContext`doublePath, Part[$CellContext`locations, 1] - 1], 
           Most[
            
            Take[$CellContext`doublePath, $CellContext`locations]]}]; \
$CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Blank[]] := 
       Condition[{"Stuck", {}}, Length[$CellContext`Gadj] <= 
         2]; $CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]]] := 
       Module[{$CellContext`parents, $CellContext`n, $CellContext`vertices, \
$CellContext`treeRoots, $CellContext`head, $CellContext`tail, $CellContext`Q, \
$CellContext`neighbors, $CellContext`novelNeighbors, $CellContext`vw = {}, \
$CellContext`evenQ, $CellContext`uncoveredNode = 
          0, $CellContext`v, $CellContext`doublePath}, $CellContext`n = 
          Length[$CellContext`Gadj] - 1; $CellContext`vertices = 
          Range[$CellContext`n]; $CellContext`parents = 
          Table[0, {$CellContext`n}]; $CellContext`treeRoots = 
          Select[$CellContext`vertices, Part[$CellContext`MV, #] == 
            0& ]; $CellContext`head = ($CellContext`tail = 0); While[If[
             
             And[$CellContext`head == $CellContext`tail, \
$CellContext`uncoveredNode == 
              0, $CellContext`vw == {}, $CellContext`treeRoots != {}], \
$CellContext`Q[$CellContext`tail] = (Part[$CellContext`parents, 
                 Part[$CellContext`treeRoots, 1]] = 
               Part[$CellContext`treeRoots, 1]); 
             Increment[$CellContext`tail]; $CellContext`evenQ[
                Part[$CellContext`treeRoots, 1]] = 
              True; $CellContext`treeRoots = Rest[$CellContext`treeRoots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`treeRoots != \
{}, $CellContext`vw == {}], $CellContext`v = \
$CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`neighbors = 
            Part[$CellContext`Gadj, $CellContext`v]; 
           If[$CellContext`evenQ[$CellContext`v] == True, 
             Do[
              Which[
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] == 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`uncoveredNode = $CellContext`w; Break[], 
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] != 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
               Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = False, 
               And[Part[$CellContext`parents, $CellContext`w] != 0, 
                $CellContext`evenQ[$CellContext`w]], $CellContext`vw = \
{$CellContext`v, $CellContext`w}; 
               Break[]], {$CellContext`w, $CellContext`neighbors}], 
             Do[If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] == 0], 
                Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
                Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = True; Break[]]; If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] != 0], 
                If[
                 Not[
                  $CellContext`evenQ[$CellContext`w]], $CellContext`vw = {
                    Part[$CellContext`MV, $CellContext`w], $CellContext`w}; 
                 Break[]]], {$CellContext`w, $CellContext`neighbors}]]]; 
         Which[$CellContext`uncoveredNode != 0, {"AugmentingPath", 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parents, #]& , \
$CellContext`uncoveredNode]]]}, $CellContext`vw != {}, {
           "Blossom", $CellContext`doublePath = Join[
               Reverse[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  Part[$CellContext`vw, 1]]]], 
               Most[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  
                  Part[$CellContext`vw, 
                   2]]]]]; \
$CellContext`DoublePathToFlower[$CellContext`doublePath]}, True, {
           "Stuck", {}}]]; $CellContext`ShrinkFlower[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], {
          Pattern[$CellContext`stem, 
           Blank[]], 
          Pattern[$CellContext`blossom, 
           Blank[]]}] := 
       Module[{$CellContext`Gadj1, $CellContext`mate, $CellContext`ns, \
$CellContext`stemBase, $CellContext`blossomNeighbors, \
$CellContext`blossomNeighborConnections}, $CellContext`Gadj1 = \
$CellContext`Gadj; $CellContext`mate = $CellContext`MV; $CellContext`stemBase = 
          Part[$CellContext`blossom, 1]; $CellContext`blossomNeighbors = 
          Complement[
            Apply[Union, 
             
             Part[$CellContext`Gadj1, $CellContext`blossom]], \
$CellContext`blossom]; Part[$CellContext`Gadj1, 
            Rest[$CellContext`blossom]] = {}; 
         Part[$CellContext`Gadj1, $CellContext`stemBase] = \
$CellContext`blossomNeighbors; Do[
           If[
            Not[
             MemberQ[
              
              Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], 
            PrependTo[
             
             Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], {$CellContext`bN, $CellContext`blossomNeighbors}]; \
$CellContext`Gadj1 = DeleteCases[$CellContext`Gadj1, 
            Apply[Alternatives, 
             Rest[$CellContext`blossom]], 
            Infinity]; $CellContext`blossomNeighborConnections = 
          Table[{$CellContext`b, 
             Complement[
              
              Part[$CellContext`Gadj, $CellContext`b], \
$CellContext`blossom]}, {$CellContext`b, $CellContext`blossom}]; 
         Part[$CellContext`Gadj1, -1] = {$CellContext`stem, \
$CellContext`blossomNeighborConnections}; $CellContext`ns = 
          Length[$CellContext`stem]; {$CellContext`Gadj1, $CellContext`mate}]; \
$CellContext`ExpandBlossomsAndChangeMatching[
         Pattern[$CellContext`Gadj1, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], 
         Pattern[$CellContext`augPath, 
          Blank[]]] := 
       Module[{$CellContext`Gadj, $CellContext`mate, $CellContext`stem, \
$CellContext`blossomConnectData, $CellContext`stemBase, $CellContext`place, \
$CellContext`blossom, $CellContext`blossomNeighbors, $CellContext`b, \
$CellContext`v, $CellContext`c, $CellContext`pathToAdd, \
$CellContext`matchingFlag, $CellContext`currVert, \
$CellContext`augmentingPath, $CellContext`position, \
$CellContext`nextInBlossom, $CellContext`pB, $CellContext`pC, \
$CellContext`basePositions}, $CellContext`Gadj = $CellContext`Gadj1; \
$CellContext`mate = $CellContext`MV; $CellContext`augmentingPath = \
$CellContext`augPath; If[$CellContext`augmentingPath == {}, 
           Return[{}]]; If[Part[$CellContext`Gadj, -1] == {}, 
           
           Return[$CellContext`augmentingPath]]; {$CellContext`stem, \
$CellContext`blossomConnectData} = 
          Part[$CellContext`Gadj, -1]; $CellContext`b = 
          Part[$CellContext`blossomConnectData, 1, 1]; If[
           
           MemberQ[$CellContext`augmentingPath, $CellContext`b], \
$CellContext`blossom = Table[
              
              First[$CellContext`i], {$CellContext`i, \
$CellContext`blossomConnectData}]; Do[$CellContext`place = Part[
                Position[$CellContext`blossom, 
                 First[$CellContext`i], 1, 1], 1, 1]; 
             Which[$CellContext`place == 1, Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, -1]}, $CellContext`place == 
               Length[$CellContext`blossom], Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}, True, 
               Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}]; 
             Part[$CellContext`Gadj, 
                First[$CellContext`i]] = Join[
                Part[$CellContext`Gadj, 
                 First[$CellContext`i]], 
                Last[$CellContext`i]]; If[Last[$CellContext`i] != {}, 
               Do[AppendTo[
                  Part[$CellContext`Gadj, $CellContext`j], 
                  First[$CellContext`i]]; $CellContext`basePositions = 
                 Position[
                   Part[$CellContext`Gadj, $CellContext`j], $CellContext`b, 1,
                    1]; Part[$CellContext`Gadj, $CellContext`j] = Delete[
                   
                   Part[$CellContext`Gadj, $CellContext`j], \
$CellContext`basePositions], {$CellContext`j, 
                 
                 Last[$CellContext`i]}]], {$CellContext`i, \
$CellContext`blossomConnectData}]; 
           If[Part[$CellContext`augmentingPath, 
               1] == $CellContext`b, $CellContext`c = 
              Part[$CellContext`augmentingPath, 2]; 
             Null, $CellContext`position = Part[
                Flatten[
                 Position[$CellContext`augmentingPath, $CellContext`b]], 1]; 
             If[Part[$CellContext`augmentingPath, $CellContext`position + 1] == 
               Part[$CellContext`stem, -1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position - 
                 1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position + 
                 1]]]; $CellContext`v = Part[
              Select[$CellContext`blossom, MemberQ[
                Part[$CellContext`Gadj, $CellContext`c], #]& ], 
              1]; $CellContext`pathToAdd = {$CellContext`v}; \
$CellContext`matchingFlag = True; $CellContext`currVert = $CellContext`v; 
           While[$CellContext`currVert != $CellContext`b, 
             If[$CellContext`matchingFlag, AppendTo[$CellContext`pathToAdd, 
                 
                 Part[$CellContext`mate, $CellContext`currVert]]; \
$CellContext`matchingFlag = False, $CellContext`nextInBlossom = Part[
                  Select[$CellContext`blossom, MemberQ[
                    Complement[
                    
                    Part[$CellContext`Gadj, $CellContext`currVert], \
$CellContext`pathToAdd], #]& ], 1]; 
               AppendTo[$CellContext`pathToAdd, $CellContext`nextInBlossom]; \
$CellContext`matchingFlag = True; Null]; $CellContext`currVert = 
              Part[$CellContext`pathToAdd, -1]; Null]; $CellContext`pathToAdd = 
            Most[$CellContext`pathToAdd]; $CellContext`pB = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`b]], 
              1]; $CellContext`pC = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`c]], 1]; 
           If[$CellContext`pB < $CellContext`pC, $CellContext`pathToAdd = 
              Reverse[$CellContext`pathToAdd]; $CellContext`augmentingPath = 
              Join[
                Part[$CellContext`augmentingPath, 
                 Span[1, $CellContext`pB]], $CellContext`pathToAdd, 
                Part[$CellContext`augmentingPath, 
                 Span[$CellContext`pC, -1]]], $CellContext`augmentingPath = 
             Join[
               Part[$CellContext`augmentingPath, 
                Span[1, $CellContext`pC]], $CellContext`pathToAdd, 
               Part[$CellContext`augmentingPath, 
                Span[$CellContext`pB, -1]]]]; 
           Return[$CellContext`augmentingPath], 
           Return[$CellContext`augmentingPath]]]; $CellContext`AugmentingPath[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`mateList, 
          Blank[]]] := 
       Module[{$CellContext`result}, $CellContext`result = \
$CellContext`AugmentingPathRecursive[
            Append[
             $CellContext`ToAdjacencyListsSW[$CellContext`G], {}], \
$CellContext`mateList]; $CellContext`result]; \
$CellContext`AugmentingPathRecursive[
         Pattern[$CellContext`GadjAug$, 
          Blank[]], 
         Pattern[$CellContext`mate$, 
          Blank[]]] := 
       Module[{$CellContext`shrunken$, $CellContext`augOrBlossom$, \
$CellContext`Hadj$, $CellContext`MM$, $CellContext`n$ = 
          Length[$CellContext`GadjAug$], $CellContext`newPath$, \
$CellContext`newMate$, $CellContext`trQ$, $CellContext`maxrec$}, \
$CellContext`maxrec$ = Infinity; $CellContext`trQ$ = 
          True; $CellContext`augOrBlossom$ = \
$CellContext`FindAugOrBlossom[$CellContext`GadjAug$, $CellContext`mate$]; 
         Increment[$CellContext`count$$]; \
$CellContext`mPrint[$CellContext`count$$]; 
         If[$CellContext`count$$ > $CellContext`maxrec$, 
           Return["Exceeded MaxRecursion"]]; 
         If[$CellContext`trQ$, 
           AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
           AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]; 
           AppendTo[$CellContext`listOfEvents$$, 
             Part[$CellContext`augOrBlossom$, 1]]; 
           AppendTo[$CellContext`listOfExtraBlossoms$$, {}]; 
           If[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
              Partition[
               Part[$CellContext`augOrBlossom$, 2], 2, 1]], 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
               Part[$CellContext`augOrBlossom$, 2]]; Null]]; 
         Which[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
           If[$CellContext`trQ$, 
             
             AppendTo[$CellContext`blossomBases$$, 
              0]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[$CellContext`GadjAug$, \
$CellContext`mate$, 
              Part[$CellContext`augOrBlossom$, 2]], 
           Part[$CellContext`augOrBlossom$, 1] === 
           "Stuck", $CellContext`newPath$ = {}; If[$CellContext`trQ$, 
             AppendTo[$CellContext`blossomBases$$, 0]], 
           Part[$CellContext`augOrBlossom$, 1] === "Blossom", 
           If[$CellContext`trQ$, AppendTo[$CellContext`blossomBases$$, 
               Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
             Null]; $CellContext`shrunken$ = \
$CellContext`ShrinkFlower[$CellContext`GadjAug$, $CellContext`mate$, 
              
              Part[$CellContext`augOrBlossom$, 
               2]]; $CellContext`newPath$ = \
$CellContext`AugmentingPathRecursive[
              Part[$CellContext`shrunken$, 1], 
              
              Part[$CellContext`shrunken$, 
               2]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[
              Part[$CellContext`shrunken$, 1], 
              Part[$CellContext`shrunken$, 2], $CellContext`newPath$]; 
           If[$CellContext`trQ$, 
             
             If[$CellContext`newPath$ != {}, 
              AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
              AppendTo[$CellContext`listOfEvents$$, "AugmentingPath"]; 
              AppendTo[$CellContext`listOfBlosAndAPs$$, 
                Partition[$CellContext`newPath$, 2, 1]]; 
              AppendTo[$CellContext`blossomBases$$, 
                Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
              AppendTo[$CellContext`listOfExtraBlossoms$$, 
                Part[$CellContext`augOrBlossom$, 2, 2]]; 
              AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]]]]; \
$CellContext`newPath$]; $CellContext`MaximumMatchingMK[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`graph$, $CellContext`matching$ = Table[0, {
             $CellContext`V[$CellContext`G$]}], $CellContext`augPath$ = {}, \
$CellContext`oldMatching$ = {}, $CellContext`matchingList$, \
$CellContext`trQ$, $CellContext`maxrec$, $CellContext`numAugPaths$}, \
$CellContext`graph$ = $CellContext`G$; $CellContext`count$$ = 
          0; $CellContext`maxrec$ = Infinity; $CellContext`trQ$ = True; 
         If[$CellContext`trQ$, $CellContext`listOfGraphs$$ = \
($CellContext`listOfMatchings$$ = ($CellContext`listOfEvents$$ = \
($CellContext`listOfBlosAndAPs$$ = ($CellContext`listOfExtraBlossoms$$ = \
($CellContext`blossomBases$$ = {}))))); $CellContext`numAugPaths$ = 
            0]; $CellContext`matchingList$ = \
$CellContext`MaximalMatchingSW[$CellContext`graph$]; 
         If[2 Length[$CellContext`matchingList$] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`matchingList$]]; $CellContext`mPrint[
           Length[$CellContext`matchingList$]]; 
         Do[Part[$CellContext`matching$, $CellContext`e] = 
           Reverse[$CellContext`e], {$CellContext`e, \
$CellContext`matchingList$}]; $CellContext`mPrint[
          "startingAugmentation"]; $CellContext`augPath$ = \
$CellContext`AugmentingPath[$CellContext`graph$, $CellContext`matching$]; \
$CellContext`mPrint[{
           "first augmentation done", (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; 
         If[$CellContext`augPath$ == {}, Do[
             If[$CellContext`i != 0, If[
                Not[
                 MemberQ[$CellContext`oldMatching$, {
                   
                   Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
                AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                  Part[$CellContext`matching$, $CellContext`i]}]]; 
              Null], {$CellContext`i, $CellContext`matching$}]; 
           If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`oldMatching$], 
           Do[
            If[
             EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i]] = 
              Part[$CellContext`augPath$, $CellContext`i - 1]; 
             Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i - 1]] = 
              Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
             1, 
             Length[$CellContext`augPath$]}]]; 
         While[True, $CellContext`mPrint[{
             "startingAugmentation", $CellContext`matching$}]; \
$CellContext`augPath$ = $CellContext`AugmentingPath[$CellContext`graph$, \
$CellContext`matching$]; If[$CellContext`augPath$ == {}, 
             Break[]]; Do[
             If[
              EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i]] = 
               Part[$CellContext`augPath$, $CellContext`i - 1]; 
              Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i - 1]] = 
               Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
              1, 
              Length[$CellContext`augPath$]}]]; 
         If[Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`r, 
                Blank[]], $CellContext`r > 0]] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[
             DeleteDuplicates[
              Map[Sort, 
               DeleteCases[
                Table[{$CellContext`i, 
                  
                  Part[$CellContext`matching$, $CellContext`i]}, \
{$CellContext`i, 
                  $CellContext`V[$CellContext`G$]}], {
                 Blank[], 0}]]]]]; $CellContext`mPrint[{
           "augmentation done", $CellContext`augPath$, \
$CellContext`matching$, (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; Do[
           If[$CellContext`i != 0, If[
              Not[
               MemberQ[$CellContext`oldMatching$, {
                 
                 Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
              AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                Part[$CellContext`matching$, $CellContext`i]}]]; 
            Null], {$CellContext`i, $CellContext`matching$}]; 
         If[$CellContext`trQ$, 
           Print[
            StringForm[
            "Total number of recursion calls: ``", $CellContext`count$$]]]; \
$RecursionLimit = 
          256; $CellContext`oldMatching$]; $CellContext`BlossomPlotData[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`aGraph$, $CellContext`graphToShow$, \
$CellContext`matching$, $CellContext`event$, $CellContext`listOfInterest$, \
$CellContext`color$, $CellContext`blosOrAP$, $CellContext`im$, \
$CellContext`locs$, $CellContext`blosBase$, $CellContext`gAdjTotal$, \
$CellContext`extraBlossom$, $CellContext`verts$}, \
$CellContext`MaximumMatchingMK[$CellContext`G$]; If[$CellContext`count$$ == 0, 
           Return[
           "Cannot show graph, no recursive calls"]]; $CellContext`locs$ = 
          Map[First, 
            Part[$CellContext`G$, 2]]; PrependTo[$CellContext`listOfGraphs$$, 
           Part[$CellContext`listOfGraphs$$, 1]]; 
         PrependTo[$CellContext`listOfMatchings$$, 
           Part[$CellContext`listOfMatchings$$, 1]]; 
         PrependTo[$CellContext`listOfEvents$$, "Start"]; 
         PrependTo[$CellContext`listOfBlosAndAPs$$, {}]; 
         PrependTo[$CellContext`blossomBases$$, 0]; 
         PrependTo[$CellContext`listOfExtraBlossoms$$, {}]; \
{$CellContext`listOfGraphs$$, $CellContext`listOfMatchings$$, \
$CellContext`listOfEvents$$, $CellContext`listOfBlosAndAPs$$, \
$CellContext`blossomBases$$, $CellContext`listOfExtraBlossoms$$, \
$CellContext`verts$ = Map[First, 
             Part[$CellContext`G$, 2]], {{
             Min[
              Map[First, $CellContext`verts$]], 
             Max[
              Map[First, $CellContext`verts$]]}, {
             Min[
              Map[Last, $CellContext`verts$]], 
             Max[
              Map[Last, $CellContext`verts$]]}}}]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->358172400]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blossomBases$$ = {0, 9, 11, 15, 9, 0, 9, 15,
     11, 9, 0}, $CellContext`count$$ = 6, $CellContext`exampleInd$$ = 
    1, $CellContext`g$$ = 
    1, $CellContext`listOfBlosAndAPs$$ = {{}, {{}, {9, 7, 6, 3, 4, 5, 8}}, {{
      9, 10}, {11, 12, 13}}, {{9, 14}, {15, 18, 19, 21, 20}}, {{}, {9, 10, 11,
       16, 17, 24, 25, 27, 26, 15, 14}}, {{9, 28}}, {{9, 14}, {14, 15}, {15, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 11}, {11, 
     10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 
     18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 
     11}, {11, 10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 
     19}, {19, 18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 
     16}, {16, 13}, {13, 12}, {12, 11}, {11, 10}, {10, 28}}, {{9, 7}, {7, 
     6}, {6, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 18}, {18, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 13}, {13, 
     12}, {12, 11}, {11, 10}, {10, 28}}, {}}, $CellContext`listOfEvents$$ = {
    "Start", "Blossom", "Blossom", "Blossom", "Blossom", "AugmentingPath", 
     "AugmentingPath", "AugmentingPath", "AugmentingPath", "AugmentingPath", 
     "Stuck"}, $CellContext`listOfExtraBlossoms$$ = {{}, {}, {}, {}, {}, {}, {
     9, 10, 11, 16, 17, 24, 25, 27, 26, 15, 14}, {15, 18, 19, 21, 20}, {11, 
     12, 13}, {9, 7, 6, 3, 4, 5, 
     8}, {}}, $CellContext`listOfGraphs$$ = {{{2}, {1, 3}, {2, 4, 6}, {3, 
      5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 
      12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 
      22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 
      26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 
      3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {
      5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 
      20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 
      20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 
      17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 
      23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {
      15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 
      25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 22, 23, 
      28}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {9, 23}, {9, 
      22}, {}, {}, {}, {}, {
      9}, {{}, {{9, {2}}, {10, {28}}, {11, {}}, {16, {}}, {17, {22}}, {
        24, {}}, {25, {}}, {27, {}}, {26, {23}}, {15, {}}, {14, {}}}}}, {{
      2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {15, 19, 
      26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 
      27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {
      6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 
      16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 
      21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 
      23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 
      10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}}, $CellContext`listOfMatchings$$ = CompressedData["
1:eJxTTMoPSmJiYGDgBmIZIGZiZGHmYGdjZeDm4uXh5xMUEBYSFREXk5SQlhqV
4+NkZZfh4RZgE+GVkBLlFxYXE5QWkuQCAJ04EdA=
    "], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`exampleInd$$], 1, "example"}, {1, 2}}, {{
       Hold[$CellContext`g$$], 1, "algorithm step"}, 
      Dynamic[
       Range[
        $CellContext`hh[$CellContext`exampleInd$$]]]}, {{
       Hold[$CellContext`count$$], 0}}, {{
       Hold[$CellContext`listOfGraphs$$], {}}}, {{
       Hold[$CellContext`listOfMatchings$$], {}}}, {{
       Hold[$CellContext`listOfEvents$$], {}}}, {{
       Hold[$CellContext`listOfExtraBlossoms$$], {}}}, {{
       Hold[$CellContext`listOfBlosAndAPs$$], {}}}, {{
       Hold[$CellContext`blossomBases$$], {}}}}, Typeset`size$$ = {
    400., {205.84375, 211.15625}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`exampleInd$7893$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`blossomBases$$ = {}, $CellContext`count$$ = 
        0, $CellContext`exampleInd$$ = 1, $CellContext`g$$ = 
        1, $CellContext`listOfBlosAndAPs$$ = {}, $CellContext`listOfEvents$$ = \
{}, $CellContext`listOfExtraBlossoms$$ = {}, $CellContext`listOfGraphs$$ = \
{}, $CellContext`listOfMatchings$$ = {}}, "ControllerVariables" :> {
        Hold[$CellContext`exampleInd$$, $CellContext`exampleInd$7893$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`gra$, $CellContext`aGraph$, $CellContext`event$, \
$CellContext`blosBase$, $CellContext`locs$, $CellContext`matching$, \
$CellContext`blosOrAP$, $CellContext`extraBlossom$, \
$CellContext`graphToShow$, $CellContext`listOfInterest$, $CellContext`color$, \
$CellContext`isols$, $CellContext`data$}, $CellContext`g$$ = 
         Min[$CellContext`g$$, 
           $CellContext`hh[$CellContext`exampleInd$$]]; $CellContext`gra$ = \
$CellContext`gr[$CellContext`exampleInd$$]; $CellContext`locs$ = Map[First, 
           
           Part[$CellContext`gra$, 
            2]]; $CellContext`data$ = \
$CellContext`BlossomPlotData[$CellContext`gra$]; $CellContext`aGraph$ = 
         Part[$CellContext`data$, 
           1, $CellContext`g$$]; $CellContext`matching$ = 
         Part[$CellContext`data$, 2, $CellContext`g$$]; $CellContext`event$ = 
         Part[$CellContext`data$, 
           3, $CellContext`g$$]; $CellContext`blosOrAP$ = 
         Part[$CellContext`data$, 
           4, $CellContext`g$$]; $CellContext`blosBase$ = 
         Part[$CellContext`data$, 
           5, $CellContext`g$$]; $CellContext`extraBlossom$ = 
         Part[$CellContext`data$, 
           6, $CellContext`g$$]; $CellContext`graphToShow$ = \
$CellContext`FromAdjacencyListsSW[
           Part[$CellContext`aGraph$, 
            Span[
            1, -2]]]; {$CellContext`listOfInterest$, $CellContext`color$} = 
         Which[$CellContext`event$ == "Blossom", {
            Part[$CellContext`blosOrAP$, 2], 
            Lighter[
             Lighter[Blue]]}, $CellContext`event$ == 
           "AugmentingPath", {$CellContext`blosOrAP$, 
            Yellow}, $CellContext`event$ == "Stuck", {{}, Yellow}, 
           True, {{}, {}}]; $CellContext`isols$ = Flatten[
           Position[
            Take[$CellContext`aGraph$, 
             $CellContext`V[$CellContext`gra$]], {}]]; Column[{
           Which[$CellContext`event$ === "Stuck", 
            Style[
             StringForm[
             "Matching augmented by one edge; maximum matching has `` edges.",
               Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Blossom", 
            Style[
             StringForm[
             "Blossom found; shrink it and look for augmenting path.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], 
            
            And[$CellContext`event$ === "AugmentingPath", $CellContext`g$$ < 
             Length[$CellContext`listOfGraphs$$] - 1], 
            Style[
             StringForm[
             "Augmenting path found; expand it through the blossom.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "AugmentingPath", 
            Style[
             StringForm[
             "Augmenting path found in original graph; augment the \
matching.", $CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Start", 
            Style[
             StringForm[
             "A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.", 
              $CellContext`V[$CellContext`gra$], Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"]], 
           Show[
            Graphics[{{
               If[$CellContext`event$ === "Blossom", {
                 EdgeForm[{
                   Thickness[0.01], 
                   Darker[Blue]}], 
                 FaceForm[
                  Lighter[
                   Lighter[Blue]]], 
                 Polygon[
                  
                  Part[$CellContext`locs$, $CellContext`listOfInterest$]]}, \
{}]}, 
              If[$CellContext`event$ === "AugmentingPath", {
                EdgeForm[{
                  Thickness[0.01], 
                  Darker[Blue]}], 
                FaceForm[
                 Lighter[Blue]], 
                Polygon[
                 
                 Part[$CellContext`locs$, $CellContext`extraBlossom$]]}, \
{}]}], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[
                And[$CellContext`event$ === "AugmentingPath", 
                 Or[
                  MemberQ[$CellContext`listOfInterest$, #2], 
                  MemberQ[$CellContext`listOfInterest$, 
                   Reverse[#2]]]], {
                 Lighter[Green], 
                 Thickness[0.02], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {
                 GrayLevel[0.7], 
                 Thickness[0.004], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             Join[
              $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
              Thread[$CellContext`isols$ -> $CellContext`isols$]], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {}, 
                If[$CellContext`event$ === "Stuck", {Blue, 
                  Thickness[0.013], 
                  Line[#]}, {Red, 
                  Thickness[0.01], 
                  Line[#]}]]}& ), SelfLoopStyle -> None, 
             VertexRenderingFunction -> (Which[
               And[#2 == $CellContext`blosBase$, 
                
                Or[$CellContext`event$ === "Blossom", $CellContext`event$ === 
                 "AugmentingPath"]], {
                EdgeForm[{Black, 
                  Thickness[0.002]}], 
                FaceForm[Yellow], 
                
                Disk[#, 
                 0.022 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], 
                Text[
                 Style["B", Bold], #]}, 
               MemberQ[$CellContext`listOfInterest$, #2], {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[$CellContext`color$; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}, True, {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[Yellow; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}]& )], PlotLabel -> None, 
            PlotRange -> Part[$CellContext`data$, -1], Frame -> Not[True], 
            PlotRangePadding -> 0.15, FrameTicks -> True, 
            ImageSize -> {400, 400}]}]], 
      "Specifications" :> {{{$CellContext`exampleInd$$, 1, "example"}, {1, 
         2}}, {{$CellContext`g$$, 1, "algorithm step"}, 
         Dynamic[
          Range[
           $CellContext`hh[$CellContext`exampleInd$$]]], ControlType -> 
         SetterBar}, {{$CellContext`count$$, 0}, ControlType -> 
         None}, {{$CellContext`listOfGraphs$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfMatchings$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfEvents$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfExtraBlossoms$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfBlosAndAPs$$, {}}, ControlType -> 
         None}, {{$CellContext`blossomBases$$, {}}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`exampleInd$$, $CellContext`g$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{443., {262.34375, 267.65625}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`hh[1] = 11; $CellContext`hh[2] = 
       7; $CellContext`gr[
        1] = $CellContext`graph[{{{1, 2}}, {{2, 3}}, {{3, 4}}, {{3, 6}}, {{4, 
         5}}, {{5, 8}}, {{5, 10}}, {{6, 7}}, {{6, 14}}, {{7, 9}}, {{8, 9}}, {{
         10, 11}}, {{10, 28}}, {{11, 12}}, {{11, 13}}, {{12, 13}}, {{13, 
         16}}, {{14, 15}}, {{15, 18}}, {{15, 20}}, {{16, 17}}, {{17, 22}}, {{
         17, 24}}, {{18, 19}}, {{18, 26}}, {{19, 21}}, {{20, 21}}, {{22, 
         23}}, {{23, 26}}, {{24, 25}}, {{25, 27}}, {{26, 
         27}}}, CompressedData["
1:eJxTTMoPSmVmYGCQAWJGIGYCYtO4XZ48TUIO05y7c57/ZneoFlnn/vCXgMO8
98uPeZvzO6z6eMk3SYDbweNhFVCG30H59s+6rD1MDmkg8EzAYYdc6+vAHd/s
w/h0N83NF3aoz9pTMnmGoAMDGIg48DBpt4vd5HdYIxOVYh0v7sACVsjgUDpZ
AsiUgPI5HD6BrImQcnj+eyXQxnf2Mf2HvmrE8DiAnMekfd/++uICW67rLFBz
GRjswQ7/Zw9xzwv7uypsjVOdf9pLgg0Uhbh7goBDp2PC0wtKEg6FQN2LC7gc
QK459/2n/TcNkA0f4OYCXQ100Ad7oO+BHhV3COidnifUzOhgfd8fyJJ2AFtT
8t8eEj7SDi/VDDnWyPA4gHwvxyrnAHZuP6vDwVMLXbd95nRwAll7+6/9Ain9
uyptAg6HQdKH/tsvAsr+vcLhAHZG8GH7qxVAkzoE4P5aNvuIwoYiEQdjMPhp
PwfEfSHsAHbOgUf2HOCAPG8/8W2Nvek9AQcAR+a50g==
         "]]; $CellContext`gr[
        2] = $CellContext`graph[{{{1, 3}}, {{1, 9}}, {{1, 22}}, {{1, 26}}, {{
         1, 30}}, {{1, 31}}, {{2, 8}}, {{2, 26}}, {{2, 27}}, {{2, 32}}, {{2, 
         36}}, {{3, 11}}, {{3, 31}}, {{3, 37}}, {{4, 16}}, {{4, 17}}, {{4, 
         24}}, {{4, 33}}, {{5, 11}}, {{5, 15}}, {{5, 16}}, {{5, 18}}, {{5, 
         34}}, {{5, 37}}, {{6, 7}}, {{6, 13}}, {{6, 19}}, {{6, 28}}, {{6, 
         29}}, {{6, 36}}, {{7, 10}}, {{7, 13}}, {{7, 21}}, {{7, 28}}, {{8, 
         23}}, {{8, 32}}, {{9, 12}}, {{9, 13}}, {{9, 20}}, {{9, 22}}, {{9, 
         30}}, {{10, 13}}, {{10, 21}}, {{10, 22}}, {{10, 26}}, {{11, 16}}, {{
         11, 37}}, {{12, 15}}, {{12, 18}}, {{12, 20}}, {{12, 30}}, {{12, 
         31}}, {{13, 19}}, {{13, 20}}, {{13, 22}}, {{14, 17}}, {{14, 19}}, {{
         14, 25}}, {{14, 33}}, {{14, 35}}, {{15, 18}}, {{15, 31}}, {{15, 
         37}}, {{16, 17}}, {{16, 24}}, {{16, 25}}, {{16, 34}}, {{17, 25}}, {{
         17, 33}}, {{18, 19}}, {{18, 20}}, {{18, 34}}, {{19, 20}}, {{19, 
         25}}, {{19, 29}}, {{19, 34}}, {{19, 35}}, {{21, 26}}, {{21, 27}}, {{
         21, 28}}, {{22, 26}}, {{23, 24}}, {{23, 29}}, {{23, 32}}, {{23, 
         35}}, {{24, 33}}, {{24, 35}}, {{25, 34}}, {{26, 27}}, {{27, 28}}, {{
         27, 36}}, {{28, 36}}, {{29, 32}}, {{29, 35}}, {{29, 36}}, {{30, 
         31}}, {{31, 37}}, {{32, 36}}, {{33, 35}}}, CompressedData["
1:eJxTTMoPSmVmYGBQBWJGIGYCYqHmA6cWuh6zb30duEOu9b29yDr3h1Ui7/aL
3zz3PfjxVfuA3ul5Qs0v7H/VZe0pmfzE3gMou879pn3C0wtKt38+2w9Wvu6x
veWWE2X75q/aDxE/t39DUcbEtzX77d/V2JvG7bq4n+v64gJbruvo5u8/CLR9
2+e99mfPgMAD+zlHFIBaL+6XjUqxvu//0J4BDD5AaQaG+/4gB122B1sndd3e
GAw27z8NMubvFfvKl2qGHGvO2INcK8Fybz9Qkf5dlXv2kixhfLqbzqL7Zz/E
fTftQbb1Tn+0H6wt7BrUHRuh/tpl/yP48dLZRw7sVweaLhN1xL7QFuSjs/Yf
lh/zNu+8uR/iugf2F4G+Bxq9H6L+CdTdD/aDg3nb6/1o4b1/EdjZN+yBgQV0
yK39aOrtj4KcMfHhfrC1Kbeh+m7vP/xVI6b/0FX7TkdQiF/ev+rjJd8kgQv7
/6wEMS7YQ8Lpsb12uxgwpG/bL5sN8hDMfU/2fwIpjzgJ9e85+3nvQR55uh8i
f8ceEi9n91eDI6wFGk8Pof5/AHXnAftSkHa+p/ZePExAqy7aAwDlIDF5
         "]]; $CellContext`AdjacencyListsToEdges[
         Pattern[$CellContext`al, 
          Blank[]]] := Map[List, 
         Union[
          Map[Sort, 
           Flatten[
            ReplaceAll[
             MapIndexed[{
               Part[#2, 1], #}& , $CellContext`al], {
               Pattern[$CellContext`i, 
                Blank[Integer]], 
               Pattern[$CellContext`L, 
                Blank[List]]} :> 
             Table[{$CellContext`i, $CellContext`l}, {$CellContext`l, \
$CellContext`L}]], 1]]]]; $CellContext`FromAdjacencyListsSW[
         Pattern[$CellContext`al, 
          Blank[]]] := $CellContext`graph[
         $CellContext`AdjacencyListsToEdges[$CellContext`al], 
         Table[{{$CellContext`i, 0}}, {$CellContext`i, 
           Length[$CellContext`al]}]]; $CellContext`GraphToEdgeRules[
         Pattern[$CellContext`G, 
          Blank[]]] := ReplaceAll[
         Map[First, 
          Part[$CellContext`G, 1]], {
           Pattern[$CellContext`x, 
            Blank[Integer]], 
           Pattern[$CellContext`y, 
            
            Blank[]]} :> ($CellContext`x -> $CellContext`y)]; \
$CellContext`GraphToVertexRules[
         Pattern[$CellContext`G, 
          Blank[]]] := Module[{$CellContext`tt}, $CellContext`tt = Map[First, 
            Part[$CellContext`G, 2]]; Thread[Range[
             
             Length[$CellContext`tt]] -> $CellContext`tt]]; \
$CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Map[First, 
         Part[$CellContext`G, 1]]; $CellContext`V[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Length[
         Part[$CellContext`G, 2]]; $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`etemp, $CellContext`ee, $CellContext`missing}, \
$CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
              $CellContext`EdgesSW[$CellContext`G]], 
            Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
            Range[
             Length[
              Part[$CellContext`G, 2]]], 
            Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
            Join[$CellContext`etemp, 
             
             Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
           ReplaceAll[
            Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
              Blank[Integer], 
              Pattern[$CellContext`n, 
               
               Blank[]]} :> $CellContext`n], {{}} -> {}]]; \
$CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`seen, $CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g], $CellContext`st}, $CellContext`st = 
          1; $CellContext`match = 
          Part[$CellContext`ee, $CellContext`st]; $CellContext`seen[
            Blank[]] := False; $CellContext`seen[
            Part[$CellContext`match, 1]] = True; $CellContext`seen[
            Part[$CellContext`match, 2]] = True; Do[
           If[
            And[
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 1]]], 
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 2]]]], $CellContext`match = 
             Join[$CellContext`match, $CellContext`e]; $CellContext`seen[
               Part[$CellContext`e, 1]] = ($CellContext`seen[
                Part[$CellContext`e, 2]] = True)], {$CellContext`e, 
            Delete[$CellContext`ee, $CellContext`st]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]]; $CellContext`DoublePathToFlower[
         Pattern[$CellContext`doublePath, 
          Blank[]]] := 
       Module[{$CellContext`timesOccurred = 
          Tally[$CellContext`doublePath], $CellContext`twice, \
$CellContext`locations}, $CellContext`twice = 
          Select[$CellContext`timesOccurred, Part[#, 2] == 2& ]; 
         If[$CellContext`twice == {}, 
           Return[{{}, $CellContext`doublePath}]]; $CellContext`twice = 
          Part[$CellContext`twice, -1, 1]; $CellContext`locations = Flatten[
            Position[$CellContext`doublePath, $CellContext`twice]]; {
           Take[$CellContext`doublePath, Part[$CellContext`locations, 1] - 1], 
           Most[
            
            Take[$CellContext`doublePath, $CellContext`locations]]}]; \
$CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Blank[]] := 
       Condition[{"Stuck", {}}, Length[$CellContext`Gadj] <= 
         2]; $CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]]] := 
       Module[{$CellContext`parents, $CellContext`n, $CellContext`vertices, \
$CellContext`treeRoots, $CellContext`head, $CellContext`tail, $CellContext`Q, \
$CellContext`neighbors, $CellContext`novelNeighbors, $CellContext`vw = {}, \
$CellContext`evenQ, $CellContext`uncoveredNode = 
          0, $CellContext`v, $CellContext`doublePath}, $CellContext`n = 
          Length[$CellContext`Gadj] - 1; $CellContext`vertices = 
          Range[$CellContext`n]; $CellContext`parents = 
          Table[0, {$CellContext`n}]; $CellContext`treeRoots = 
          Select[$CellContext`vertices, Part[$CellContext`MV, #] == 
            0& ]; $CellContext`head = ($CellContext`tail = 0); While[If[
             
             And[$CellContext`head == $CellContext`tail, \
$CellContext`uncoveredNode == 
              0, $CellContext`vw == {}, $CellContext`treeRoots != {}], \
$CellContext`Q[$CellContext`tail] = (Part[$CellContext`parents, 
                 Part[$CellContext`treeRoots, 1]] = 
               Part[$CellContext`treeRoots, 1]); 
             Increment[$CellContext`tail]; $CellContext`evenQ[
                Part[$CellContext`treeRoots, 1]] = 
              True; $CellContext`treeRoots = Rest[$CellContext`treeRoots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`treeRoots != \
{}, $CellContext`vw == {}], $CellContext`v = \
$CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`neighbors = 
            Part[$CellContext`Gadj, $CellContext`v]; 
           If[$CellContext`evenQ[$CellContext`v] == True, 
             Do[
              Which[
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] == 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`uncoveredNode = $CellContext`w; Break[], 
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] != 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
               Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = False, 
               And[Part[$CellContext`parents, $CellContext`w] != 0, 
                $CellContext`evenQ[$CellContext`w]], $CellContext`vw = \
{$CellContext`v, $CellContext`w}; 
               Break[]], {$CellContext`w, $CellContext`neighbors}], 
             Do[If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] == 0], 
                Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
                Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = True; Break[]]; If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] != 0], 
                If[
                 Not[
                  $CellContext`evenQ[$CellContext`w]], $CellContext`vw = {
                    Part[$CellContext`MV, $CellContext`w], $CellContext`w}; 
                 Break[]]], {$CellContext`w, $CellContext`neighbors}]]]; 
         Which[$CellContext`uncoveredNode != 0, {"AugmentingPath", 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parents, #]& , \
$CellContext`uncoveredNode]]]}, $CellContext`vw != {}, {
           "Blossom", $CellContext`doublePath = Join[
               Reverse[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  Part[$CellContext`vw, 1]]]], 
               Most[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  
                  Part[$CellContext`vw, 
                   2]]]]]; \
$CellContext`DoublePathToFlower[$CellContext`doublePath]}, True, {
           "Stuck", {}}]]; $CellContext`ShrinkFlower[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], {
          Pattern[$CellContext`stem, 
           Blank[]], 
          Pattern[$CellContext`blossom, 
           Blank[]]}] := 
       Module[{$CellContext`Gadj1, $CellContext`mate, $CellContext`ns, \
$CellContext`stemBase, $CellContext`blossomNeighbors, \
$CellContext`blossomNeighborConnections}, $CellContext`Gadj1 = \
$CellContext`Gadj; $CellContext`mate = $CellContext`MV; $CellContext`stemBase = 
          Part[$CellContext`blossom, 1]; $CellContext`blossomNeighbors = 
          Complement[
            Apply[Union, 
             
             Part[$CellContext`Gadj1, $CellContext`blossom]], \
$CellContext`blossom]; Part[$CellContext`Gadj1, 
            Rest[$CellContext`blossom]] = {}; 
         Part[$CellContext`Gadj1, $CellContext`stemBase] = \
$CellContext`blossomNeighbors; Do[
           If[
            Not[
             MemberQ[
              
              Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], 
            PrependTo[
             
             Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], {$CellContext`bN, $CellContext`blossomNeighbors}]; \
$CellContext`Gadj1 = DeleteCases[$CellContext`Gadj1, 
            Apply[Alternatives, 
             Rest[$CellContext`blossom]], 
            Infinity]; $CellContext`blossomNeighborConnections = 
          Table[{$CellContext`b, 
             Complement[
              
              Part[$CellContext`Gadj, $CellContext`b], \
$CellContext`blossom]}, {$CellContext`b, $CellContext`blossom}]; 
         Part[$CellContext`Gadj1, -1] = {$CellContext`stem, \
$CellContext`blossomNeighborConnections}; $CellContext`ns = 
          Length[$CellContext`stem]; {$CellContext`Gadj1, $CellContext`mate}]; \
$CellContext`ExpandBlossomsAndChangeMatching[
         Pattern[$CellContext`Gadj1, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], 
         Pattern[$CellContext`augPath, 
          Blank[]]] := 
       Module[{$CellContext`Gadj, $CellContext`mate, $CellContext`stem, \
$CellContext`blossomConnectData, $CellContext`stemBase, $CellContext`place, \
$CellContext`blossom, $CellContext`blossomNeighbors, $CellContext`b, \
$CellContext`v, $CellContext`c, $CellContext`pathToAdd, \
$CellContext`matchingFlag, $CellContext`currVert, \
$CellContext`augmentingPath, $CellContext`position, \
$CellContext`nextInBlossom, $CellContext`pB, $CellContext`pC, \
$CellContext`basePositions}, $CellContext`Gadj = $CellContext`Gadj1; \
$CellContext`mate = $CellContext`MV; $CellContext`augmentingPath = \
$CellContext`augPath; If[$CellContext`augmentingPath == {}, 
           Return[{}]]; If[Part[$CellContext`Gadj, -1] == {}, 
           
           Return[$CellContext`augmentingPath]]; {$CellContext`stem, \
$CellContext`blossomConnectData} = 
          Part[$CellContext`Gadj, -1]; $CellContext`b = 
          Part[$CellContext`blossomConnectData, 1, 1]; If[
           
           MemberQ[$CellContext`augmentingPath, $CellContext`b], \
$CellContext`blossom = Table[
              
              First[$CellContext`i], {$CellContext`i, \
$CellContext`blossomConnectData}]; Do[$CellContext`place = Part[
                Position[$CellContext`blossom, 
                 First[$CellContext`i], 1, 1], 1, 1]; 
             Which[$CellContext`place == 1, Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, -1]}, $CellContext`place == 
               Length[$CellContext`blossom], Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}, True, 
               Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}]; 
             Part[$CellContext`Gadj, 
                First[$CellContext`i]] = Join[
                Part[$CellContext`Gadj, 
                 First[$CellContext`i]], 
                Last[$CellContext`i]]; If[Last[$CellContext`i] != {}, 
               Do[AppendTo[
                  Part[$CellContext`Gadj, $CellContext`j], 
                  First[$CellContext`i]]; $CellContext`basePositions = 
                 Position[
                   Part[$CellContext`Gadj, $CellContext`j], $CellContext`b, 1,
                    1]; Part[$CellContext`Gadj, $CellContext`j] = Delete[
                   
                   Part[$CellContext`Gadj, $CellContext`j], \
$CellContext`basePositions], {$CellContext`j, 
                 
                 Last[$CellContext`i]}]], {$CellContext`i, \
$CellContext`blossomConnectData}]; 
           If[Part[$CellContext`augmentingPath, 
               1] == $CellContext`b, $CellContext`c = 
              Part[$CellContext`augmentingPath, 2]; 
             Null, $CellContext`position = Part[
                Flatten[
                 Position[$CellContext`augmentingPath, $CellContext`b]], 1]; 
             If[Part[$CellContext`augmentingPath, $CellContext`position + 1] == 
               Part[$CellContext`stem, -1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position - 
                 1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position + 
                 1]]]; $CellContext`v = Part[
              Select[$CellContext`blossom, MemberQ[
                Part[$CellContext`Gadj, $CellContext`c], #]& ], 
              1]; $CellContext`pathToAdd = {$CellContext`v}; \
$CellContext`matchingFlag = True; $CellContext`currVert = $CellContext`v; 
           While[$CellContext`currVert != $CellContext`b, 
             If[$CellContext`matchingFlag, AppendTo[$CellContext`pathToAdd, 
                 
                 Part[$CellContext`mate, $CellContext`currVert]]; \
$CellContext`matchingFlag = False, $CellContext`nextInBlossom = Part[
                  Select[$CellContext`blossom, MemberQ[
                    Complement[
                    
                    Part[$CellContext`Gadj, $CellContext`currVert], \
$CellContext`pathToAdd], #]& ], 1]; 
               AppendTo[$CellContext`pathToAdd, $CellContext`nextInBlossom]; \
$CellContext`matchingFlag = True; Null]; $CellContext`currVert = 
              Part[$CellContext`pathToAdd, -1]; Null]; $CellContext`pathToAdd = 
            Most[$CellContext`pathToAdd]; $CellContext`pB = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`b]], 
              1]; $CellContext`pC = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`c]], 1]; 
           If[$CellContext`pB < $CellContext`pC, $CellContext`pathToAdd = 
              Reverse[$CellContext`pathToAdd]; $CellContext`augmentingPath = 
              Join[
                Part[$CellContext`augmentingPath, 
                 Span[1, $CellContext`pB]], $CellContext`pathToAdd, 
                Part[$CellContext`augmentingPath, 
                 Span[$CellContext`pC, -1]]], $CellContext`augmentingPath = 
             Join[
               Part[$CellContext`augmentingPath, 
                Span[1, $CellContext`pC]], $CellContext`pathToAdd, 
               Part[$CellContext`augmentingPath, 
                Span[$CellContext`pB, -1]]]]; 
           Return[$CellContext`augmentingPath], 
           Return[$CellContext`augmentingPath]]]; $CellContext`AugmentingPath[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`mateList, 
          Blank[]]] := 
       Module[{$CellContext`result}, $CellContext`result = \
$CellContext`AugmentingPathRecursive[
            Append[
             $CellContext`ToAdjacencyListsSW[$CellContext`G], {}], \
$CellContext`mateList]; $CellContext`result]; \
$CellContext`AugmentingPathRecursive[
         Pattern[$CellContext`GadjAug$, 
          Blank[]], 
         Pattern[$CellContext`mate$, 
          Blank[]]] := 
       Module[{$CellContext`shrunken$, $CellContext`augOrBlossom$, \
$CellContext`Hadj$, $CellContext`MM$, $CellContext`n$ = 
          Length[$CellContext`GadjAug$], $CellContext`newPath$, \
$CellContext`newMate$, $CellContext`trQ$, $CellContext`maxrec$}, \
$CellContext`maxrec$ = Infinity; $CellContext`trQ$ = 
          True; $CellContext`augOrBlossom$ = \
$CellContext`FindAugOrBlossom[$CellContext`GadjAug$, $CellContext`mate$]; 
         Increment[$CellContext`count$$]; \
$CellContext`mPrint[$CellContext`count$$]; 
         If[$CellContext`count$$ > $CellContext`maxrec$, 
           Return["Exceeded MaxRecursion"]]; 
         If[$CellContext`trQ$, 
           AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
           AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]; 
           AppendTo[$CellContext`listOfEvents$$, 
             Part[$CellContext`augOrBlossom$, 1]]; 
           AppendTo[$CellContext`listOfExtraBlossoms$$, {}]; 
           If[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
              Partition[
               Part[$CellContext`augOrBlossom$, 2], 2, 1]], 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
               Part[$CellContext`augOrBlossom$, 2]]; Null]]; 
         Which[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
           If[$CellContext`trQ$, 
             
             AppendTo[$CellContext`blossomBases$$, 
              0]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[$CellContext`GadjAug$, \
$CellContext`mate$, 
              Part[$CellContext`augOrBlossom$, 2]], 
           Part[$CellContext`augOrBlossom$, 1] === 
           "Stuck", $CellContext`newPath$ = {}; If[$CellContext`trQ$, 
             AppendTo[$CellContext`blossomBases$$, 0]], 
           Part[$CellContext`augOrBlossom$, 1] === "Blossom", 
           If[$CellContext`trQ$, AppendTo[$CellContext`blossomBases$$, 
               Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
             Null]; $CellContext`shrunken$ = \
$CellContext`ShrinkFlower[$CellContext`GadjAug$, $CellContext`mate$, 
              
              Part[$CellContext`augOrBlossom$, 
               2]]; $CellContext`newPath$ = \
$CellContext`AugmentingPathRecursive[
              Part[$CellContext`shrunken$, 1], 
              
              Part[$CellContext`shrunken$, 
               2]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[
              Part[$CellContext`shrunken$, 1], 
              Part[$CellContext`shrunken$, 2], $CellContext`newPath$]; 
           If[$CellContext`trQ$, 
             
             If[$CellContext`newPath$ != {}, 
              AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
              AppendTo[$CellContext`listOfEvents$$, "AugmentingPath"]; 
              AppendTo[$CellContext`listOfBlosAndAPs$$, 
                Partition[$CellContext`newPath$, 2, 1]]; 
              AppendTo[$CellContext`blossomBases$$, 
                Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
              AppendTo[$CellContext`listOfExtraBlossoms$$, 
                Part[$CellContext`augOrBlossom$, 2, 2]]; 
              AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]]]]; \
$CellContext`newPath$]; $CellContext`MaximumMatchingMK[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`graph$, $CellContext`matching$ = Table[0, {
             $CellContext`V[$CellContext`G$]}], $CellContext`augPath$ = {}, \
$CellContext`oldMatching$ = {}, $CellContext`matchingList$, \
$CellContext`trQ$, $CellContext`maxrec$, $CellContext`numAugPaths$}, \
$CellContext`graph$ = $CellContext`G$; $CellContext`count$$ = 
          0; $CellContext`maxrec$ = Infinity; $CellContext`trQ$ = True; 
         If[$CellContext`trQ$, $CellContext`listOfGraphs$$ = \
($CellContext`listOfMatchings$$ = ($CellContext`listOfEvents$$ = \
($CellContext`listOfBlosAndAPs$$ = ($CellContext`listOfExtraBlossoms$$ = \
($CellContext`blossomBases$$ = {}))))); $CellContext`numAugPaths$ = 
            0]; $CellContext`matchingList$ = \
$CellContext`MaximalMatchingSW[$CellContext`graph$]; 
         If[2 Length[$CellContext`matchingList$] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`matchingList$]]; $CellContext`mPrint[
           Length[$CellContext`matchingList$]]; 
         Do[Part[$CellContext`matching$, $CellContext`e] = 
           Reverse[$CellContext`e], {$CellContext`e, \
$CellContext`matchingList$}]; $CellContext`mPrint[
          "startingAugmentation"]; $CellContext`augPath$ = \
$CellContext`AugmentingPath[$CellContext`graph$, $CellContext`matching$]; \
$CellContext`mPrint[{
           "first augmentation done", (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; 
         If[$CellContext`augPath$ == {}, Do[
             If[$CellContext`i != 0, If[
                Not[
                 MemberQ[$CellContext`oldMatching$, {
                   
                   Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
                AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                  Part[$CellContext`matching$, $CellContext`i]}]]; 
              Null], {$CellContext`i, $CellContext`matching$}]; 
           If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`oldMatching$], 
           Do[
            If[
             EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i]] = 
              Part[$CellContext`augPath$, $CellContext`i - 1]; 
             Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i - 1]] = 
              Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
             1, 
             Length[$CellContext`augPath$]}]]; 
         While[True, $CellContext`mPrint[{
             "startingAugmentation", $CellContext`matching$}]; \
$CellContext`augPath$ = $CellContext`AugmentingPath[$CellContext`graph$, \
$CellContext`matching$]; If[$CellContext`augPath$ == {}, 
             Break[]]; Do[
             If[
              EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i]] = 
               Part[$CellContext`augPath$, $CellContext`i - 1]; 
              Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i - 1]] = 
               Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
              1, 
              Length[$CellContext`augPath$]}]]; 
         If[Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`r, 
                Blank[]], $CellContext`r > 0]] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[
             DeleteDuplicates[
              Map[Sort, 
               DeleteCases[
                Table[{$CellContext`i, 
                  
                  Part[$CellContext`matching$, $CellContext`i]}, \
{$CellContext`i, 
                  $CellContext`V[$CellContext`G$]}], {
                 Blank[], 0}]]]]]; $CellContext`mPrint[{
           "augmentation done", $CellContext`augPath$, \
$CellContext`matching$, (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; Do[
           If[$CellContext`i != 0, If[
              Not[
               MemberQ[$CellContext`oldMatching$, {
                 
                 Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
              AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                Part[$CellContext`matching$, $CellContext`i]}]]; 
            Null], {$CellContext`i, $CellContext`matching$}]; 
         If[$CellContext`trQ$, 
           Print[
            StringForm[
            "Total number of recursion calls: ``", $CellContext`count$$]]]; \
$RecursionLimit = 
          256; $CellContext`oldMatching$]; $CellContext`BlossomPlotData[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`aGraph$, $CellContext`graphToShow$, \
$CellContext`matching$, $CellContext`event$, $CellContext`listOfInterest$, \
$CellContext`color$, $CellContext`blosOrAP$, $CellContext`im$, \
$CellContext`locs$, $CellContext`blosBase$, $CellContext`gAdjTotal$, \
$CellContext`extraBlossom$, $CellContext`verts$}, \
$CellContext`MaximumMatchingMK[$CellContext`G$]; If[$CellContext`count$$ == 0, 
           Return[
           "Cannot show graph, no recursive calls"]]; $CellContext`locs$ = 
          Map[First, 
            Part[$CellContext`G$, 2]]; PrependTo[$CellContext`listOfGraphs$$, 
           Part[$CellContext`listOfGraphs$$, 1]]; 
         PrependTo[$CellContext`listOfMatchings$$, 
           Part[$CellContext`listOfMatchings$$, 1]]; 
         PrependTo[$CellContext`listOfEvents$$, "Start"]; 
         PrependTo[$CellContext`listOfBlosAndAPs$$, {}]; 
         PrependTo[$CellContext`blossomBases$$, 0]; 
         PrependTo[$CellContext`listOfExtraBlossoms$$, {}]; \
{$CellContext`listOfGraphs$$, $CellContext`listOfMatchings$$, \
$CellContext`listOfEvents$$, $CellContext`listOfBlosAndAPs$$, \
$CellContext`blossomBases$$, $CellContext`listOfExtraBlossoms$$, \
$CellContext`verts$ = Map[First, 
             Part[$CellContext`G$, 2]], {{
             Min[
              Map[First, $CellContext`verts$]], 
             Max[
              Map[First, $CellContext`verts$]]}, {
             Min[
              Map[Last, $CellContext`verts$]], 
             Max[
              Map[Last, $CellContext`verts$]]}}}]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->596858930],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blossomBases$$ = {0, 9, 11, 15, 9, 0, 9, 15,
     11, 9, 0}, $CellContext`count$$ = 6, $CellContext`exampleInd$$ = 
    1, $CellContext`g$$ = 
    10, $CellContext`listOfBlosAndAPs$$ = {{}, {{}, {9, 7, 6, 3, 4, 5, 8}}, {{
      9, 10}, {11, 12, 13}}, {{9, 14}, {15, 18, 19, 21, 20}}, {{}, {9, 10, 11,
       16, 17, 24, 25, 27, 26, 15, 14}}, {{9, 28}}, {{9, 14}, {14, 15}, {15, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 11}, {11, 
     10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 
     18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 
     11}, {11, 10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 
     19}, {19, 18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 
     16}, {16, 13}, {13, 12}, {12, 11}, {11, 10}, {10, 28}}, {{9, 7}, {7, 
     6}, {6, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 18}, {18, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 13}, {13, 
     12}, {12, 11}, {11, 10}, {10, 28}}, {}}, $CellContext`listOfEvents$$ = {
    "Start", "Blossom", "Blossom", "Blossom", "Blossom", "AugmentingPath", 
     "AugmentingPath", "AugmentingPath", "AugmentingPath", "AugmentingPath", 
     "Stuck"}, $CellContext`listOfExtraBlossoms$$ = {{}, {}, {}, {}, {}, {}, {
     9, 10, 11, 16, 17, 24, 25, 27, 26, 15, 14}, {15, 18, 19, 21, 20}, {11, 
     12, 13}, {9, 7, 6, 3, 4, 5, 
     8}, {}}, $CellContext`listOfGraphs$$ = {{{2}, {1, 3}, {2, 4, 6}, {3, 
      5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 
      12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 
      22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 
      26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 
      3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {
      5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 
      20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 
      20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 
      17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 
      23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {
      15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 
      25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 22, 23, 
      28}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {9, 23}, {9, 
      22}, {}, {}, {}, {}, {
      9}, {{}, {{9, {2}}, {10, {28}}, {11, {}}, {16, {}}, {17, {22}}, {
        24, {}}, {25, {}}, {27, {}}, {26, {23}}, {15, {}}, {14, {}}}}}, {{
      2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {15, 19, 
      26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 
      27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {
      6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 
      16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 
      21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 
      23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 
      10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}}, $CellContext`listOfMatchings$$ = CompressedData["
1:eJxTTMoPSmJiYGDgBmIZIGZiZGHmYGdjZeDm4uXh5xMUEBYSFREXk5SQlhqV
4+NkZZfh4RZgE+GVkBLlFxYXE5QWkuQCAJ04EdA=
    "], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`exampleInd$$], 1, "example"}, {1, 2}}, {{
       Hold[$CellContext`g$$], 10, "algorithm step"}, 
      Dynamic[
       Range[
        $CellContext`hh[$CellContext`exampleInd$$]]]}, {{
       Hold[$CellContext`count$$], 0}}, {{
       Hold[$CellContext`listOfGraphs$$], {}}}, {{
       Hold[$CellContext`listOfMatchings$$], {}}}, {{
       Hold[$CellContext`listOfEvents$$], {}}}, {{
       Hold[$CellContext`listOfExtraBlossoms$$], {}}}, {{
       Hold[$CellContext`listOfBlosAndAPs$$], {}}}, {{
       Hold[$CellContext`blossomBases$$], {}}}}, Typeset`size$$ = {
    400., {205.84375, 211.15625}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`exampleInd$7953$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`blossomBases$$ = {}, $CellContext`count$$ = 
        0, $CellContext`exampleInd$$ = 1, $CellContext`g$$ = 
        10, $CellContext`listOfBlosAndAPs$$ = {}, $CellContext`listOfEvents$$ = \
{}, $CellContext`listOfExtraBlossoms$$ = {}, $CellContext`listOfGraphs$$ = \
{}, $CellContext`listOfMatchings$$ = {}}, "ControllerVariables" :> {
        Hold[$CellContext`exampleInd$$, $CellContext`exampleInd$7953$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`gra$, $CellContext`aGraph$, $CellContext`event$, \
$CellContext`blosBase$, $CellContext`locs$, $CellContext`matching$, \
$CellContext`blosOrAP$, $CellContext`extraBlossom$, \
$CellContext`graphToShow$, $CellContext`listOfInterest$, $CellContext`color$, \
$CellContext`isols$, $CellContext`data$}, $CellContext`g$$ = 
         Min[$CellContext`g$$, 
           $CellContext`hh[$CellContext`exampleInd$$]]; $CellContext`gra$ = \
$CellContext`gr[$CellContext`exampleInd$$]; $CellContext`locs$ = Map[First, 
           
           Part[$CellContext`gra$, 
            2]]; $CellContext`data$ = \
$CellContext`BlossomPlotData[$CellContext`gra$]; $CellContext`aGraph$ = 
         Part[$CellContext`data$, 
           1, $CellContext`g$$]; $CellContext`matching$ = 
         Part[$CellContext`data$, 2, $CellContext`g$$]; $CellContext`event$ = 
         Part[$CellContext`data$, 
           3, $CellContext`g$$]; $CellContext`blosOrAP$ = 
         Part[$CellContext`data$, 
           4, $CellContext`g$$]; $CellContext`blosBase$ = 
         Part[$CellContext`data$, 
           5, $CellContext`g$$]; $CellContext`extraBlossom$ = 
         Part[$CellContext`data$, 
           6, $CellContext`g$$]; $CellContext`graphToShow$ = \
$CellContext`FromAdjacencyListsSW[
           Part[$CellContext`aGraph$, 
            Span[
            1, -2]]]; {$CellContext`listOfInterest$, $CellContext`color$} = 
         Which[$CellContext`event$ == "Blossom", {
            Part[$CellContext`blosOrAP$, 2], 
            Lighter[
             Lighter[Blue]]}, $CellContext`event$ == 
           "AugmentingPath", {$CellContext`blosOrAP$, 
            Yellow}, $CellContext`event$ == "Stuck", {{}, Yellow}, 
           True, {{}, {}}]; $CellContext`isols$ = Flatten[
           Position[
            Take[$CellContext`aGraph$, 
             $CellContext`V[$CellContext`gra$]], {}]]; Column[{
           Which[$CellContext`event$ === "Stuck", 
            Style[
             StringForm[
             "Matching augmented by one edge; maximum matching has `` edges.",
               Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Blossom", 
            Style[
             StringForm[
             "Blossom found; shrink it and look for augmenting path.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], 
            
            And[$CellContext`event$ === "AugmentingPath", $CellContext`g$$ < 
             Length[$CellContext`listOfGraphs$$] - 1], 
            Style[
             StringForm[
             "Augmenting path found; expand it through the blossom.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "AugmentingPath", 
            Style[
             StringForm[
             "Augmenting path found in original graph; augment the \
matching.", $CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Start", 
            Style[
             StringForm[
             "A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.", 
              $CellContext`V[$CellContext`gra$], Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"]], 
           Show[
            Graphics[{{
               If[$CellContext`event$ === "Blossom", {
                 EdgeForm[{
                   Thickness[0.01], 
                   Darker[Blue]}], 
                 FaceForm[
                  Lighter[
                   Lighter[Blue]]], 
                 Polygon[
                  
                  Part[$CellContext`locs$, $CellContext`listOfInterest$]]}, \
{}]}, 
              If[$CellContext`event$ === "AugmentingPath", {
                EdgeForm[{
                  Thickness[0.01], 
                  Darker[Blue]}], 
                FaceForm[
                 Lighter[Blue]], 
                Polygon[
                 
                 Part[$CellContext`locs$, $CellContext`extraBlossom$]]}, \
{}]}], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[
                And[$CellContext`event$ === "AugmentingPath", 
                 Or[
                  MemberQ[$CellContext`listOfInterest$, #2], 
                  MemberQ[$CellContext`listOfInterest$, 
                   Reverse[#2]]]], {
                 Lighter[Green], 
                 Thickness[0.02], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {
                 GrayLevel[0.7], 
                 Thickness[0.004], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             Join[
              $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
              Thread[$CellContext`isols$ -> $CellContext`isols$]], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {}, 
                If[$CellContext`event$ === "Stuck", {Blue, 
                  Thickness[0.013], 
                  Line[#]}, {Red, 
                  Thickness[0.01], 
                  Line[#]}]]}& ), SelfLoopStyle -> None, 
             VertexRenderingFunction -> (Which[
               And[#2 == $CellContext`blosBase$, 
                
                Or[$CellContext`event$ === "Blossom", $CellContext`event$ === 
                 "AugmentingPath"]], {
                EdgeForm[{Black, 
                  Thickness[0.002]}], 
                FaceForm[Yellow], 
                
                Disk[#, 
                 0.022 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], 
                Text[
                 Style["B", Bold], #]}, 
               MemberQ[$CellContext`listOfInterest$, #2], {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[$CellContext`color$; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}, True, {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[Yellow; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}]& )], PlotLabel -> None, 
            PlotRange -> Part[$CellContext`data$, -1], Frame -> Not[True], 
            PlotRangePadding -> 0.15, FrameTicks -> True, 
            ImageSize -> {400, 400}]}]], 
      "Specifications" :> {{{$CellContext`exampleInd$$, 1, "example"}, {1, 
         2}}, {{$CellContext`g$$, 10, "algorithm step"}, 
         Dynamic[
          Range[
           $CellContext`hh[$CellContext`exampleInd$$]]], ControlType -> 
         SetterBar}, {{$CellContext`count$$, 0}, ControlType -> 
         None}, {{$CellContext`listOfGraphs$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfMatchings$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfEvents$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfExtraBlossoms$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfBlosAndAPs$$, {}}, ControlType -> 
         None}, {{$CellContext`blossomBases$$, {}}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`exampleInd$$, $CellContext`g$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{443., {262.34375, 267.65625}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`hh[1] = 11; $CellContext`hh[2] = 
       7; $CellContext`gr[
        1] = $CellContext`graph[{{{1, 2}}, {{2, 3}}, {{3, 4}}, {{3, 6}}, {{4, 
         5}}, {{5, 8}}, {{5, 10}}, {{6, 7}}, {{6, 14}}, {{7, 9}}, {{8, 9}}, {{
         10, 11}}, {{10, 28}}, {{11, 12}}, {{11, 13}}, {{12, 13}}, {{13, 
         16}}, {{14, 15}}, {{15, 18}}, {{15, 20}}, {{16, 17}}, {{17, 22}}, {{
         17, 24}}, {{18, 19}}, {{18, 26}}, {{19, 21}}, {{20, 21}}, {{22, 
         23}}, {{23, 26}}, {{24, 25}}, {{25, 27}}, {{26, 
         27}}}, CompressedData["
1:eJxTTMoPSmVmYGCQAWJGIGYCYtO4XZ48TUIO05y7c57/ZneoFlnn/vCXgMO8
98uPeZvzO6z6eMk3SYDbweNhFVCG30H59s+6rD1MDmkg8EzAYYdc6+vAHd/s
w/h0N83NF3aoz9pTMnmGoAMDGIg48DBpt4vd5HdYIxOVYh0v7sACVsjgUDpZ
AsiUgPI5HD6BrImQcnj+eyXQxnf2Mf2HvmrE8DiAnMekfd/++uICW67rLFBz
GRjswQ7/Zw9xzwv7uypsjVOdf9pLgg0Uhbh7goBDp2PC0wtKEg6FQN2LC7gc
QK459/2n/TcNkA0f4OYCXQ100Ad7oO+BHhV3COidnifUzOhgfd8fyJJ2AFtT
8t8eEj7SDi/VDDnWyPA4gHwvxyrnAHZuP6vDwVMLXbd95nRwAll7+6/9Ain9
uyptAg6HQdKH/tsvAsr+vcLhAHZG8GH7qxVAkzoE4P5aNvuIwoYiEQdjMPhp
PwfEfSHsAHbOgUf2HOCAPG8/8W2Nvek9AQcAR+a50g==
         "]]; $CellContext`gr[
        2] = $CellContext`graph[{{{1, 3}}, {{1, 9}}, {{1, 22}}, {{1, 26}}, {{
         1, 30}}, {{1, 31}}, {{2, 8}}, {{2, 26}}, {{2, 27}}, {{2, 32}}, {{2, 
         36}}, {{3, 11}}, {{3, 31}}, {{3, 37}}, {{4, 16}}, {{4, 17}}, {{4, 
         24}}, {{4, 33}}, {{5, 11}}, {{5, 15}}, {{5, 16}}, {{5, 18}}, {{5, 
         34}}, {{5, 37}}, {{6, 7}}, {{6, 13}}, {{6, 19}}, {{6, 28}}, {{6, 
         29}}, {{6, 36}}, {{7, 10}}, {{7, 13}}, {{7, 21}}, {{7, 28}}, {{8, 
         23}}, {{8, 32}}, {{9, 12}}, {{9, 13}}, {{9, 20}}, {{9, 22}}, {{9, 
         30}}, {{10, 13}}, {{10, 21}}, {{10, 22}}, {{10, 26}}, {{11, 16}}, {{
         11, 37}}, {{12, 15}}, {{12, 18}}, {{12, 20}}, {{12, 30}}, {{12, 
         31}}, {{13, 19}}, {{13, 20}}, {{13, 22}}, {{14, 17}}, {{14, 19}}, {{
         14, 25}}, {{14, 33}}, {{14, 35}}, {{15, 18}}, {{15, 31}}, {{15, 
         37}}, {{16, 17}}, {{16, 24}}, {{16, 25}}, {{16, 34}}, {{17, 25}}, {{
         17, 33}}, {{18, 19}}, {{18, 20}}, {{18, 34}}, {{19, 20}}, {{19, 
         25}}, {{19, 29}}, {{19, 34}}, {{19, 35}}, {{21, 26}}, {{21, 27}}, {{
         21, 28}}, {{22, 26}}, {{23, 24}}, {{23, 29}}, {{23, 32}}, {{23, 
         35}}, {{24, 33}}, {{24, 35}}, {{25, 34}}, {{26, 27}}, {{27, 28}}, {{
         27, 36}}, {{28, 36}}, {{29, 32}}, {{29, 35}}, {{29, 36}}, {{30, 
         31}}, {{31, 37}}, {{32, 36}}, {{33, 35}}}, CompressedData["
1:eJxTTMoPSmVmYGBQBWJGIGYCYqHmA6cWuh6zb30duEOu9b29yDr3h1Ui7/aL
3zz3PfjxVfuA3ul5Qs0v7H/VZe0pmfzE3gMou879pn3C0wtKt38+2w9Wvu6x
veWWE2X75q/aDxE/t39DUcbEtzX77d/V2JvG7bq4n+v64gJbruvo5u8/CLR9
2+e99mfPgMAD+zlHFIBaL+6XjUqxvu//0J4BDD5AaQaG+/4gB122B1sndd3e
GAw27z8NMubvFfvKl2qGHGvO2INcK8Fybz9Qkf5dlXv2kixhfLqbzqL7Zz/E
fTftQbb1Tn+0H6wt7BrUHRuh/tpl/yP48dLZRw7sVweaLhN1xL7QFuSjs/Yf
lh/zNu+8uR/iugf2F4G+Bxq9H6L+CdTdD/aDg3nb6/1o4b1/EdjZN+yBgQV0
yK39aOrtj4KcMfHhfrC1Kbeh+m7vP/xVI6b/0FX7TkdQiF/ev+rjJd8kgQv7
/6wEMS7YQ8Lpsb12uxgwpG/bL5sN8hDMfU/2fwIpjzgJ9e85+3nvQR55uh8i
f8ceEi9n91eDI6wFGk8Pof5/AHXnAftSkHa+p/ZePExAqy7aAwDlIDF5
         "]]; $CellContext`AdjacencyListsToEdges[
         Pattern[$CellContext`al, 
          Blank[]]] := Map[List, 
         Union[
          Map[Sort, 
           Flatten[
            ReplaceAll[
             MapIndexed[{
               Part[#2, 1], #}& , $CellContext`al], {
               Pattern[$CellContext`i, 
                Blank[Integer]], 
               Pattern[$CellContext`L, 
                Blank[List]]} :> 
             Table[{$CellContext`i, $CellContext`l}, {$CellContext`l, \
$CellContext`L}]], 1]]]]; $CellContext`FromAdjacencyListsSW[
         Pattern[$CellContext`al, 
          Blank[]]] := $CellContext`graph[
         $CellContext`AdjacencyListsToEdges[$CellContext`al], 
         Table[{{$CellContext`i, 0}}, {$CellContext`i, 
           Length[$CellContext`al]}]]; $CellContext`GraphToEdgeRules[
         Pattern[$CellContext`G, 
          Blank[]]] := ReplaceAll[
         Map[First, 
          Part[$CellContext`G, 1]], {
           Pattern[$CellContext`x, 
            Blank[Integer]], 
           Pattern[$CellContext`y, 
            
            Blank[]]} :> ($CellContext`x -> $CellContext`y)]; \
$CellContext`GraphToVertexRules[
         Pattern[$CellContext`G, 
          Blank[]]] := Module[{$CellContext`tt}, $CellContext`tt = Map[First, 
            Part[$CellContext`G, 2]]; Thread[Range[
             
             Length[$CellContext`tt]] -> $CellContext`tt]]; \
$CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Map[First, 
         Part[$CellContext`G, 1]]; $CellContext`V[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Length[
         Part[$CellContext`G, 2]]; $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`etemp, $CellContext`ee, $CellContext`missing}, \
$CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
              $CellContext`EdgesSW[$CellContext`G]], 
            Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
            Range[
             Length[
              Part[$CellContext`G, 2]]], 
            Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
            Join[$CellContext`etemp, 
             
             Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
           ReplaceAll[
            Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
              Blank[Integer], 
              Pattern[$CellContext`n, 
               
               Blank[]]} :> $CellContext`n], {{}} -> {}]]; \
$CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`seen, $CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g], $CellContext`st}, $CellContext`st = 
          1; $CellContext`match = 
          Part[$CellContext`ee, $CellContext`st]; $CellContext`seen[
            Blank[]] := False; $CellContext`seen[
            Part[$CellContext`match, 1]] = True; $CellContext`seen[
            Part[$CellContext`match, 2]] = True; Do[
           If[
            And[
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 1]]], 
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 2]]]], $CellContext`match = 
             Join[$CellContext`match, $CellContext`e]; $CellContext`seen[
               Part[$CellContext`e, 1]] = ($CellContext`seen[
                Part[$CellContext`e, 2]] = True)], {$CellContext`e, 
            Delete[$CellContext`ee, $CellContext`st]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]]; $CellContext`DoublePathToFlower[
         Pattern[$CellContext`doublePath, 
          Blank[]]] := 
       Module[{$CellContext`timesOccurred = 
          Tally[$CellContext`doublePath], $CellContext`twice, \
$CellContext`locations}, $CellContext`twice = 
          Select[$CellContext`timesOccurred, Part[#, 2] == 2& ]; 
         If[$CellContext`twice == {}, 
           Return[{{}, $CellContext`doublePath}]]; $CellContext`twice = 
          Part[$CellContext`twice, -1, 1]; $CellContext`locations = Flatten[
            Position[$CellContext`doublePath, $CellContext`twice]]; {
           Take[$CellContext`doublePath, Part[$CellContext`locations, 1] - 1], 
           Most[
            
            Take[$CellContext`doublePath, $CellContext`locations]]}]; \
$CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Blank[]] := 
       Condition[{"Stuck", {}}, Length[$CellContext`Gadj] <= 
         2]; $CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]]] := 
       Module[{$CellContext`parents, $CellContext`n, $CellContext`vertices, \
$CellContext`treeRoots, $CellContext`head, $CellContext`tail, $CellContext`Q, \
$CellContext`neighbors, $CellContext`novelNeighbors, $CellContext`vw = {}, \
$CellContext`evenQ, $CellContext`uncoveredNode = 
          0, $CellContext`v, $CellContext`doublePath}, $CellContext`n = 
          Length[$CellContext`Gadj] - 1; $CellContext`vertices = 
          Range[$CellContext`n]; $CellContext`parents = 
          Table[0, {$CellContext`n}]; $CellContext`treeRoots = 
          Select[$CellContext`vertices, Part[$CellContext`MV, #] == 
            0& ]; $CellContext`head = ($CellContext`tail = 0); While[If[
             
             And[$CellContext`head == $CellContext`tail, \
$CellContext`uncoveredNode == 
              0, $CellContext`vw == {}, $CellContext`treeRoots != {}], \
$CellContext`Q[$CellContext`tail] = (Part[$CellContext`parents, 
                 Part[$CellContext`treeRoots, 1]] = 
               Part[$CellContext`treeRoots, 1]); 
             Increment[$CellContext`tail]; $CellContext`evenQ[
                Part[$CellContext`treeRoots, 1]] = 
              True; $CellContext`treeRoots = Rest[$CellContext`treeRoots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`treeRoots != \
{}, $CellContext`vw == {}], $CellContext`v = \
$CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`neighbors = 
            Part[$CellContext`Gadj, $CellContext`v]; 
           If[$CellContext`evenQ[$CellContext`v] == True, 
             Do[
              Which[
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] == 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`uncoveredNode = $CellContext`w; Break[], 
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] != 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
               Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = False, 
               And[Part[$CellContext`parents, $CellContext`w] != 0, 
                $CellContext`evenQ[$CellContext`w]], $CellContext`vw = \
{$CellContext`v, $CellContext`w}; 
               Break[]], {$CellContext`w, $CellContext`neighbors}], 
             Do[If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] == 0], 
                Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
                Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = True; Break[]]; If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] != 0], 
                If[
                 Not[
                  $CellContext`evenQ[$CellContext`w]], $CellContext`vw = {
                    Part[$CellContext`MV, $CellContext`w], $CellContext`w}; 
                 Break[]]], {$CellContext`w, $CellContext`neighbors}]]]; 
         Which[$CellContext`uncoveredNode != 0, {"AugmentingPath", 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parents, #]& , \
$CellContext`uncoveredNode]]]}, $CellContext`vw != {}, {
           "Blossom", $CellContext`doublePath = Join[
               Reverse[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  Part[$CellContext`vw, 1]]]], 
               Most[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  
                  Part[$CellContext`vw, 
                   2]]]]]; \
$CellContext`DoublePathToFlower[$CellContext`doublePath]}, True, {
           "Stuck", {}}]]; $CellContext`ShrinkFlower[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], {
          Pattern[$CellContext`stem, 
           Blank[]], 
          Pattern[$CellContext`blossom, 
           Blank[]]}] := 
       Module[{$CellContext`Gadj1, $CellContext`mate, $CellContext`ns, \
$CellContext`stemBase, $CellContext`blossomNeighbors, \
$CellContext`blossomNeighborConnections}, $CellContext`Gadj1 = \
$CellContext`Gadj; $CellContext`mate = $CellContext`MV; $CellContext`stemBase = 
          Part[$CellContext`blossom, 1]; $CellContext`blossomNeighbors = 
          Complement[
            Apply[Union, 
             
             Part[$CellContext`Gadj1, $CellContext`blossom]], \
$CellContext`blossom]; Part[$CellContext`Gadj1, 
            Rest[$CellContext`blossom]] = {}; 
         Part[$CellContext`Gadj1, $CellContext`stemBase] = \
$CellContext`blossomNeighbors; Do[
           If[
            Not[
             MemberQ[
              
              Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], 
            PrependTo[
             
             Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], {$CellContext`bN, $CellContext`blossomNeighbors}]; \
$CellContext`Gadj1 = DeleteCases[$CellContext`Gadj1, 
            Apply[Alternatives, 
             Rest[$CellContext`blossom]], 
            Infinity]; $CellContext`blossomNeighborConnections = 
          Table[{$CellContext`b, 
             Complement[
              
              Part[$CellContext`Gadj, $CellContext`b], \
$CellContext`blossom]}, {$CellContext`b, $CellContext`blossom}]; 
         Part[$CellContext`Gadj1, -1] = {$CellContext`stem, \
$CellContext`blossomNeighborConnections}; $CellContext`ns = 
          Length[$CellContext`stem]; {$CellContext`Gadj1, $CellContext`mate}]; \
$CellContext`ExpandBlossomsAndChangeMatching[
         Pattern[$CellContext`Gadj1, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], 
         Pattern[$CellContext`augPath, 
          Blank[]]] := 
       Module[{$CellContext`Gadj, $CellContext`mate, $CellContext`stem, \
$CellContext`blossomConnectData, $CellContext`stemBase, $CellContext`place, \
$CellContext`blossom, $CellContext`blossomNeighbors, $CellContext`b, \
$CellContext`v, $CellContext`c, $CellContext`pathToAdd, \
$CellContext`matchingFlag, $CellContext`currVert, \
$CellContext`augmentingPath, $CellContext`position, \
$CellContext`nextInBlossom, $CellContext`pB, $CellContext`pC, \
$CellContext`basePositions}, $CellContext`Gadj = $CellContext`Gadj1; \
$CellContext`mate = $CellContext`MV; $CellContext`augmentingPath = \
$CellContext`augPath; If[$CellContext`augmentingPath == {}, 
           Return[{}]]; If[Part[$CellContext`Gadj, -1] == {}, 
           
           Return[$CellContext`augmentingPath]]; {$CellContext`stem, \
$CellContext`blossomConnectData} = 
          Part[$CellContext`Gadj, -1]; $CellContext`b = 
          Part[$CellContext`blossomConnectData, 1, 1]; If[
           
           MemberQ[$CellContext`augmentingPath, $CellContext`b], \
$CellContext`blossom = Table[
              
              First[$CellContext`i], {$CellContext`i, \
$CellContext`blossomConnectData}]; Do[$CellContext`place = Part[
                Position[$CellContext`blossom, 
                 First[$CellContext`i], 1, 1], 1, 1]; 
             Which[$CellContext`place == 1, Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, -1]}, $CellContext`place == 
               Length[$CellContext`blossom], Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}, True, 
               Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}]; 
             Part[$CellContext`Gadj, 
                First[$CellContext`i]] = Join[
                Part[$CellContext`Gadj, 
                 First[$CellContext`i]], 
                Last[$CellContext`i]]; If[Last[$CellContext`i] != {}, 
               Do[AppendTo[
                  Part[$CellContext`Gadj, $CellContext`j], 
                  First[$CellContext`i]]; $CellContext`basePositions = 
                 Position[
                   Part[$CellContext`Gadj, $CellContext`j], $CellContext`b, 1,
                    1]; Part[$CellContext`Gadj, $CellContext`j] = Delete[
                   
                   Part[$CellContext`Gadj, $CellContext`j], \
$CellContext`basePositions], {$CellContext`j, 
                 
                 Last[$CellContext`i]}]], {$CellContext`i, \
$CellContext`blossomConnectData}]; 
           If[Part[$CellContext`augmentingPath, 
               1] == $CellContext`b, $CellContext`c = 
              Part[$CellContext`augmentingPath, 2]; 
             Null, $CellContext`position = Part[
                Flatten[
                 Position[$CellContext`augmentingPath, $CellContext`b]], 1]; 
             If[Part[$CellContext`augmentingPath, $CellContext`position + 1] == 
               Part[$CellContext`stem, -1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position - 
                 1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position + 
                 1]]]; $CellContext`v = Part[
              Select[$CellContext`blossom, MemberQ[
                Part[$CellContext`Gadj, $CellContext`c], #]& ], 
              1]; $CellContext`pathToAdd = {$CellContext`v}; \
$CellContext`matchingFlag = True; $CellContext`currVert = $CellContext`v; 
           While[$CellContext`currVert != $CellContext`b, 
             If[$CellContext`matchingFlag, AppendTo[$CellContext`pathToAdd, 
                 
                 Part[$CellContext`mate, $CellContext`currVert]]; \
$CellContext`matchingFlag = False, $CellContext`nextInBlossom = Part[
                  Select[$CellContext`blossom, MemberQ[
                    Complement[
                    
                    Part[$CellContext`Gadj, $CellContext`currVert], \
$CellContext`pathToAdd], #]& ], 1]; 
               AppendTo[$CellContext`pathToAdd, $CellContext`nextInBlossom]; \
$CellContext`matchingFlag = True; Null]; $CellContext`currVert = 
              Part[$CellContext`pathToAdd, -1]; Null]; $CellContext`pathToAdd = 
            Most[$CellContext`pathToAdd]; $CellContext`pB = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`b]], 
              1]; $CellContext`pC = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`c]], 1]; 
           If[$CellContext`pB < $CellContext`pC, $CellContext`pathToAdd = 
              Reverse[$CellContext`pathToAdd]; $CellContext`augmentingPath = 
              Join[
                Part[$CellContext`augmentingPath, 
                 Span[1, $CellContext`pB]], $CellContext`pathToAdd, 
                Part[$CellContext`augmentingPath, 
                 Span[$CellContext`pC, -1]]], $CellContext`augmentingPath = 
             Join[
               Part[$CellContext`augmentingPath, 
                Span[1, $CellContext`pC]], $CellContext`pathToAdd, 
               Part[$CellContext`augmentingPath, 
                Span[$CellContext`pB, -1]]]]; 
           Return[$CellContext`augmentingPath], 
           Return[$CellContext`augmentingPath]]]; $CellContext`AugmentingPath[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`mateList, 
          Blank[]]] := 
       Module[{$CellContext`result}, $CellContext`result = \
$CellContext`AugmentingPathRecursive[
            Append[
             $CellContext`ToAdjacencyListsSW[$CellContext`G], {}], \
$CellContext`mateList]; $CellContext`result]; \
$CellContext`AugmentingPathRecursive[
         Pattern[$CellContext`GadjAug$, 
          Blank[]], 
         Pattern[$CellContext`mate$, 
          Blank[]]] := 
       Module[{$CellContext`shrunken$, $CellContext`augOrBlossom$, \
$CellContext`Hadj$, $CellContext`MM$, $CellContext`n$ = 
          Length[$CellContext`GadjAug$], $CellContext`newPath$, \
$CellContext`newMate$, $CellContext`trQ$, $CellContext`maxrec$}, \
$CellContext`maxrec$ = Infinity; $CellContext`trQ$ = 
          True; $CellContext`augOrBlossom$ = \
$CellContext`FindAugOrBlossom[$CellContext`GadjAug$, $CellContext`mate$]; 
         Increment[$CellContext`count$$]; \
$CellContext`mPrint[$CellContext`count$$]; 
         If[$CellContext`count$$ > $CellContext`maxrec$, 
           Return["Exceeded MaxRecursion"]]; 
         If[$CellContext`trQ$, 
           AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
           AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]; 
           AppendTo[$CellContext`listOfEvents$$, 
             Part[$CellContext`augOrBlossom$, 1]]; 
           AppendTo[$CellContext`listOfExtraBlossoms$$, {}]; 
           If[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
              Partition[
               Part[$CellContext`augOrBlossom$, 2], 2, 1]], 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
               Part[$CellContext`augOrBlossom$, 2]]; Null]]; 
         Which[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
           If[$CellContext`trQ$, 
             
             AppendTo[$CellContext`blossomBases$$, 
              0]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[$CellContext`GadjAug$, \
$CellContext`mate$, 
              Part[$CellContext`augOrBlossom$, 2]], 
           Part[$CellContext`augOrBlossom$, 1] === 
           "Stuck", $CellContext`newPath$ = {}; If[$CellContext`trQ$, 
             AppendTo[$CellContext`blossomBases$$, 0]], 
           Part[$CellContext`augOrBlossom$, 1] === "Blossom", 
           If[$CellContext`trQ$, AppendTo[$CellContext`blossomBases$$, 
               Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
             Null]; $CellContext`shrunken$ = \
$CellContext`ShrinkFlower[$CellContext`GadjAug$, $CellContext`mate$, 
              
              Part[$CellContext`augOrBlossom$, 
               2]]; $CellContext`newPath$ = \
$CellContext`AugmentingPathRecursive[
              Part[$CellContext`shrunken$, 1], 
              
              Part[$CellContext`shrunken$, 
               2]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[
              Part[$CellContext`shrunken$, 1], 
              Part[$CellContext`shrunken$, 2], $CellContext`newPath$]; 
           If[$CellContext`trQ$, 
             
             If[$CellContext`newPath$ != {}, 
              AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
              AppendTo[$CellContext`listOfEvents$$, "AugmentingPath"]; 
              AppendTo[$CellContext`listOfBlosAndAPs$$, 
                Partition[$CellContext`newPath$, 2, 1]]; 
              AppendTo[$CellContext`blossomBases$$, 
                Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
              AppendTo[$CellContext`listOfExtraBlossoms$$, 
                Part[$CellContext`augOrBlossom$, 2, 2]]; 
              AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]]]]; \
$CellContext`newPath$]; $CellContext`MaximumMatchingMK[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`graph$, $CellContext`matching$ = Table[0, {
             $CellContext`V[$CellContext`G$]}], $CellContext`augPath$ = {}, \
$CellContext`oldMatching$ = {}, $CellContext`matchingList$, \
$CellContext`trQ$, $CellContext`maxrec$, $CellContext`numAugPaths$}, \
$CellContext`graph$ = $CellContext`G$; $CellContext`count$$ = 
          0; $CellContext`maxrec$ = Infinity; $CellContext`trQ$ = True; 
         If[$CellContext`trQ$, $CellContext`listOfGraphs$$ = \
($CellContext`listOfMatchings$$ = ($CellContext`listOfEvents$$ = \
($CellContext`listOfBlosAndAPs$$ = ($CellContext`listOfExtraBlossoms$$ = \
($CellContext`blossomBases$$ = {}))))); $CellContext`numAugPaths$ = 
            0]; $CellContext`matchingList$ = \
$CellContext`MaximalMatchingSW[$CellContext`graph$]; 
         If[2 Length[$CellContext`matchingList$] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`matchingList$]]; $CellContext`mPrint[
           Length[$CellContext`matchingList$]]; 
         Do[Part[$CellContext`matching$, $CellContext`e] = 
           Reverse[$CellContext`e], {$CellContext`e, \
$CellContext`matchingList$}]; $CellContext`mPrint[
          "startingAugmentation"]; $CellContext`augPath$ = \
$CellContext`AugmentingPath[$CellContext`graph$, $CellContext`matching$]; \
$CellContext`mPrint[{
           "first augmentation done", (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; 
         If[$CellContext`augPath$ == {}, Do[
             If[$CellContext`i != 0, If[
                Not[
                 MemberQ[$CellContext`oldMatching$, {
                   
                   Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
                AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                  Part[$CellContext`matching$, $CellContext`i]}]]; 
              Null], {$CellContext`i, $CellContext`matching$}]; 
           If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`oldMatching$], 
           Do[
            If[
             EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i]] = 
              Part[$CellContext`augPath$, $CellContext`i - 1]; 
             Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i - 1]] = 
              Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
             1, 
             Length[$CellContext`augPath$]}]]; 
         While[True, $CellContext`mPrint[{
             "startingAugmentation", $CellContext`matching$}]; \
$CellContext`augPath$ = $CellContext`AugmentingPath[$CellContext`graph$, \
$CellContext`matching$]; If[$CellContext`augPath$ == {}, 
             Break[]]; Do[
             If[
              EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i]] = 
               Part[$CellContext`augPath$, $CellContext`i - 1]; 
              Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i - 1]] = 
               Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
              1, 
              Length[$CellContext`augPath$]}]]; 
         If[Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`r, 
                Blank[]], $CellContext`r > 0]] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[
             DeleteDuplicates[
              Map[Sort, 
               DeleteCases[
                Table[{$CellContext`i, 
                  
                  Part[$CellContext`matching$, $CellContext`i]}, \
{$CellContext`i, 
                  $CellContext`V[$CellContext`G$]}], {
                 Blank[], 0}]]]]]; $CellContext`mPrint[{
           "augmentation done", $CellContext`augPath$, \
$CellContext`matching$, (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; Do[
           If[$CellContext`i != 0, If[
              Not[
               MemberQ[$CellContext`oldMatching$, {
                 
                 Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
              AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                Part[$CellContext`matching$, $CellContext`i]}]]; 
            Null], {$CellContext`i, $CellContext`matching$}]; 
         If[$CellContext`trQ$, 
           Print[
            StringForm[
            "Total number of recursion calls: ``", $CellContext`count$$]]]; \
$RecursionLimit = 
          256; $CellContext`oldMatching$]; $CellContext`BlossomPlotData[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`aGraph$, $CellContext`graphToShow$, \
$CellContext`matching$, $CellContext`event$, $CellContext`listOfInterest$, \
$CellContext`color$, $CellContext`blosOrAP$, $CellContext`im$, \
$CellContext`locs$, $CellContext`blosBase$, $CellContext`gAdjTotal$, \
$CellContext`extraBlossom$, $CellContext`verts$}, \
$CellContext`MaximumMatchingMK[$CellContext`G$]; If[$CellContext`count$$ == 0, 
           Return[
           "Cannot show graph, no recursive calls"]]; $CellContext`locs$ = 
          Map[First, 
            Part[$CellContext`G$, 2]]; PrependTo[$CellContext`listOfGraphs$$, 
           Part[$CellContext`listOfGraphs$$, 1]]; 
         PrependTo[$CellContext`listOfMatchings$$, 
           Part[$CellContext`listOfMatchings$$, 1]]; 
         PrependTo[$CellContext`listOfEvents$$, "Start"]; 
         PrependTo[$CellContext`listOfBlosAndAPs$$, {}]; 
         PrependTo[$CellContext`blossomBases$$, 0]; 
         PrependTo[$CellContext`listOfExtraBlossoms$$, {}]; \
{$CellContext`listOfGraphs$$, $CellContext`listOfMatchings$$, \
$CellContext`listOfEvents$$, $CellContext`listOfBlosAndAPs$$, \
$CellContext`blossomBases$$, $CellContext`listOfExtraBlossoms$$, \
$CellContext`verts$ = Map[First, 
             Part[$CellContext`G$, 2]], {{
             Min[
              Map[First, $CellContext`verts$]], 
             Max[
              Map[First, $CellContext`verts$]]}, {
             Min[
              Map[Last, $CellContext`verts$]], 
             Max[
              Map[Last, $CellContext`verts$]]}}}]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->194073159],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blossomBases$$ = {0, 9, 11, 15, 9, 0, 9, 15,
     11, 9, 0}, $CellContext`count$$ = 6, $CellContext`exampleInd$$ = 
    1, $CellContext`g$$ = 
    11, $CellContext`listOfBlosAndAPs$$ = {{}, {{}, {9, 7, 6, 3, 4, 5, 8}}, {{
      9, 10}, {11, 12, 13}}, {{9, 14}, {15, 18, 19, 21, 20}}, {{}, {9, 10, 11,
       16, 17, 24, 25, 27, 26, 15, 14}}, {{9, 28}}, {{9, 14}, {14, 15}, {15, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 11}, {11, 
     10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 
     18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 
     11}, {11, 10}, {10, 28}}, {{9, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 
     19}, {19, 18}, {18, 26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 
     16}, {16, 13}, {13, 12}, {12, 11}, {11, 10}, {10, 28}}, {{9, 7}, {7, 
     6}, {6, 14}, {14, 15}, {15, 20}, {20, 21}, {21, 19}, {19, 18}, {18, 
     26}, {26, 27}, {27, 25}, {25, 24}, {24, 17}, {17, 16}, {16, 13}, {13, 
     12}, {12, 11}, {11, 10}, {10, 28}}, {}}, $CellContext`listOfEvents$$ = {
    "Start", "Blossom", "Blossom", "Blossom", "Blossom", "AugmentingPath", 
     "AugmentingPath", "AugmentingPath", "AugmentingPath", "AugmentingPath", 
     "Stuck"}, $CellContext`listOfExtraBlossoms$$ = {{}, {}, {}, {}, {}, {}, {
     9, 10, 11, 16, 17, 24, 25, 27, 26, 15, 14}, {15, 18, 19, 21, 20}, {11, 
     12, 13}, {9, 7, 6, 3, 4, 5, 
     8}, {}}, $CellContext`listOfGraphs$$ = {{{2}, {1, 3}, {2, 4, 6}, {3, 
      5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 
      12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 
      22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 
      26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 
      3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {
      5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {6, 15}, {14, 18, 
      20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 
      20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 12, 13}, {11, 13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 
      17}, {16, 22, 24}, {15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 
      23}, {22, 26}, {17, 25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 
      28}, {10, 16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {
      15, 19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 
      25}, {24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 22, 23, 
      28}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {9, 23}, {9, 
      22}, {}, {}, {}, {}, {
      9}, {{}, {{9, {2}}, {10, {28}}, {11, {}}, {16, {}}, {17, {22}}, {
        24, {}}, {25, {}}, {27, {}}, {26, {23}}, {15, {}}, {14, {}}}}}, {{
      2}, {9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 26}, {11, 17}, {16, 22, 
      24}, {}, {}, {}, {}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {15, 23, 
      27}, {25, 26}, {
      10}, {{9, 
       14}, {{15, {14}}, {18, {26}}, {19, {}}, {21, {}}, {20, {}}}}}, {{2}, {
      9, 1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 
      16}, {}, {}, {9, 15}, {14, 18, 20}, {11, 17}, {16, 22, 24}, {15, 19, 
      26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 
      27}, {18, 23, 27}, {25, 26}, {
      10}, {{9, 10}, {{11, {10}}, {12, {}}, {13, {16}}}}}, {{2}, {9, 
      1}, {}, {}, {}, {}, {}, {}, {2, 10, 14}, {9, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {9, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {{}, {{9, {}}, {7, {}}, {6, {14}}, {3, {2}}, {4, {}}, {5, {10}}, {
        8, {}}}}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 10}, {3, 7, 14}, {
      6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11, 13}, {11, 12, 
      16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 19, 26}, {18, 
      21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {24, 27}, {18, 
      23, 27}, {25, 26}, {10}, {}}, {{2}, {1, 3}, {2, 4, 6}, {3, 5}, {4, 8, 
      10}, {3, 7, 14}, {6, 9}, {5, 9}, {7, 8}, {5, 11, 28}, {10, 12, 13}, {11,
       13}, {11, 12, 16}, {6, 15}, {14, 18, 20}, {13, 17}, {16, 22, 24}, {15, 
      19, 26}, {18, 21}, {15, 21}, {19, 20}, {17, 23}, {22, 26}, {17, 25}, {
      24, 27}, {18, 23, 27}, {25, 26}, {
      10}, {}}}, $CellContext`listOfMatchings$$ = CompressedData["
1:eJxTTMoPSmJiYGDgBmIZIGZiZGHmYGdjZeDm4uXh5xMUEBYSFREXk5SQlhqV
4+NkZZfh4RZgE+GVkBLlFxYXE5QWkuQCAJ04EdA=
    "], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`exampleInd$$], 1, "example"}, {1, 2}}, {{
       Hold[$CellContext`g$$], 11, "algorithm step"}, 
      Dynamic[
       Range[
        $CellContext`hh[$CellContext`exampleInd$$]]]}, {{
       Hold[$CellContext`count$$], 0}}, {{
       Hold[$CellContext`listOfGraphs$$], {}}}, {{
       Hold[$CellContext`listOfMatchings$$], {}}}, {{
       Hold[$CellContext`listOfEvents$$], {}}}, {{
       Hold[$CellContext`listOfExtraBlossoms$$], {}}}, {{
       Hold[$CellContext`listOfBlosAndAPs$$], {}}}, {{
       Hold[$CellContext`blossomBases$$], {}}}}, Typeset`size$$ = {
    400., {205.84375, 211.15625}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`exampleInd$8013$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`blossomBases$$ = {}, $CellContext`count$$ = 
        0, $CellContext`exampleInd$$ = 1, $CellContext`g$$ = 
        11, $CellContext`listOfBlosAndAPs$$ = {}, $CellContext`listOfEvents$$ = \
{}, $CellContext`listOfExtraBlossoms$$ = {}, $CellContext`listOfGraphs$$ = \
{}, $CellContext`listOfMatchings$$ = {}}, "ControllerVariables" :> {
        Hold[$CellContext`exampleInd$$, $CellContext`exampleInd$8013$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`gra$, $CellContext`aGraph$, $CellContext`event$, \
$CellContext`blosBase$, $CellContext`locs$, $CellContext`matching$, \
$CellContext`blosOrAP$, $CellContext`extraBlossom$, \
$CellContext`graphToShow$, $CellContext`listOfInterest$, $CellContext`color$, \
$CellContext`isols$, $CellContext`data$}, $CellContext`g$$ = 
         Min[$CellContext`g$$, 
           $CellContext`hh[$CellContext`exampleInd$$]]; $CellContext`gra$ = \
$CellContext`gr[$CellContext`exampleInd$$]; $CellContext`locs$ = Map[First, 
           
           Part[$CellContext`gra$, 
            2]]; $CellContext`data$ = \
$CellContext`BlossomPlotData[$CellContext`gra$]; $CellContext`aGraph$ = 
         Part[$CellContext`data$, 
           1, $CellContext`g$$]; $CellContext`matching$ = 
         Part[$CellContext`data$, 2, $CellContext`g$$]; $CellContext`event$ = 
         Part[$CellContext`data$, 
           3, $CellContext`g$$]; $CellContext`blosOrAP$ = 
         Part[$CellContext`data$, 
           4, $CellContext`g$$]; $CellContext`blosBase$ = 
         Part[$CellContext`data$, 
           5, $CellContext`g$$]; $CellContext`extraBlossom$ = 
         Part[$CellContext`data$, 
           6, $CellContext`g$$]; $CellContext`graphToShow$ = \
$CellContext`FromAdjacencyListsSW[
           Part[$CellContext`aGraph$, 
            Span[
            1, -2]]]; {$CellContext`listOfInterest$, $CellContext`color$} = 
         Which[$CellContext`event$ == "Blossom", {
            Part[$CellContext`blosOrAP$, 2], 
            Lighter[
             Lighter[Blue]]}, $CellContext`event$ == 
           "AugmentingPath", {$CellContext`blosOrAP$, 
            Yellow}, $CellContext`event$ == "Stuck", {{}, Yellow}, 
           True, {{}, {}}]; $CellContext`isols$ = Flatten[
           Position[
            Take[$CellContext`aGraph$, 
             $CellContext`V[$CellContext`gra$]], {}]]; Column[{
           Which[$CellContext`event$ === "Stuck", 
            Style[
             StringForm[
             "Matching augmented by one edge; maximum matching has `` edges.",
               Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Blossom", 
            Style[
             StringForm[
             "Blossom found; shrink it and look for augmenting path.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], 
            
            And[$CellContext`event$ === "AugmentingPath", $CellContext`g$$ < 
             Length[$CellContext`listOfGraphs$$] - 1], 
            Style[
             StringForm[
             "Augmenting path found; expand it through the blossom.", \
$CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "AugmentingPath", 
            Style[
             StringForm[
             "Augmenting path found in original graph; augment the \
matching.", $CellContext`event$, Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"], $CellContext`event$ === "Start", 
            Style[
             StringForm[
             "A ``\[Hyphen]vertex graph with a ``\[Hyphen]edge maximal \
matching.", 
              $CellContext`V[$CellContext`gra$], Length[
                Select[$CellContext`matching$, # != 0& ]]/2], FontFamily -> 
             "Times"]], 
           Show[
            Graphics[{{
               If[$CellContext`event$ === "Blossom", {
                 EdgeForm[{
                   Thickness[0.01], 
                   Darker[Blue]}], 
                 FaceForm[
                  Lighter[
                   Lighter[Blue]]], 
                 Polygon[
                  
                  Part[$CellContext`locs$, $CellContext`listOfInterest$]]}, \
{}]}, 
              If[$CellContext`event$ === "AugmentingPath", {
                EdgeForm[{
                  Thickness[0.01], 
                  Darker[Blue]}], 
                FaceForm[
                 Lighter[Blue]], 
                Polygon[
                 
                 Part[$CellContext`locs$, $CellContext`extraBlossom$]]}, \
{}]}], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[
                And[$CellContext`event$ === "AugmentingPath", 
                 Or[
                  MemberQ[$CellContext`listOfInterest$, #2], 
                  MemberQ[$CellContext`listOfInterest$, 
                   Reverse[#2]]]], {
                 Lighter[Green], 
                 Thickness[0.02], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {
                 GrayLevel[0.7], 
                 Thickness[0.004], 
                 Line[#]}, {}]}& )], 
            GraphPlot[
             Join[
              $CellContext`GraphToEdgeRules[$CellContext`graphToShow$], 
              Thread[$CellContext`isols$ -> $CellContext`isols$]], 
             VertexCoordinateRules -> Thread[Range[
                 $CellContext`V[$CellContext`gra$]] -> $CellContext`locs$], 
             EdgeRenderingFunction -> ({
               If[Part[$CellContext`matching$, 
                  Part[#2, 1]] != Part[#2, 2], {}, 
                If[$CellContext`event$ === "Stuck", {Blue, 
                  Thickness[0.013], 
                  Line[#]}, {Red, 
                  Thickness[0.01], 
                  Line[#]}]]}& ), SelfLoopStyle -> None, 
             VertexRenderingFunction -> (Which[
               And[#2 == $CellContext`blosBase$, 
                
                Or[$CellContext`event$ === "Blossom", $CellContext`event$ === 
                 "AugmentingPath"]], {
                EdgeForm[{Black, 
                  Thickness[0.002]}], 
                FaceForm[Yellow], 
                
                Disk[#, 
                 0.022 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], 
                Text[
                 Style["B", Bold], #]}, 
               MemberQ[$CellContext`listOfInterest$, #2], {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[$CellContext`color$; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}, True, {
                EdgeForm[{Black, 
                  Thickness[0.0004]}], 
                FaceForm[Yellow; Black], 
                
                Disk[#, 
                 0.01 (Part[$CellContext`data$, -1, 1, 2] - 
                  Part[$CellContext`data$, -1, 1, 1])], Text[
                  Style["B", Bold], #]; {}}]& )], PlotLabel -> None, 
            PlotRange -> Part[$CellContext`data$, -1], Frame -> Not[True], 
            PlotRangePadding -> 0.15, FrameTicks -> True, 
            ImageSize -> {400, 400}]}]], 
      "Specifications" :> {{{$CellContext`exampleInd$$, 1, "example"}, {1, 
         2}}, {{$CellContext`g$$, 11, "algorithm step"}, 
         Dynamic[
          Range[
           $CellContext`hh[$CellContext`exampleInd$$]]], ControlType -> 
         SetterBar}, {{$CellContext`count$$, 0}, ControlType -> 
         None}, {{$CellContext`listOfGraphs$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfMatchings$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfEvents$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfExtraBlossoms$$, {}}, ControlType -> 
         None}, {{$CellContext`listOfBlosAndAPs$$, {}}, ControlType -> 
         None}, {{$CellContext`blossomBases$$, {}}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`exampleInd$$, $CellContext`g$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{443., {262.34375, 267.65625}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`hh[1] = 11; $CellContext`hh[2] = 
       7; $CellContext`gr[
        1] = $CellContext`graph[{{{1, 2}}, {{2, 3}}, {{3, 4}}, {{3, 6}}, {{4, 
         5}}, {{5, 8}}, {{5, 10}}, {{6, 7}}, {{6, 14}}, {{7, 9}}, {{8, 9}}, {{
         10, 11}}, {{10, 28}}, {{11, 12}}, {{11, 13}}, {{12, 13}}, {{13, 
         16}}, {{14, 15}}, {{15, 18}}, {{15, 20}}, {{16, 17}}, {{17, 22}}, {{
         17, 24}}, {{18, 19}}, {{18, 26}}, {{19, 21}}, {{20, 21}}, {{22, 
         23}}, {{23, 26}}, {{24, 25}}, {{25, 27}}, {{26, 
         27}}}, CompressedData["
1:eJxTTMoPSmVmYGCQAWJGIGYCYtO4XZ48TUIO05y7c57/ZneoFlnn/vCXgMO8
98uPeZvzO6z6eMk3SYDbweNhFVCG30H59s+6rD1MDmkg8EzAYYdc6+vAHd/s
w/h0N83NF3aoz9pTMnmGoAMDGIg48DBpt4vd5HdYIxOVYh0v7sACVsjgUDpZ
AsiUgPI5HD6BrImQcnj+eyXQxnf2Mf2HvmrE8DiAnMekfd/++uICW67rLFBz
GRjswQ7/Zw9xzwv7uypsjVOdf9pLgg0Uhbh7goBDp2PC0wtKEg6FQN2LC7gc
QK459/2n/TcNkA0f4OYCXQ100Ad7oO+BHhV3COidnifUzOhgfd8fyJJ2AFtT
8t8eEj7SDi/VDDnWyPA4gHwvxyrnAHZuP6vDwVMLXbd95nRwAll7+6/9Ain9
uyptAg6HQdKH/tsvAsr+vcLhAHZG8GH7qxVAkzoE4P5aNvuIwoYiEQdjMPhp
PwfEfSHsAHbOgUf2HOCAPG8/8W2Nvek9AQcAR+a50g==
         "]]; $CellContext`gr[
        2] = $CellContext`graph[{{{1, 3}}, {{1, 9}}, {{1, 22}}, {{1, 26}}, {{
         1, 30}}, {{1, 31}}, {{2, 8}}, {{2, 26}}, {{2, 27}}, {{2, 32}}, {{2, 
         36}}, {{3, 11}}, {{3, 31}}, {{3, 37}}, {{4, 16}}, {{4, 17}}, {{4, 
         24}}, {{4, 33}}, {{5, 11}}, {{5, 15}}, {{5, 16}}, {{5, 18}}, {{5, 
         34}}, {{5, 37}}, {{6, 7}}, {{6, 13}}, {{6, 19}}, {{6, 28}}, {{6, 
         29}}, {{6, 36}}, {{7, 10}}, {{7, 13}}, {{7, 21}}, {{7, 28}}, {{8, 
         23}}, {{8, 32}}, {{9, 12}}, {{9, 13}}, {{9, 20}}, {{9, 22}}, {{9, 
         30}}, {{10, 13}}, {{10, 21}}, {{10, 22}}, {{10, 26}}, {{11, 16}}, {{
         11, 37}}, {{12, 15}}, {{12, 18}}, {{12, 20}}, {{12, 30}}, {{12, 
         31}}, {{13, 19}}, {{13, 20}}, {{13, 22}}, {{14, 17}}, {{14, 19}}, {{
         14, 25}}, {{14, 33}}, {{14, 35}}, {{15, 18}}, {{15, 31}}, {{15, 
         37}}, {{16, 17}}, {{16, 24}}, {{16, 25}}, {{16, 34}}, {{17, 25}}, {{
         17, 33}}, {{18, 19}}, {{18, 20}}, {{18, 34}}, {{19, 20}}, {{19, 
         25}}, {{19, 29}}, {{19, 34}}, {{19, 35}}, {{21, 26}}, {{21, 27}}, {{
         21, 28}}, {{22, 26}}, {{23, 24}}, {{23, 29}}, {{23, 32}}, {{23, 
         35}}, {{24, 33}}, {{24, 35}}, {{25, 34}}, {{26, 27}}, {{27, 28}}, {{
         27, 36}}, {{28, 36}}, {{29, 32}}, {{29, 35}}, {{29, 36}}, {{30, 
         31}}, {{31, 37}}, {{32, 36}}, {{33, 35}}}, CompressedData["
1:eJxTTMoPSmVmYGBQBWJGIGYCYqHmA6cWuh6zb30duEOu9b29yDr3h1Ui7/aL
3zz3PfjxVfuA3ul5Qs0v7H/VZe0pmfzE3gMou879pn3C0wtKt38+2w9Wvu6x
veWWE2X75q/aDxE/t39DUcbEtzX77d/V2JvG7bq4n+v64gJbruvo5u8/CLR9
2+e99mfPgMAD+zlHFIBaL+6XjUqxvu//0J4BDD5AaQaG+/4gB122B1sndd3e
GAw27z8NMubvFfvKl2qGHGvO2INcK8Fybz9Qkf5dlXv2kixhfLqbzqL7Zz/E
fTftQbb1Tn+0H6wt7BrUHRuh/tpl/yP48dLZRw7sVweaLhN1xL7QFuSjs/Yf
lh/zNu+8uR/iugf2F4G+Bxq9H6L+CdTdD/aDg3nb6/1o4b1/EdjZN+yBgQV0
yK39aOrtj4KcMfHhfrC1Kbeh+m7vP/xVI6b/0FX7TkdQiF/ev+rjJd8kgQv7
/6wEMS7YQ8Lpsb12uxgwpG/bL5sN8hDMfU/2fwIpjzgJ9e85+3nvQR55uh8i
f8ceEi9n91eDI6wFGk8Pof5/AHXnAftSkHa+p/ZePExAqy7aAwDlIDF5
         "]]; $CellContext`AdjacencyListsToEdges[
         Pattern[$CellContext`al, 
          Blank[]]] := Map[List, 
         Union[
          Map[Sort, 
           Flatten[
            ReplaceAll[
             MapIndexed[{
               Part[#2, 1], #}& , $CellContext`al], {
               Pattern[$CellContext`i, 
                Blank[Integer]], 
               Pattern[$CellContext`L, 
                Blank[List]]} :> 
             Table[{$CellContext`i, $CellContext`l}, {$CellContext`l, \
$CellContext`L}]], 1]]]]; $CellContext`FromAdjacencyListsSW[
         Pattern[$CellContext`al, 
          Blank[]]] := $CellContext`graph[
         $CellContext`AdjacencyListsToEdges[$CellContext`al], 
         Table[{{$CellContext`i, 0}}, {$CellContext`i, 
           Length[$CellContext`al]}]]; $CellContext`GraphToEdgeRules[
         Pattern[$CellContext`G, 
          Blank[]]] := ReplaceAll[
         Map[First, 
          Part[$CellContext`G, 1]], {
           Pattern[$CellContext`x, 
            Blank[Integer]], 
           Pattern[$CellContext`y, 
            
            Blank[]]} :> ($CellContext`x -> $CellContext`y)]; \
$CellContext`GraphToVertexRules[
         Pattern[$CellContext`G, 
          Blank[]]] := Module[{$CellContext`tt}, $CellContext`tt = Map[First, 
            Part[$CellContext`G, 2]]; Thread[Range[
             
             Length[$CellContext`tt]] -> $CellContext`tt]]; \
$CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Map[First, 
         Part[$CellContext`G, 1]]; $CellContext`V[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := Length[
         Part[$CellContext`G, 2]]; $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`etemp, $CellContext`ee, $CellContext`missing}, \
$CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
              $CellContext`EdgesSW[$CellContext`G]], 
            Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
            Range[
             Length[
              Part[$CellContext`G, 2]]], 
            Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
            Join[$CellContext`etemp, 
             
             Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
           ReplaceAll[
            Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
              Blank[Integer], 
              Pattern[$CellContext`n, 
               
               Blank[]]} :> $CellContext`n], {{}} -> {}]]; \
$CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[$CellContext`graph]]] := 
       Module[{$CellContext`seen, $CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g], $CellContext`st}, $CellContext`st = 
          1; $CellContext`match = 
          Part[$CellContext`ee, $CellContext`st]; $CellContext`seen[
            Blank[]] := False; $CellContext`seen[
            Part[$CellContext`match, 1]] = True; $CellContext`seen[
            Part[$CellContext`match, 2]] = True; Do[
           If[
            And[
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 1]]], 
             Not[
              $CellContext`seen[
               Part[$CellContext`e, 2]]]], $CellContext`match = 
             Join[$CellContext`match, $CellContext`e]; $CellContext`seen[
               Part[$CellContext`e, 1]] = ($CellContext`seen[
                Part[$CellContext`e, 2]] = True)], {$CellContext`e, 
            Delete[$CellContext`ee, $CellContext`st]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]]; $CellContext`DoublePathToFlower[
         Pattern[$CellContext`doublePath, 
          Blank[]]] := 
       Module[{$CellContext`timesOccurred = 
          Tally[$CellContext`doublePath], $CellContext`twice, \
$CellContext`locations}, $CellContext`twice = 
          Select[$CellContext`timesOccurred, Part[#, 2] == 2& ]; 
         If[$CellContext`twice == {}, 
           Return[{{}, $CellContext`doublePath}]]; $CellContext`twice = 
          Part[$CellContext`twice, -1, 1]; $CellContext`locations = Flatten[
            Position[$CellContext`doublePath, $CellContext`twice]]; {
           Take[$CellContext`doublePath, Part[$CellContext`locations, 1] - 1], 
           Most[
            
            Take[$CellContext`doublePath, $CellContext`locations]]}]; \
$CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Blank[]] := 
       Condition[{"Stuck", {}}, Length[$CellContext`Gadj] <= 
         2]; $CellContext`FindAugOrBlossom[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]]] := 
       Module[{$CellContext`parents, $CellContext`n, $CellContext`vertices, \
$CellContext`treeRoots, $CellContext`head, $CellContext`tail, $CellContext`Q, \
$CellContext`neighbors, $CellContext`novelNeighbors, $CellContext`vw = {}, \
$CellContext`evenQ, $CellContext`uncoveredNode = 
          0, $CellContext`v, $CellContext`doublePath}, $CellContext`n = 
          Length[$CellContext`Gadj] - 1; $CellContext`vertices = 
          Range[$CellContext`n]; $CellContext`parents = 
          Table[0, {$CellContext`n}]; $CellContext`treeRoots = 
          Select[$CellContext`vertices, Part[$CellContext`MV, #] == 
            0& ]; $CellContext`head = ($CellContext`tail = 0); While[If[
             
             And[$CellContext`head == $CellContext`tail, \
$CellContext`uncoveredNode == 
              0, $CellContext`vw == {}, $CellContext`treeRoots != {}], \
$CellContext`Q[$CellContext`tail] = (Part[$CellContext`parents, 
                 Part[$CellContext`treeRoots, 1]] = 
               Part[$CellContext`treeRoots, 1]); 
             Increment[$CellContext`tail]; $CellContext`evenQ[
                Part[$CellContext`treeRoots, 1]] = 
              True; $CellContext`treeRoots = Rest[$CellContext`treeRoots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`treeRoots != \
{}, $CellContext`vw == {}], $CellContext`v = \
$CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`neighbors = 
            Part[$CellContext`Gadj, $CellContext`v]; 
           If[$CellContext`evenQ[$CellContext`v] == True, 
             Do[
              Which[
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] == 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`uncoveredNode = $CellContext`w; Break[], 
               And[
               Part[$CellContext`parents, $CellContext`w] == 0, 
                Part[$CellContext`MV, $CellContext`w] != 0], 
               Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
               Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = False, 
               And[Part[$CellContext`parents, $CellContext`w] != 0, 
                $CellContext`evenQ[$CellContext`w]], $CellContext`vw = \
{$CellContext`v, $CellContext`w}; 
               Break[]], {$CellContext`w, $CellContext`neighbors}], 
             Do[If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] == 0], 
                Part[$CellContext`parents, $CellContext`w] = $CellContext`v; \
$CellContext`Q[$CellContext`tail] = $CellContext`w; 
                Increment[$CellContext`tail]; \
$CellContext`evenQ[$CellContext`w] = True; Break[]]; If[
                And[
                Part[$CellContext`MV, $CellContext`v] == $CellContext`w, 
                 Part[$CellContext`parents, $CellContext`w] != 0], 
                If[
                 Not[
                  $CellContext`evenQ[$CellContext`w]], $CellContext`vw = {
                    Part[$CellContext`MV, $CellContext`w], $CellContext`w}; 
                 Break[]]], {$CellContext`w, $CellContext`neighbors}]]]; 
         Which[$CellContext`uncoveredNode != 0, {"AugmentingPath", 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parents, #]& , \
$CellContext`uncoveredNode]]]}, $CellContext`vw != {}, {
           "Blossom", $CellContext`doublePath = Join[
               Reverse[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  Part[$CellContext`vw, 1]]]], 
               Most[
                Most[
                 FixedPointList[Part[$CellContext`parents, #]& , 
                  
                  Part[$CellContext`vw, 
                   2]]]]]; \
$CellContext`DoublePathToFlower[$CellContext`doublePath]}, True, {
           "Stuck", {}}]]; $CellContext`ShrinkFlower[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], {
          Pattern[$CellContext`stem, 
           Blank[]], 
          Pattern[$CellContext`blossom, 
           Blank[]]}] := 
       Module[{$CellContext`Gadj1, $CellContext`mate, $CellContext`ns, \
$CellContext`stemBase, $CellContext`blossomNeighbors, \
$CellContext`blossomNeighborConnections}, $CellContext`Gadj1 = \
$CellContext`Gadj; $CellContext`mate = $CellContext`MV; $CellContext`stemBase = 
          Part[$CellContext`blossom, 1]; $CellContext`blossomNeighbors = 
          Complement[
            Apply[Union, 
             
             Part[$CellContext`Gadj1, $CellContext`blossom]], \
$CellContext`blossom]; Part[$CellContext`Gadj1, 
            Rest[$CellContext`blossom]] = {}; 
         Part[$CellContext`Gadj1, $CellContext`stemBase] = \
$CellContext`blossomNeighbors; Do[
           If[
            Not[
             MemberQ[
              
              Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], 
            PrependTo[
             
             Part[$CellContext`Gadj1, $CellContext`bN], \
$CellContext`stemBase]], {$CellContext`bN, $CellContext`blossomNeighbors}]; \
$CellContext`Gadj1 = DeleteCases[$CellContext`Gadj1, 
            Apply[Alternatives, 
             Rest[$CellContext`blossom]], 
            Infinity]; $CellContext`blossomNeighborConnections = 
          Table[{$CellContext`b, 
             Complement[
              
              Part[$CellContext`Gadj, $CellContext`b], \
$CellContext`blossom]}, {$CellContext`b, $CellContext`blossom}]; 
         Part[$CellContext`Gadj1, -1] = {$CellContext`stem, \
$CellContext`blossomNeighborConnections}; $CellContext`ns = 
          Length[$CellContext`stem]; {$CellContext`Gadj1, $CellContext`mate}]; \
$CellContext`ExpandBlossomsAndChangeMatching[
         Pattern[$CellContext`Gadj1, 
          Blank[]], 
         Pattern[$CellContext`MV, 
          Blank[]], 
         Pattern[$CellContext`augPath, 
          Blank[]]] := 
       Module[{$CellContext`Gadj, $CellContext`mate, $CellContext`stem, \
$CellContext`blossomConnectData, $CellContext`stemBase, $CellContext`place, \
$CellContext`blossom, $CellContext`blossomNeighbors, $CellContext`b, \
$CellContext`v, $CellContext`c, $CellContext`pathToAdd, \
$CellContext`matchingFlag, $CellContext`currVert, \
$CellContext`augmentingPath, $CellContext`position, \
$CellContext`nextInBlossom, $CellContext`pB, $CellContext`pC, \
$CellContext`basePositions}, $CellContext`Gadj = $CellContext`Gadj1; \
$CellContext`mate = $CellContext`MV; $CellContext`augmentingPath = \
$CellContext`augPath; If[$CellContext`augmentingPath == {}, 
           Return[{}]]; If[Part[$CellContext`Gadj, -1] == {}, 
           
           Return[$CellContext`augmentingPath]]; {$CellContext`stem, \
$CellContext`blossomConnectData} = 
          Part[$CellContext`Gadj, -1]; $CellContext`b = 
          Part[$CellContext`blossomConnectData, 1, 1]; If[
           
           MemberQ[$CellContext`augmentingPath, $CellContext`b], \
$CellContext`blossom = Table[
              
              First[$CellContext`i], {$CellContext`i, \
$CellContext`blossomConnectData}]; Do[$CellContext`place = Part[
                Position[$CellContext`blossom, 
                 First[$CellContext`i], 1, 1], 1, 1]; 
             Which[$CellContext`place == 1, Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, -1]}, $CellContext`place == 
               Length[$CellContext`blossom], Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}, True, 
               Part[$CellContext`Gadj, 
                 First[$CellContext`i]] = {
                 Part[$CellContext`blossom, $CellContext`place + 1], 
                 Part[$CellContext`blossom, $CellContext`place - 1]}]; 
             Part[$CellContext`Gadj, 
                First[$CellContext`i]] = Join[
                Part[$CellContext`Gadj, 
                 First[$CellContext`i]], 
                Last[$CellContext`i]]; If[Last[$CellContext`i] != {}, 
               Do[AppendTo[
                  Part[$CellContext`Gadj, $CellContext`j], 
                  First[$CellContext`i]]; $CellContext`basePositions = 
                 Position[
                   Part[$CellContext`Gadj, $CellContext`j], $CellContext`b, 1,
                    1]; Part[$CellContext`Gadj, $CellContext`j] = Delete[
                   
                   Part[$CellContext`Gadj, $CellContext`j], \
$CellContext`basePositions], {$CellContext`j, 
                 
                 Last[$CellContext`i]}]], {$CellContext`i, \
$CellContext`blossomConnectData}]; 
           If[Part[$CellContext`augmentingPath, 
               1] == $CellContext`b, $CellContext`c = 
              Part[$CellContext`augmentingPath, 2]; 
             Null, $CellContext`position = Part[
                Flatten[
                 Position[$CellContext`augmentingPath, $CellContext`b]], 1]; 
             If[Part[$CellContext`augmentingPath, $CellContext`position + 1] == 
               Part[$CellContext`stem, -1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position - 
                 1], $CellContext`c = 
               Part[$CellContext`augmentingPath, $CellContext`position + 
                 1]]]; $CellContext`v = Part[
              Select[$CellContext`blossom, MemberQ[
                Part[$CellContext`Gadj, $CellContext`c], #]& ], 
              1]; $CellContext`pathToAdd = {$CellContext`v}; \
$CellContext`matchingFlag = True; $CellContext`currVert = $CellContext`v; 
           While[$CellContext`currVert != $CellContext`b, 
             If[$CellContext`matchingFlag, AppendTo[$CellContext`pathToAdd, 
                 
                 Part[$CellContext`mate, $CellContext`currVert]]; \
$CellContext`matchingFlag = False, $CellContext`nextInBlossom = Part[
                  Select[$CellContext`blossom, MemberQ[
                    Complement[
                    
                    Part[$CellContext`Gadj, $CellContext`currVert], \
$CellContext`pathToAdd], #]& ], 1]; 
               AppendTo[$CellContext`pathToAdd, $CellContext`nextInBlossom]; \
$CellContext`matchingFlag = True; Null]; $CellContext`currVert = 
              Part[$CellContext`pathToAdd, -1]; Null]; $CellContext`pathToAdd = 
            Most[$CellContext`pathToAdd]; $CellContext`pB = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`b]], 
              1]; $CellContext`pC = Part[
              Flatten[
               Position[$CellContext`augmentingPath, $CellContext`c]], 1]; 
           If[$CellContext`pB < $CellContext`pC, $CellContext`pathToAdd = 
              Reverse[$CellContext`pathToAdd]; $CellContext`augmentingPath = 
              Join[
                Part[$CellContext`augmentingPath, 
                 Span[1, $CellContext`pB]], $CellContext`pathToAdd, 
                Part[$CellContext`augmentingPath, 
                 Span[$CellContext`pC, -1]]], $CellContext`augmentingPath = 
             Join[
               Part[$CellContext`augmentingPath, 
                Span[1, $CellContext`pC]], $CellContext`pathToAdd, 
               Part[$CellContext`augmentingPath, 
                Span[$CellContext`pB, -1]]]]; 
           Return[$CellContext`augmentingPath], 
           Return[$CellContext`augmentingPath]]]; $CellContext`AugmentingPath[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`mateList, 
          Blank[]]] := 
       Module[{$CellContext`result}, $CellContext`result = \
$CellContext`AugmentingPathRecursive[
            Append[
             $CellContext`ToAdjacencyListsSW[$CellContext`G], {}], \
$CellContext`mateList]; $CellContext`result]; \
$CellContext`AugmentingPathRecursive[
         Pattern[$CellContext`GadjAug$, 
          Blank[]], 
         Pattern[$CellContext`mate$, 
          Blank[]]] := 
       Module[{$CellContext`shrunken$, $CellContext`augOrBlossom$, \
$CellContext`Hadj$, $CellContext`MM$, $CellContext`n$ = 
          Length[$CellContext`GadjAug$], $CellContext`newPath$, \
$CellContext`newMate$, $CellContext`trQ$, $CellContext`maxrec$}, \
$CellContext`maxrec$ = Infinity; $CellContext`trQ$ = 
          True; $CellContext`augOrBlossom$ = \
$CellContext`FindAugOrBlossom[$CellContext`GadjAug$, $CellContext`mate$]; 
         Increment[$CellContext`count$$]; \
$CellContext`mPrint[$CellContext`count$$]; 
         If[$CellContext`count$$ > $CellContext`maxrec$, 
           Return["Exceeded MaxRecursion"]]; 
         If[$CellContext`trQ$, 
           AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
           AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]; 
           AppendTo[$CellContext`listOfEvents$$, 
             Part[$CellContext`augOrBlossom$, 1]]; 
           AppendTo[$CellContext`listOfExtraBlossoms$$, {}]; 
           If[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
              Partition[
               Part[$CellContext`augOrBlossom$, 2], 2, 1]], 
             AppendTo[$CellContext`listOfBlosAndAPs$$, 
               Part[$CellContext`augOrBlossom$, 2]]; Null]]; 
         Which[Part[$CellContext`augOrBlossom$, 1] === "AugmentingPath", 
           If[$CellContext`trQ$, 
             
             AppendTo[$CellContext`blossomBases$$, 
              0]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[$CellContext`GadjAug$, \
$CellContext`mate$, 
              Part[$CellContext`augOrBlossom$, 2]], 
           Part[$CellContext`augOrBlossom$, 1] === 
           "Stuck", $CellContext`newPath$ = {}; If[$CellContext`trQ$, 
             AppendTo[$CellContext`blossomBases$$, 0]], 
           Part[$CellContext`augOrBlossom$, 1] === "Blossom", 
           If[$CellContext`trQ$, AppendTo[$CellContext`blossomBases$$, 
               Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
             Null]; $CellContext`shrunken$ = \
$CellContext`ShrinkFlower[$CellContext`GadjAug$, $CellContext`mate$, 
              
              Part[$CellContext`augOrBlossom$, 
               2]]; $CellContext`newPath$ = \
$CellContext`AugmentingPathRecursive[
              Part[$CellContext`shrunken$, 1], 
              
              Part[$CellContext`shrunken$, 
               2]]; $CellContext`newPath$ = \
$CellContext`ExpandBlossomsAndChangeMatching[
              Part[$CellContext`shrunken$, 1], 
              Part[$CellContext`shrunken$, 2], $CellContext`newPath$]; 
           If[$CellContext`trQ$, 
             
             If[$CellContext`newPath$ != {}, 
              AppendTo[$CellContext`listOfGraphs$$, $CellContext`GadjAug$]; 
              AppendTo[$CellContext`listOfEvents$$, "AugmentingPath"]; 
              AppendTo[$CellContext`listOfBlosAndAPs$$, 
                Partition[$CellContext`newPath$, 2, 1]]; 
              AppendTo[$CellContext`blossomBases$$, 
                Part[$CellContext`augOrBlossom$, 2, 2, 1]]; 
              AppendTo[$CellContext`listOfExtraBlossoms$$, 
                Part[$CellContext`augOrBlossom$, 2, 2]]; 
              AppendTo[$CellContext`listOfMatchings$$, $CellContext`mate$]]]]; \
$CellContext`newPath$]; $CellContext`MaximumMatchingMK[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`graph$, $CellContext`matching$ = Table[0, {
             $CellContext`V[$CellContext`G$]}], $CellContext`augPath$ = {}, \
$CellContext`oldMatching$ = {}, $CellContext`matchingList$, \
$CellContext`trQ$, $CellContext`maxrec$, $CellContext`numAugPaths$}, \
$CellContext`graph$ = $CellContext`G$; $CellContext`count$$ = 
          0; $CellContext`maxrec$ = Infinity; $CellContext`trQ$ = True; 
         If[$CellContext`trQ$, $CellContext`listOfGraphs$$ = \
($CellContext`listOfMatchings$$ = ($CellContext`listOfEvents$$ = \
($CellContext`listOfBlosAndAPs$$ = ($CellContext`listOfExtraBlossoms$$ = \
($CellContext`blossomBases$$ = {}))))); $CellContext`numAugPaths$ = 
            0]; $CellContext`matchingList$ = \
$CellContext`MaximalMatchingSW[$CellContext`graph$]; 
         If[2 Length[$CellContext`matchingList$] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`matchingList$]]; $CellContext`mPrint[
           Length[$CellContext`matchingList$]]; 
         Do[Part[$CellContext`matching$, $CellContext`e] = 
           Reverse[$CellContext`e], {$CellContext`e, \
$CellContext`matchingList$}]; $CellContext`mPrint[
          "startingAugmentation"]; $CellContext`augPath$ = \
$CellContext`AugmentingPath[$CellContext`graph$, $CellContext`matching$]; \
$CellContext`mPrint[{
           "first augmentation done", (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; 
         If[$CellContext`augPath$ == {}, Do[
             If[$CellContext`i != 0, If[
                Not[
                 MemberQ[$CellContext`oldMatching$, {
                   
                   Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
                AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                  Part[$CellContext`matching$, $CellContext`i]}]]; 
              Null], {$CellContext`i, $CellContext`matching$}]; 
           If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[$CellContext`oldMatching$], 
           Do[
            If[
             EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i]] = 
              Part[$CellContext`augPath$, $CellContext`i - 1]; 
             Part[$CellContext`matching$, 
                Part[$CellContext`augPath$, $CellContext`i - 1]] = 
              Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
             1, 
             Length[$CellContext`augPath$]}]]; 
         While[True, $CellContext`mPrint[{
             "startingAugmentation", $CellContext`matching$}]; \
$CellContext`augPath$ = $CellContext`AugmentingPath[$CellContext`graph$, \
$CellContext`matching$]; If[$CellContext`augPath$ == {}, 
             Break[]]; Do[
             If[
              EvenQ[$CellContext`i], Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i]] = 
               Part[$CellContext`augPath$, $CellContext`i - 1]; 
              Part[$CellContext`matching$, 
                 Part[$CellContext`augPath$, $CellContext`i - 1]] = 
               Part[$CellContext`augPath$, $CellContext`i]], {$CellContext`i, 
              1, 
              Length[$CellContext`augPath$]}]]; 
         If[Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`r, 
                Blank[]], $CellContext`r > 0]] + 
            1 >= $CellContext`V[$CellContext`G$], If[$CellContext`trQ$, 
             $CellContext`mPrint[
              StringForm[
              "Total number of recursion calls: ``", $CellContext`count$$]]]; 
           Return[
             DeleteDuplicates[
              Map[Sort, 
               DeleteCases[
                Table[{$CellContext`i, 
                  
                  Part[$CellContext`matching$, $CellContext`i]}, \
{$CellContext`i, 
                  $CellContext`V[$CellContext`G$]}], {
                 Blank[], 0}]]]]]; $CellContext`mPrint[{
           "augmentation done", $CellContext`augPath$, \
$CellContext`matching$, (1/2) Count[$CellContext`matching$, 
              Condition[
               Pattern[$CellContext`x, 
                Blank[]], $CellContext`x > 0]]}]; Do[
           If[$CellContext`i != 0, If[
              Not[
               MemberQ[$CellContext`oldMatching$, {
                 
                 Part[$CellContext`matching$, $CellContext`i], \
$CellContext`i}]], 
              AppendTo[$CellContext`oldMatching$, {$CellContext`i, 
                Part[$CellContext`matching$, $CellContext`i]}]]; 
            Null], {$CellContext`i, $CellContext`matching$}]; 
         If[$CellContext`trQ$, 
           Print[
            StringForm[
            "Total number of recursion calls: ``", $CellContext`count$$]]]; \
$RecursionLimit = 
          256; $CellContext`oldMatching$]; $CellContext`BlossomPlotData[
         Pattern[$CellContext`G$, 
          Blank[]]] := 
       Module[{$CellContext`aGraph$, $CellContext`graphToShow$, \
$CellContext`matching$, $CellContext`event$, $CellContext`listOfInterest$, \
$CellContext`color$, $CellContext`blosOrAP$, $CellContext`im$, \
$CellContext`locs$, $CellContext`blosBase$, $CellContext`gAdjTotal$, \
$CellContext`extraBlossom$, $CellContext`verts$}, \
$CellContext`MaximumMatchingMK[$CellContext`G$]; If[$CellContext`count$$ == 0, 
           Return[
           "Cannot show graph, no recursive calls"]]; $CellContext`locs$ = 
          Map[First, 
            Part[$CellContext`G$, 2]]; PrependTo[$CellContext`listOfGraphs$$, 
           Part[$CellContext`listOfGraphs$$, 1]]; 
         PrependTo[$CellContext`listOfMatchings$$, 
           Part[$CellContext`listOfMatchings$$, 1]]; 
         PrependTo[$CellContext`listOfEvents$$, "Start"]; 
         PrependTo[$CellContext`listOfBlosAndAPs$$, {}]; 
         PrependTo[$CellContext`blossomBases$$, 0]; 
         PrependTo[$CellContext`listOfExtraBlossoms$$, {}]; \
{$CellContext`listOfGraphs$$, $CellContext`listOfMatchings$$, \
$CellContext`listOfEvents$$, $CellContext`listOfBlosAndAPs$$, \
$CellContext`blossomBases$$, $CellContext`listOfExtraBlossoms$$, \
$CellContext`verts$ = Map[First, 
             Part[$CellContext`G$, 2]], {{
             Min[
              Map[First, $CellContext`verts$]], 
             Max[
              Map[First, $CellContext`verts$]]}, {
             Min[
              Map[Last, $CellContext`verts$]], 
             Max[
              Map[Last, $CellContext`verts$]]}}}]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->8559434]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "A ",
 StyleBox["matching",
  FontSlant->"Italic"],
 " in a graph is a collection of edges whose ends are disjoint. A ",
 StyleBox["maximal matching",
  FontSlant->"Italic"],
 " is one that cannot be extended to a larger matching; it is easy to find \
one by adding edges until further addition is not possible. A ",
 StyleBox["maximum matching",
  FontSlant->"Italic"],
 " is a matching containing the largest number of edges among all matchings. \
An ",
 StyleBox["augmenting path",
  FontSlant->"Italic"],
 " for a matching ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]], "InlineMath"],
 " is a path with an odd number of edges, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "1"], ",", 
    SubscriptBox["e", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["e", "m"]}], TraditionalForm]], "InlineMath"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "odd"], "\[Element]", "M"}], TraditionalForm]], 
  "InlineMath"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "even"], "\[NotElement]", "M"}], TraditionalForm]], 
  "InlineMath"],
 ". The symmetric difference of ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]], "InlineMath"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["e", "i"], "}"}], TraditionalForm]], "InlineMath"],
 " yields a matching having one more edge than ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
   3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
   3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
   3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
   3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
   3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
   3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
   3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
   3.503668667730068*^9}, {3.50374777806688*^9, 3.5037477781289673`*^9}, {
   3.50374785444855*^9, 3.5037479148203773`*^9}, {3.503783882475699*^9, 
   3.503783910326969*^9}, 3.503783983046832*^9, {3.50384592910391*^9, 
   3.503845929515951*^9}, {3.504468167913383*^9, 3.504468169058996*^9}},
 CellID->1191185259],

Cell["\<\
For the basics of the Hungarian algorithm in the bipartite case, see the \
Demonstration \"The Hungarian Maximum Matching Algorithm\". For details of \
the shrinking process see [1, 3, 4]. The first example is from the notes of \
Zwick [4]. The second example is interesting because the second blossom uses \
an edge that arose from the shrinking of the first blossom, but is not an \
edge in the original graph. \
\>", "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
   3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
   3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
   3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
   3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
   3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
   3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
   3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
   3.503668667730068*^9}, {3.50374777806688*^9, 3.5037477781289673`*^9}, {
   3.50374785444855*^9, 3.5037479148203773`*^9}, {3.503783882475699*^9, 
   3.503783910326969*^9}, 3.503783983046832*^9, {3.50384592910391*^9, 
   3.503845931276127*^9}, 3.504468202595731*^9, {3.504527073023878*^9, 
   3.5045271483961887`*^9}, 3.504527193784731*^9, 3.504527929709494*^9},
 CellID->86612939],

Cell["\<\
While a recursive approach might not be the most efficient, it does work well \
for graphs of several thousand vertices. A more efficient implementation of \
the blossom algorithm that also includes the more difficult case of weighted \
edges can be found in [2]. \
\>", "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
   3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
   3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
   3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
   3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
   3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
   3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
   3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
   3.503668667730068*^9}, {3.50374777806688*^9, 3.5037477781289673`*^9}, {
   3.50374785444855*^9, 3.5037479148203773`*^9}, {3.503783882475699*^9, 
   3.503783910326969*^9}, 3.503783983046832*^9, {3.50384592910391*^9, 
   3.5038459312751274`*^9}, {3.504468235580061*^9, 3.504468242082707*^9}},
 CellID->505558339],

Cell["References", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503845920988098*^9, 3.503845922596259*^9}, 
   3.504527246555789*^9},
 CellID->223523867],

Cell[TextData[{
 "[1] W. Cook, W. Cunningham, W. Pulleyblank, and A. Schrijver, ",
 StyleBox["Combinatorial Optimization, ",
  FontSlant->"Italic"],
 "New York: Wiley, 1998."
}], "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
  3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
  3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
  3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
  3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
  3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
  3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
  3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
  3.503668667730068*^9}, {3.50374777806688*^9, 3.503747846598556*^9}, {
  3.503748026118313*^9, 3.503748026526267*^9}, {3.50378397232443*^9, 
  3.50378397280399*^9}, {3.504468248315321*^9, 3.504468249529991*^9}, {
  3.5045272508123627`*^9, 3.50452725518014*^9}, {3.50452821559365*^9, 
  3.5045282228524437`*^9}},
 CellID->500749969],

Cell[TextData[{
 "[2] V. Kolmogorov, \"Blossom V: A New Implementation of a Minimum Cost \
Perfect Matching Algorithm,\" ",
 StyleBox["Mathematical Programming Computation",
  FontSlant->"Italic"],
 " ",
 StyleBox["1",
  FontWeight->"Bold"],
 "(1), 2009 pp. 43\[Dash]67."
}], "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
   3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
   3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
   3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
   3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
   3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
   3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
   3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
   3.503668667730068*^9}, {3.50374777806688*^9, 3.503747843037888*^9}, {
   3.5037480340004797`*^9, 3.503748035735292*^9}, {3.504468252331706*^9, 
   3.5044682552339373`*^9}, {3.5044682920216227`*^9, 3.5044683788827457`*^9}, 
   3.504527260716323*^9, 3.504528228821587*^9, 3.504528587191557*^9, {
   3.5045329253354053`*^9, 3.504532925483918*^9}, {3.504546119461527*^9, 
   3.504546165867216*^9}},
 CellID->1327916651],

Cell[TextData[{
 "[3] R. Tarjan, \"Sketchy Notes on Edmonds' Incredible Shrinking Blossom \
Algorithm for General Matching,\" Course Notes, Department of Computer \
Science, Princeton University, 2002. ",
 ButtonBox["http://www.cs.dartmouth.edu/~ac/Teach/CS105-Winter05/Handouts/\
tarjan-blossom.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.cs.dartmouth.edu/~ac/Teach/CS105-Winter05/Handouts/tarjan-\
blossom.pdf"], None},
  ButtonNote->
   "http://www.cs.dartmouth.edu/~ac/Teach/CS105-Winter05/Handouts/tarjan-\
blossom.pdf"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.5030579869434643`*^9, 3.503058051267292*^9}, {
  3.503058460748146*^9, 3.503058466602208*^9}, {3.503058616337603*^9, 
  3.503058619449847*^9}, {3.503058766195855*^9, 3.503058772633484*^9}, {
  3.503606766129313*^9, 3.503606828230007*^9}, {3.503606916134493*^9, 
  3.5036072032322483`*^9}, {3.5036662186467648`*^9, 3.503666336112595*^9}, {
  3.5036663746134367`*^9, 3.503666459572734*^9}, {3.5036667491190777`*^9, 
  3.503666866721946*^9}, {3.503667008525093*^9, 3.5036670630494957`*^9}, {
  3.5036672215546494`*^9, 3.5036673969741592`*^9}, {3.503668458753952*^9, 
  3.503668667730068*^9}, {3.50374777806688*^9, 3.5037478270986357`*^9}, {
  3.5037479630425167`*^9, 3.503747977520184*^9}, {3.50446826001539*^9, 
  3.504468263615144*^9}, {3.504468395138629*^9, 3.504468437798478*^9}, {
  3.504527630878703*^9, 3.50452776130838*^9}, {3.504528505012768*^9, 
  3.504528506212284*^9}},
 CellID->1645093733],

Cell[TextData[{
 "[4] U. Zwick, \"Lecture Notes on: Maximum Matching in Bipartite and \
Non-Bipartite Graphs,\" 2009. ",
 ButtonBox["http://www.cs.tau.ac.il/~zwick/grad-algo-0910/match.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.cs.tau.ac.il/~zwick/grad-algo-0910/match.pdf"], None},
  ButtonNote->"http://www.cs.tau.ac.il/~zwick/grad-algo-0910/match.pdf"],
 "."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503747805908106*^9, 3.5037478373105164`*^9}, {
   3.5037479873014097`*^9, 3.503748002619862*^9}, 3.5037480403597507`*^9, {
   3.504468273053857*^9, 3.504468276068688*^9}, {3.50446846235699*^9, 
   3.5044684919111967`*^9}, {3.5045279134048653`*^9, 
   3.5045279191641293`*^9}, {3.504527985049622*^9, 3.50452807494014*^9}, {
   3.5045284146704197`*^9, 3.504528488212063*^9}},
 CellID->735541369]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.5038456116681695`*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["graphs", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666028129167*^9, 3.503666029565604*^9}},
 CellID->1431380365],

Cell["matchings", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.5036660306044283`*^9, 3.503666059816696*^9}},
 CellID->99653920],

Cell["maximal matching", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.5036660306044283`*^9, 3.5036660598145723`*^9}},
 CellID->1993672427],

Cell["maximum matching", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666035156948*^9, 3.503666043895537*^9}},
 CellID->437352156],

Cell["blossom algorithm", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666044077744*^9, 3.503666070257565*^9}},
 CellID->1604325836],

Cell["augmenting paths", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.5036660704719753`*^9, 3.5036660723998537`*^9}},
 CellID->707806456]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["The Hungarian Maximum Matching Algorithm",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
TheHungarianMaximumMatchingAlgorithm"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/TheHungarianMaximumMatchingAlgorithm"]], \
"RelatedLinks",
 CellChangeTimes->{3.35696210375764*^9, 3.5045274674117937`*^9},
 CellID->171579438],

Cell[TextData[ButtonBox["Matching",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/Matching.html"], None},
 ButtonNote->"http://mathworld.wolfram.com/Matching.html"]], "RelatedLinks",
 CellID->1812560192],

Cell[TextData[ButtonBox["Blossom Algorithm",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/BlossomAlgorithm.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/BlossomAlgorithm.html"]], "RelatedLinks",
 CellID->2073847705]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Matthew Kusner",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Matthew+Kusner"]\
, None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Matthew+Kusner"],
 " and ",
 ButtonBox["Stan Wagon",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"],
 " "
}], "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666009933549*^9, 3.503666016723465*^9}, {
   3.504527450581718*^9, 3.504527450621423*^9}}],

Cell["(Macalester College)", "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.503666009933549*^9, 3.503666016723465*^9}, 
   3.504527450581718*^9},
 CellID->1643614249]
}, Open  ]]
}, Open  ]]
},
WindowSize->{955, 741},
WindowMargins->{{10, Automatic}, {Automatic, 0}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[376871, 7928, 376, 9, 29, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[377250, 7939, 678, 16, 29, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[377931, 7957, 340, 11, 29, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[378274, 7970, 637, 15, 29, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[378914, 7987, 844, 21, 29, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[379761, 8010, 369, 9, 29, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[380133, 8021, 1464, 31, 29, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[381600, 8054, 908, 21, 29, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 385797, 8191},
 {"RotateAndZoomIn3D", 385907, 8194},
 {"DragLocators", 386018, 8197},
 {"CreateAndDeleteLocators", 386135, 8200},
 {"SliderZoom", 386250, 8203},
 {"GamepadControls", 386357, 8206},
 {"AutomaticAnimation", 386471, 8209},
 {"BookmarkAnimation", 386589, 8212}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 153, 2, 74, "DemoTitle"],
Cell[735, 26, 33, 0, 266, "InitializationSection"],
Cell[CellGroupData[{
Cell[793, 30, 29, 0, 188, "ManipulateSection"],
Cell[CellGroupData[{
Cell[847, 34, 131545, 3065, 7194, "Input"],
Cell[132395, 3101, 46536, 912, 542, "Output",
 CellID->1355054090]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178980, 4019, 36, 0, 166, "ManipulateCaptionSection"],
Cell[179019, 4021, 1821, 28, 133, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180877, 4054, 28, 0, 168, "ThumbnailSection"],
Cell[180908, 4056, 46445, 910, 542, "Output",
 CellID->358172400]
}, Open  ]],
Cell[CellGroupData[{
Cell[227390, 4971, 28, 0, 138, "SnapshotsSection"],
Cell[227421, 4973, 46445, 910, 542, "Output",
 CellID->596858930],
Cell[273869, 5885, 46449, 910, 542, "Output",
 CellID->194073159],
Cell[320321, 6797, 46447, 910, 542, "Output",
 CellID->8559434]
}, Open  ]],
Cell[CellGroupData[{
Cell[366805, 7712, 26, 0, 332, "DetailsSection"],
Cell[366834, 7714, 2393, 62, 65, "DetailNotes",
 CellID->1191185259],
Cell[369230, 7778, 1420, 21, 49, "DetailNotes",
 CellID->86612939],
Cell[370653, 7801, 1202, 18, 35, "DetailNotes",
 CellID->505558339],
Cell[371858, 7821, 169, 4, 21, "DetailNotes",
 CellID->223523867],
Cell[372030, 7827, 1112, 19, 21, "DetailNotes",
 CellID->500749969],
Cell[373145, 7848, 1302, 24, 36, "DetailNotes",
 CellID->1327916651],
Cell[374450, 7874, 1496, 28, 35, "DetailNotes",
 CellID->1645093733],
Cell[375949, 7904, 845, 17, 35, "DetailNotes",
 CellID->735541369]
}, Open  ]],
Cell[CellGroupData[{
Cell[376831, 7926, 37, 0, 120, "ControlSuggestionsSection"],
Cell[376871, 7928, 376, 9, 29, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[377250, 7939, 678, 16, 29, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[377931, 7957, 340, 11, 29, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[378274, 7970, 637, 15, 29, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[378914, 7987, 844, 21, 29, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[379761, 8010, 369, 9, 29, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[380133, 8021, 1464, 31, 29, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[381600, 8054, 908, 21, 29, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382545, 8080, 30, 0, 152, "SearchTermsSection"],
Cell[382578, 8082, 140, 3, 21, "SearchTerms",
 CellID->1431380365],
Cell[382721, 8087, 143, 3, 21, "SearchTerms",
 CellID->99653920],
Cell[382867, 8092, 154, 3, 21, "SearchTerms",
 CellID->1993672427],
Cell[383024, 8097, 149, 3, 21, "SearchTerms",
 CellID->437352156],
Cell[383176, 8102, 151, 3, 21, "SearchTerms",
 CellID->1604325836],
Cell[383330, 8107, 153, 3, 21, "SearchTerms",
 CellID->707806456]
}, Open  ]],
Cell[CellGroupData[{
Cell[383520, 8115, 31, 0, 138, "RelatedLinksSection"],
Cell[383554, 8117, 393, 9, 21, "RelatedLinks",
 CellID->171579438],
Cell[383950, 8128, 234, 5, 21, "RelatedLinks",
 CellID->1812560192],
Cell[384187, 8135, 262, 6, 22, "RelatedLinks",
 CellID->2073847705]
}, Open  ]],
Cell[CellGroupData[{
Cell[384486, 8146, 25, 0, 136, "AuthorSection"],
Cell[384514, 8148, 696, 21, 21, "Author"],
Cell[385213, 8171, 175, 4, 21, "Author",
 CellID->1643614249]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
